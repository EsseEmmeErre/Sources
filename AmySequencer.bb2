;-> AmySequencer by Stefano Maria Regattin
;d> 19 gennaio 2002 da AmySequencer
;m> 20,21,22,23,24,26,30,31 gennaio 2002
;m> 1,2,3,4,5,6,7,9,10,11,13,15,16,17,18,19,20,22,23,24,27,28 febbraio 2002
;m> 1,2,3,4,5,6,7,8,10,11,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,31 marzo 2002
;m> 1,2,4,5,6,8,9,10,11,13,14,19,20,21,22,24,25,28,29,30 aprile 2002
;m> 4,5,6,8,9,10,11,12,13,14,15,17,18 maggio 2002
;m> 12,14,15,16,17,20,22,23,28,30 giugno 2002
;m> 1,3,4,5,9,10,13,15,16 luglio 2002
;m> 10,13,14,23 agosto 2002
;m> 2,5,22 settembre 2002
;m> 8,9,12,16,17,18,20,21,22,23,24,25,26,28 ottobre 2002
;m> 4,5,6,7,9,12,13,18,19,21,23,25,29 novembre 2002
;m> 4,6,21,23,24,25,30 dicembre 2002
;m> 1,2,3,4,6,17,21 gennaio 2003
;m> 7,16 marzo 2003
;m> 5 aprile 2003
;m> 25 maggio 2003
;m> 9,12,13,14,15,16,17,18,21,22,23,24 giugno 2003
;m> 9,10,11,12,13,21,22,23,29 luglio 2003
;m> 10,30 agosto 2003
;m> 1,3,13,14,15 settembre 2003
;m> 5,11,12 ottobre 2003
;m> 12,15 novembre 2003
;m> 3,4,5,6,7,8,14,15,20,23 marzo 2004
;m> 19,20,21,22,23,24,25 aprile 2004
;m> 15 maggio 2004
;m> 4,5,6,7,8,19,20,21,22 luglio 2004
;m> 2,7,30 agosto 2004
;m> 10,11 novembre 2004
;m> 14 dicembre 2004
;m> 6 gennaio 2005
;m> 4,5,6,7 marzo 2005
;m> Festa delle donne 2005
;m> 9,23,24,25,26,27,28,29,30,31 marzo 2005
;m> 1,2,3,4,5,29 aprile 2005
;m> 1,4,5,6,8,9,10,11,12,13,14,18,19,20,21,22 maggio 2005
;m> 9,15 giugno 2005
;m> 14,15,16,29,30,31 luglio 2006
;m> 1,2,3,4,5,6,7,9,10,11,12,14,24,28,29,30,31 agosto 2006
;m> 23,24,25,26,29,30 novembre 2006
;m> 2,3,6,12,13,14,15,16,20 dicembre 2006
;m> 26,27 aprile 2007
;m> 9,11,12,13,19,20,23,24,26 maggio 2007
;m> 9,16,17 giugno 2007
;m> 7,8,10,11,12,22,23,26,27 luglio 2007
;m> 11,13,19,29 agosto 2007
;m> 1,3,4,5,6,7,9,10,12,13,14,15,16,17,18,21,22 settembre 2007
;m> 11,14,16,19,20,23,25,26,27,30 novembre 2007
;m> 13 gennaio 2008
;m> 14,18 giugno 2008
;m> 1,2,3,4,5,6,7,8,9,14 novembre 2008
;m> 23,24 gennaio 2010
;m> 6 febbraio 2010
;m> 22 novembre 2010
;--------------------


;****************************************************************************
;ATTENZIONE! PRIMA DI COMPILARE IMPOSTARE IL MASSIMO DI OGGETTI GADGETLIST A
;6 E DI SOUND A 33 NELLE COMPILER OPTIONS!
;ATTENTION! SET TO 6 THE GADGETLIST AND TO 33 THE SOUND OBJECTS MAXIMUM INTO
;THE COMPILER OPTIONS BEFORE COMPILING!
;***************************************


;----------------------------------------------------------------------
;le seguenti linee servono per la corretta gestione della versione del
;programma
;the following lines are for the correct handling of the program's version
;--------------------------------------------------------------------------
JMP InizioDelProgramma

;-----------------------
;versione del programma
;program version
;----------------
Dc.b "$VER: AmySequencer 0.51 (22.11.2010)"

Even

;program start
InizioDelProgramma


;--------------------------------------------------
;le seguenti costanti indicano il tipo di finestra
;the following constants state the window's kind
;------------------------------------------------

;window sizing gadget
#BottoneRidimensionaFinestra=1

;draggable window
#FinestraMovibile=2

;window depth gadget
#BottoneNascondiFinestra=4

;window close gadget
#BottoneChiudiFinestra=8

;sizing window right border (you must set gimme-zero-zero to use it)
#BordoDestraFinestraRidimensionabile=16

;sizing window bottom border (you must set gimme-zero-zero to use it)
#BordoBassoFinestraRidimensionabile=32

;backdrop window
#FinestraDiSfondo=256

;gimme-zero-zero window
#FinestraConMemoriaBordi=1024

;borderless window
#FinestraSenzaBordi=2048

;window active
#FinestraAttivata=4096


;-------------------------------------------------
;le seguenti costanti indicano il tipo di bottoni
;the following constants state the gadgets' kind
;------------------------------------------------

;invert
#InvertiBottone=1

;related to window's right side
#PosizioneRelativaAllaDestraDellaFinestra=2

;related to window'w bottom side
#PosizioneRelativaAlBassoDellaFinestra=4

;size as window's inner width
#ComeLarghezzaInternaFinestra=8

;size as window's inner height
#ComeAltezzaInternaFinestra=16

;box select
#ScatolaDaSelezionare=32

;horiziontal movement
#MovimentoOrizzontale=64

;vertical movement
#MovimentoVerticale=128

;borderless
#NessunBordo=256

;exclude each other
#SiEscludonoLUnLAltro=512

;attach to window's right side
#AttaccaAllaFinestraADestra=1024

;attach to window's left side
#AttaccaAllaFinestraASinistra=2048

;attach to window's top
#AttaccaAllaFinestraInAlto=4096

;attach to window's bottom
#AttaccaAllaFinestraInBasso=8192

;gimme-zero-zero border gadget
#BottoneConMemoriaBordi=16384


;--------------------------------------------------------
;le seguenti costanti indicano gli eventi delle finestre
;the following constants state window events
;--------------------------------------------

;you have pressed a mouse button
#HaiPremutoUnTastoDelTopo=8

;you have moved the mouse
#HaiMossoIlTopo=16

;you have pressed a gadget
#HaiPremutoUnBottone=32

;you have released a gadget
#HaiRilasciatoUnBottone=64

;you have activated the menu
#HaiAttivatoIlMenu=256

;you have closed the window
#HaiChiusoLaFinestra=512

;you have pressed a key
#HaiPremutoUnTasto=1024


;--------------------------------------------------------
;le seguenti costanti indicano i tasti cliccati del topo
;the following constants state the clicked mouse buttons
;--------------------------------------------------------

;no mouse button pressed
#NessunTastoDelTopoPremuto=0

;left mouse button pressed
#TastoSinistroDelTopoPremuto=1

;right mouse button pressed
#TastoDestroDelTopoPremuto=2

;both mouse buttons pressed
#EntrambiITastiDelTopoPremuti=3

;left mouse button released
#TastoSinistroDelTopoRilasciato=5

;right mouse button released
#TastoDestroDelTopoRilasciato=6

;both mouse buttons released
#EntrambiITastiDelTopoRilasciati=7


;---------------------------------------------------------------------------
;le seguenti costanti sono usate dal comando WJam per la selezione del modo
;grafico
;the following constants are used by WJam command for the graphic mode
;selection
;----------

;one colour with transparent background
#UnColoreSenzaSfondo=0

;two colours with full background
#DueColoriPieni=1

;second time same colour
#SecondaVoltaStessiColori=2

;exchange the two colours
#ScambiaIDueColori=4


;-----------------------------------------------------------------------------
;le seguenti costanti indicano il valore ascii del tasti Backspace, Esc e dei
;tasti cursore
;the following constants state the ascii value for the Backspace, Esc and
;cursor keys
;-------------
#Backspace=8
#Escape=27
#CursorUp=28
#CursorDown=29
#CursorRight=30
#CursorLeft=31


;-----------------------------------------------------------
;le seguenti costanti indicano i bottoni del joypad premuti
;the following constants state the joypad pressed buttons
;---------------------------------------------------------
#_PlayB=1
#_ReverseB=2
#_ForwardB=4
#_GreenB=8
#_YellowB=16
#_RedB=32
#_BlueB=64


;-------------------------------------------------------------------------
;le seguenti costanti indicano la direzione scelta con il joystick/joypad
;the following constants state the choosen direction by joystick/joypad
;-----------------------------------------------------------------------
#JoyMovedUp=0
#JoyMovedRight=2
#JoyMovedDown=4
#JoyMovedLeft=6
#JoyNotMoved=8


;------------------------------------------------------------------------------
;le seguenti costanti servono per ricavare il periodo di un canale audio AMIGA
;dalla frequenza di campionamento;ce ne e' una per gli AMIGA PAL e una per
;quelli NTSC
;the following constants are used to obtain an AMIGA audio channel period from the
;sampling frequency;there is one for PAL AMIGAs and one for NTSC AMIGAs
;-----------------------------------------------------------------------

;PAL timing
#TemporizzazionePAL=3546895

;NTSC timing
#TemporizzazioneNTSC=3579545


;------------------------------------------------------------------------------
;questa costante imposta il periodo minimo per i canali audio;il limite per i
;vecchi AMIGA e' 123, ma io ho scelto un periodo minimo di 125, che
;corrisponde ad un La nella nona ottava
;this constant sets the audio channels minimum period;on the oldest AMIGA the
;lowerst usable period is 123, but I have choosen a minimum period of 125,
;that is the A note in the ninth octave
;---------------------------------------
#PeriodoMinimo=125


;-----------------------------------------------------------------
;queste sono le costanti per la fonte di caratteri delle finestre
;these are the window character font constants
;----------------------------------------------

;topaz font identifier number
#FonteTopaz=0

;topaz font size
#GrandezzaFonteTopaz=8


;---------------------------------------
;queste sono le costanti per lo schermo
;these are the screen constants
;-------------------------------

;screen identifier number
#Schermo=0

;high resolution
#AltaRisoluzione=8

;four bitplanes, that are sixteen colours
#SediciColori=4

;screen and window title bars height
#AltezzaBarreTitoli=#GrandezzaFonteTopaz+3


;-----------------------------------------------------------------------------
;queste sono le costanti che identificano le finestre;le costanti con valore
;uguale sono per le finestre che non sono aperte contemporaneamente
;these are the window identifier constants;the same value constants are for
;windows not opened at the same time
;------------------------------------

;main window
#FinPrincipale=0

;sequence editor window
#FinEditoreSequenza=1

;sounds manager window
#FinGestoreSuoni=1

;basic event window
#FinEventoBase=2

;sounds editor window
#FinEditoreSuono=2

;custom requester window
#FinDiDialogo=3


;main window's menu list
#ListaMenuPrincipale=0

;main window's menu first item, set the selected sequence name
#InserisciIlNomeDellaSequenza=0

;main window's menu second item, edit the selected sequence
#EditaLaSequenza=1

;main window's menu third item, delete the selected sequence
#EliminaLaSequenza=2

;sounds manager window's menu list
#ListaMenuGestoreSuoni=1

;sounds manager window's menu first item, load a sound
#CaricaUnSuono=0

;sounds manager window's menu second item, edit the sound
#EditaIlSuono=1

;sounds manager window's menu third item, delete the sound
#EliminaIlSuono=2

;sequence editor window's menu list
#ListaMenuEditoreSequenza=1


;main window's gadget list
#ListaBottoniPrincipale=0

;sounds manager window's gadget list
#ListaBottoniGestoreSuoni=1

;sounds editor window's gadget list
#ListaBottoniEditoreSuono=2

;sequence editor window's gadget list
#ListaBottoniEditoreSequenza=3

;basic event window's gadget list
#ListaBottoniEventoBase=4

;sound generator window's gadget list
#ListaBottoniGeneratoreSuono=5


;sequence editor window's zone table
#TabellaZoneEditoreSequenza=0


;-------------------------------------------------------------
;barra editore suoni, valore utile qualsiasi maggiore di zero
;sounds manager's slider, useful value any greater than zero
;------------------------------------------------------------
#BarraGestoreSuoni=0


;background pix graphics area (bitmap)
#AreaGraficaImmagineDiSfondo=0

;loaded sound magnification graphics area (bitmap)
#AreaGraficaIngrandim=1


;---------------------------------------------------------------------------
;questa costante indica il numero di riferimento della tavolozza dei colori
;disponibili
;this constant states the colours palette referring number
;----------------------------------------------------------
#TavolozzaDeiColori=0

#ImmagineNote=0
#XLunImmagineNota=26
#YLunImmagineNota=20


;-------------------------------------------------------------------------
;queste costanti indicano i cambiamenti che possono essere applicati agli
;eventi musicali
;these constants states different changes that can be applied to musical
;events
;-------

;select a musical event
#SelezionaUnEventoMusicale=0

;change the channel of the selected musical events
#CambiaIlCanaleDegliEventiMusicaliSelezionati=1

;increase by one the value of the selected musical events
#AlzaDiUnoGliEventiMusicaliSelezionati=2

;decrease by one the value of the selected musical events
#AbbassaDiUnoGliEventiMusicaliSelezionati=3

;move forward the selected musical events
#SpostaAvantiNelTempoGliEventiMusicaliSelezionati=4

;move backward the selected musical events
#SpostaIndietroNelTempoGliEventiMusicaliSelezionati=5

;delete the selected musical events
#EliminaGliEventiMusicaliSelezionati=6

;select all the musical events
#SelezionaTuttiGliEventiMusicali=7

;deselect all the musical events
#DeselezionaTuttiGliEventiMusicali=8

;toggle selection of all musical events
#InvertiLaSelezioneDiTuttiGliEventiMusicali=9

;cut all the selected musical events
#TagliaGliEventiMusicaliSelezionati=10

;copy all the selected musical events
#CopiaGliEventiMusicaliSelezionati=11

;paste the previous cutted or copied musical events
#IncollaGliEventiMusicali=12

;forget the previous cutted or copied musical events
#DimenticaGliEventiMusicaliTagliatiOCopiati=13

;select same kind's musical events with the same channel
#SelezionaGliEventiMusicaliUguali=14

;add 8 to the event value of the selected musical events that are not notes
;and are not beats per minute
#AggiungiOttoAgliEventiMusicaliSelezionati=15

;sub 8 to the event value of the selected musical events that are not notes
;and are not beats per minute
#SottraiOttoAgliEventiMusicaliSelezionati=16

;add 10 to the event value of the selected beats per minute (BPM) events
#AggiungiDieciAgliEventiMusicaliSelezionati=17

;sub 10 to the event value of the selected beats per minute (BPM) events
#SottraiDieciAgliEventiMusicaliSelezionati=18

;put up of one octave the selected notes
#AlzaDiUnOttavaLeNoteSelezionate=19

;put down of one octave the selected notes
#AbbassaDiUnOttavaLeNoteSelezionate=20

;change the value of the selected musical events, that is velocity for notes
#CambiaIlValoreDegliEventiMusicaliSelezionati=21

;increase the selected notes length
#AllungaLaDurataDelleNoteSelezionate=22

;decrease the selected notes length
#RiduciLaDurataDelleNoteSelezionate=23

;add a beat to the selected time signature events
#AggiungiUnBattitoAlTempoSelezionato=24

;sub a beat to the selected time signature events
#TogliUnBattitoAlTempoSelezionato=25

;add a measure to the selected time signature events
#AggiungiUnaMisuraAlTempoSelezionato=26

;sub a measure to the selected time signature events
#TogliUnaMisuraAlTempoSelezionato=27

;select the musical event inside the area
#SelezionaGliEventiMusicaliNellAreaDelTopo=28

;go to the insertion point
#VaiAlPuntoDInserimento=29


;-----------------------------------------------------------------------------
;le seguenti costanti indicano il modo di disegno delle sequenze visualizzate
;the following constants state the displayed sequences drawing mode
;-------------------------------------------------------------------

;unselected sequence
#SequenzaNonSelezionata=0

;selected sequence
#SequenzaSelezionata=1

;highlighted sequence
#SequenzaEvidenziata=2


;----------------------------------------------------------------------------
;le seguenti costanti indicano lo stato che un evento musicale puo' assumere
;the following constants state the status that a musical event can be
;---------------------------------------------------------------------

;unselected musical event
#EventoMusicaleNonSelezionato=0

;selected musical event
#EventoMusicaleSelezionato=1

;cutted musical event
#EventoMusicaleTagliato=2

;copied musical event
#EventoMusicaleCopiato=4

;played musical event
#EventoMusicaleEseguito=8

;ended musical event
#EventoMusicaleTerminato=16


;-----------------------------------------------------------
;queste costanti indicano come eseguire gli eventi musicali
;these constants state how to play musical events
;-------------------------------------------------

;play events from the main window
#EseguiGliEventiMusicaliDallaFinestraPrincipale=0

;play events from the sequence editor
#EseguiGliEventiMusicaliDallEditoreSequenza=1


;--------------------------------------------------------------
;le seguenti costanti indicano il tempo base che e' 4/4, cioe'
;#BattitiDiBase/#MisureDiBase
;the following constants states the basic time that is 4/4, that is
;#BattitiDiBase/#MisureDiBase
;-----------------------------

;basic beats
#BattitiDiBase=4

;basic measures
#MisureDiBase=4


;MIDI device identifier number
#DispositivoMIDI=0

;basic ticks per quarter note
#TicDiBasePerQuarto=192

;basic ticks per sixtyfourth note
#TicDiBasePerSessantaquattresimo=#TicDiBasePerQuarto/16

;tracks maximum
#MassimoTracce=1024

;sequences maximum
#MassimoSequenze=32768

;sounds maximum
#MassimoSuoni=32

;MIDI files history
#StoriaDeiFileMIDI=0

;MIDI file to load
#FileMIDIDaCaricare=0


;------------------------------------------
;numeri identificatori per l'editore suono
;sound editor identifier numbers
;--------------------------------

;edited sound
#SuonoEditato=#MassimoSuoni

;magnification area slider
#BarraIngrandimento=0

;multiple waveform slider
#BarraMultiplo=0

;backward
#Indietro=0

;forward
#Avanti=1

;sound bank
#BancoDelSuono=0

;conversion bank
#BancoDiConversione=1

;synthetic waveform bank
#BancoOndaSintetica=2

;multiple waveform bank
#BancoOndaMultipla=3


;fast memory bank kind
#MemoriaFast=0

;public memory bank type
#MemoriaPubblica=1

;chip memory bank kind
#MemoriaChip=2

;save the whole bank
#SalvaIlBancoIntero=0


;----------------------------------
;custom requester window constants
;----------------------------------

;outlined font height
#AltezzaTestoBordato=1+#GrandezzaFonteTopaz+1

;buttons height
#AltezzaBottone=2+#GrandezzaFonteTopaz+2

;none mouse zone
#NessunaZonaDelTopo=-1

#No=0

;yes
#Si=1


;-----------------
;colour constants
;-----------------

;background colour
#ColSfondo=0

;light grey
#ColGrigioChiaro=1

;mid grey
#ColGrigioMedio=2

;dark grey
#ColGrigioScuro=3

;red colour
#ColRosso=4

;yellow colour
#ColGiallo=6

;green colour
#ColVerde=8

;cyan colour
#ColAcquamarina=10

;blue colour
#ColBlu=12

;purple colour
#ColViola=14

;darker colour
#Scuro=1


;sound editor data colour
#ColDati=#ColAcquamarina+#Scuro

;sound editor lines colour
#ColLinee=#ColViola+#Scuro

;Topaz8 font identifier number
#FonteTopaz8=0

;ANNO chunk length
#LunghezzaAnnotazioni=40

;AUTH chunk length
#LunghezzaAutore=24

;(C) chunk length
#LunghezzaProprieta=36

;sequence reduction
#RiduzioneSequenze=16

;------------------------------------------------------------------------
;il seguente comando indica dove si trovano sul vostro computer i codici
;sorgenti di Blitz2 da includere in questo programma
;the following command states the place on your computer where are the Blitz2
;source codes to be included into this program
;----------------------------------------------
INCDIR "Lavoro:Linguaggi/Blitz/"

;-------------------------------------------------------------------------
;questo comando inserisce una sola volta in questo punto del programma il
;codice sorgente specificato
;this command inserts one unique time in this point of the program the
;specified source code
;----------------------
XINCLUDE "MIDIConstants.bb2"


;------------------
;variabili globali
;global variables
;-----------------

;          loop, no filter,   begin, reduction,no memory,   last line,  Zero
DEFTYPE .b CICLO,NIENTEFILTRO,INIZIO,RIDUZIONE,SENZAMEMORIA,ULTIMALINEA,ZERO

;          face image height,activated selection area,notes invisible area,   selected channel, sound loading error flag
DEFTYPE .b AltezzaFaccione,  AreaDiSelezioneAttivata, AreaInvisibileDelleNote,CanaleSelezionato,ErroreDiCaricamentoDelSuono

;          notes image loading error flag, backdrop image loading error flag,       basic event,musical event moved by mouse
DEFTYPE .b ErroreDiCaricamentoImmagineNote,ErroreDiCaricamentoDellImmagineDiSfondo, EventoBase, EventoMusicaleSpostatoConIlTopo

;          slider increment,note increment y,face image width, MIDI enabled,mouse key,   note,new note, sound signed by mouse
DEFTYPE .b IncrementoBarra, IncrementoYNota, LarghezzaFaccione,MIDIAttivato,TastiDelTopo,Nota,NuovaNota,SuonoIndicatoDalTopo

;          beat ticks,   visible tracks,voice off ,visible area start y,sound magnify area y position
DEFTYPE .b TicPerBattito,TracceVisibili,VoceSpenta,YInizioAreaVisibile, YPosIngrandimento

;          heigth, step  ,sound end line x,sound start line x
DEFTYPE .w ALTEZZA,PASSO, XLINEAFINESUONO, XLINEAINIZIOSUONO

;          sequence editor window inner height,  sound editor window inner height,  main window inner height
DEFTYPE .w AltezzaInternaFinestraEditoreSequenza,AltezzaInternaFinestraEditoreSuono,AltezzaInternaFinestraPrincipale

;          screen height, non note events useful area,values visible area,active channels,sequence editor buttons width
DEFTYPE .w AltezzaSchermo,AreaUtileEventiNonNote,AreaVisibileDeiValori,   CanaliAttivati, LarghezzaBottoniEditoreSequenza

;          sound editor window inner width,        sequence editor window inner width,  main window inner width
DEFTYPE .w LarghezzaInternaFinestraEditoreSequenza,LarghezzaInternaFinestraEditoreSuono,LarghezzaInternaFinestraPrincipale

;          screen width,    mouse area x,musical events area x, sliders width,bars per mins background x,mouse x,mouse sel area
DEFTYPE .w LarghezzaSchermo,XAreaDelTopo,XLunAreaEventiMusicali,XLunBarra,    XPosSfondoBattutePerMinuto,XTopo,  YAreaDelTopo

;          sliders height,bars per mins background y,tempo background y,magnification slider y,mouse y
DEFTYPE .w YLunBarra,     YPosSfondoBattutePerMinuto,YPosSfondoTempo,   YBARRAINGRANDIM,       YTopo

;          sequence duration,events,selected events,  sound end,frequency,max frequency,   sound start,magnification begin
DEFTYPE .l DurataSequenza,   Eventi,EventiSelezionati,FINESUONO,FREQUENZA,FREQUENZAMASSIMA,INIZIOSUONO,INIZIOINGRANDIMENTO

;          lines begin,sound length,  sound new end, sound new frequency,sound new start, magnification position
DEFTYPE .l InizioLinee,LUNGHEZZASUONO,NUOVAFINESUONO,NUOVAFREQUENZA,     NUOVOINIZIOSUONO,POSIZIONEINGRANDIMENTO

;          insertion point,  visible area begin x
DEFTYPE .l PuntoDInserimento,XInizioAreaVisibile


;---------------------------------------
;sounds file requester string variables
;---------------------------------------

;sound path maximum length
 MaxLen PercorsoDelSuono$=160

;sound name maximum length
 MaxLen NomeDelSuono$=64


;------------
;tasti usati
;used keys
;----------

;backspace key
TastoIndietro$=Chr$(#Backspace)

;escape key
TastoFuga$=Chr$(#Escape)

;cursor up key
TastoCursoreSu$=Chr$(#CursorUp)

;cursor down key
TastoCursoreGiu$=Chr$(#CursorDown)

;cursor right key
TastoCursoreDestra$=Chr$(#CursorRight)

;cursor left key
TastoCursoreSinistra$=Chr$(#CursorLeft)

;space char
Spazio$=" "

;AmySequencer author name
Autore$="Stefano Maria Regattin"

;screen title
TitoloSchermo$="AmySequencer 0.51 (Tue, 22nd Nov 2010) by "+Autore$


;----------------------------------------------------------
;questa variabile riporta la parte non visibile del motivo
;this variable reports the non visible motive area
;--------------------------------------------------
AreaInvisibileDelMotivo.l=1

;----------------------------------------------------------------------
;questa variabile riporta la parte non visibile del tempo nell'editore
;sequenza
;this variable reports the non visible time area into the sequence editor
;-------------------------------------------------------------------------
AreaInvisibileDelTempo.l=1

;-----------------------------------------------------------------------------
;questa variabile indica la velocita' di esecuzione delle note, indicata come
;battute al minuto
;this variable states the notes execution velocity, stated as bars per minute
;-----------------------------------------------------------------------------
BattutePerMinuto.w=120

;-----------------------------------------------------
;questa variabile indica i battiti correnti del tempo
;this variable states the tempo current beats
;---------------------------------------------
Battiti.b=#BattitiDiBase

;----------------------------------------------------------------------
;questa variabile indica i colori da impostare della sequenza corrente
;this variable states the colours to set for the current sequence
;-----------------------------------------------------------------
ColoriDellaSequenza.b=0

;----------------------------------------------------------------------------
;questa costante indica il valore per cui bisogna moltiplicare o dividere la
;frequenza della nota per ricavare rispettivamente la nota successiva o la
;nota precedente e corrisponde a 2^(1/12), cioe' la radice dodicesima di 2
;this constant states the value witch it must moltiply or divide the note
;frequency to obtain respectively the following note or the previous note and
;corresponds to 2^(1/12), that is the twelfth root of 2
;--------------------------------------------------------
DistanzaSemitono.f=1.05946309

;unknown error
ErroreSconosciuto.b=True

;------------------------------------------------------------------------------
;questa variabile, diventando vera (true), vi permette di uscire dal programma
;this variable, becaming True, let you exit from the program
;------------------------------------------------------------
EsciDalProgramma.b=False

EventoMusicaleSelezionato.w=0
;----------------------------------------------------------------------------
;questa variabile viene usata solo dalla procedura di selezione degli eventi
;musicali e il suo valore viene usato per la selezione degli eventi uguali.
;this variable is used only by the musical events selection procedure and its
;value is used by the alike musical events selection.
;------------------------------------------------------

;---------------------------------------------------------------------------
;questa variabile gestisce il filtro audio dell'AMIGA; all'inizio e' attivo
;perche' il filtro e' attivo in partenza ma puo' essere cambiato nell'editore
;dei suoni
;this variable manages the AMIGA audio filter;at the beginning is always On
;because the filter is On by start but into the sound editor it can be changed
;------------------------------------------------------------------------------
NIENTEFILTRO=Off:Filter NIENTEFILTRO

;------------------------------------------------------------------
;questa variabile indica se e' stata aperta la finestra principale
;this flag states if the main window is opened
;----------------------------------------------
FinestraPrincipaleAperta.b=False

;-----------------------------------------------------------------------------
;questa variabile viene usata nell'editore del suono per indicare se la linea
;la linea marcatrice attiva e' quella di inizio o di fine del suono
;this variable is used in the sound editor to states if the active marker line
;is that of the begin or the end of the sound
;---------------------------------------------
INIZIO=True

;------------------------------------------------------------------------------
;Questa variabile indica la larghezza di base delle note;puo' essere cambiata
;secondo i bisogni del momento
;This variable states the basic notes width;it can be changed depending of
;the needs of the moment
;------------------------
LarghezzaEventoBase.w=#TicDiBasePerQuarto

;------------------------------------------
;questa variabile indica la fine del brano
;this variable states song end
;------------------------------
LunghezzaBrano.l=0

;-----------------------------------------------------------------
;questa variabile indica se e' stato attivato un dispositivo MIDI
;this variable states if a MIDI device has been activated
;---------------------------------------------------------
MIDIAttivato=False

;-----------------------------------------------------
;questa variabile indica le misure correnti del tempo
;this variable states the tempo current measures
;------------------------------------------------
Misure.w=#MisureDiBase

;--------------------------------------------------------------------------
;questa variabile indica se gli eventi musicali dello stesso canale devono
;essere mostrati da soli nell'editore sequenza
;this variable states if the same channel musical events must be shown alone
;in the sequence editor
;-----------------------
MostraSoloGliEventiMusicaliDelCanaleSelezionato.b=False

;------------------------------------------------------------------------
;questa variabile indica se gli eventi musicali dello stesso tipo devono
;essere mostrati da soli nell'editore sequenza
;this variable states if the same kind musical events must be shown alone in
;the sequence editor
;--------------------
MostraSoloGliEventiMusicaliDelloStessoTipo.b=False

;----------------------------------------------------------------------------
;questa variabile indica se deve essere mostrato il nuovo valore dell'evento
;selezionato mosso con il mouse
;this variable states if the new value of the selected event dragged by mouse
;must be showed or not
;----------------------
MostraNuovoValore.b=False

Nota=12*8:NuovaNota=Nota

;---------------------------------------------------------------------------
;questa variabile sara' maggiore di zero se una nota non e' stata terminata
;this variable will be greater than zero if one or more notes have not been
;terminated
;-----------
NoteSuonate.l=0

;----------------------------------------------------------------------------
;questa variabile riporta il nome del file della storia dei file MIDI aperti
;this variable reports the file name of the loaded MIDI files history
;---------------------------------------------------------------------
NomeDellaStoriaDeiFileMIDIAperti$="LoadedMIDIFilesHistory"

;--------------------------------------------------------------------
;questa variabile indica l'ottava visualizzata nell'editore sequenza
;this variable states the visualized octave in the sequence editor
;------------------------------------------------------------------
OttavaSelezionata.b=#_MiddleC/12

;------------------------------------------------------------------------------
;questa variabile indica se si entra nell'editore sequenza per la prima volta,
;per mostrare i pannelli di richiesta che riportano i tasti da usare
;this variable states if you enters in the sequence editor for the first time,
;to show the requesters that reports the keys to use
;----------------------------------------------------
PrimaVoltaNellEditoreSequenza.b=True

;--------------------------------------------------------------------------
;questa variabile indica la scala di visualizzazione delgi eventi musicali
;dell'editore sequenza
;this variable states the musical events visualization scale of the sequence
;editor
;--------
ScalaEventiMusicali.w=1

;-------------------------------------------------------------------
;Questa variabile indica il numero massimo della sequenza da creare
;This variable states the maximum number of the sequence to create
;------------------------------------------------------------------
SequenzaMassimaDaCreare.l=1

;--------------------------------------------------------------------------
;questa variabile indica la sequenza selezionata;se contiene zero nessuna
;sequenza e' selezionata, altrimenti contiene il numero positivo che
;identifica la sequenza
;this variable states the selected sequence;if retains zero no sequence is
;selected, otherwise retain the positive number that identifies the sequence
;----------------------------------------------------------------------------
SequenzaSelezionata.l=0

;-------------------------------------------------------------------------
;questa variabile indica se la lista degli ultimi 5 file midi caricati e'
;stata scritta
;this flag states if the last 5 loaded MIDI files list has been written
;-----------------------------------------------------------------------
StoriaDeiFileMIDIAperti.b=False

;----------------------------------------
;questa variabile conta i suoni caricati
;this variable counts the loaded sounds
;---------------------------------------
SuoniCaricati.b=0

;------------------------------------------------------------------------------
;La nota base, il quarto, corrisponde a 192 tic;questa costante indica quanti
;tic passano in un 50mo di secondo per un tempo di 120 battute per minuto
;The basic note, the quarter, corresponds to 192 ticks;this constant signs
;how many ticks takes passes in a 50th of a second for a time of 120 measures
;per minute
;-----------
TicPerCinquantesimoDiSecondo.q=(#TicDiBasePerQuarto*4.0*120)/3000

;---------------------------------------------------------------------
;questa variabile stringa indica il tipo di evento musicale corrente; all'inizio e'
;impostata sull'evento nota
;this string variable states the current musical event; at the beginning is
;set on the note event
;----------------------
TipoDiEventoMusicaleDiBase$="Note"

;------------------------------------------------------------------------------
;questa variabile indica per le note la velocita' di base e per i controlli il
;valore di base; valori utili da zero a 127
;this variable states for the notes the basic velocity and for the controls
;the basic value; useful values from zero to 127
;------------------------------------------------
ValoreEventoBase.b=64

;-----------------------------------------------------------------------
;questa variabile indica la posizione della voce Quit del menu' Project
;this variable marks the position of voice Quit in the Project menu
;-------------------------------------------------------------------
VoceMenuEsci.b=4

;-------------------------------------------------------------------------
;questa variabile indica la voce dell'AMIGA che non e' attiva; ogni "uno"
;corrisponde ad una voce di Amiga
;this variable states the Amiga voice that is not active; each "one" is
;related to an AMIGA voice
;--------------------------
VoceSpenta=%1111

;---------------------------------------------------------------------------
;questa variabile indica la posizione d'inizio per la visualizzazione delle
;tracce
;this variables states the start position for the tracks displacement
;---------------------------------------------------------------------
XTracceVisibili.l=0

;------------------------------------------------------------
;questa variabile memorizza la prima traccia da visualizzare
;this variable stores the first track to be displayed
;-----------------------------------------------------
YTracceVisibili.w=0


;---------------------------------------------------------------------------
;queste cinque variabili indicizzate conterranno i nomi degli ultimi 5 file
;MIDI caricati
;this five indexed variables will keep the names of the last 5 loaded MIDI
;files
;------
Dim FileMIDIAperto$(4)

;custom waveform storage array
Dim FORMADONDA.w(8191)

;-----------------------------------------------------------------------------
;questa struttura di variabili e' una tabella di riferimento per il periodo e
;la frequenza associati ad ognuna delle 128 note possibili
;this variables structure is a refferring table for the periode and frequency
;paired to every one of the 128 given notes
;-------------------------------------------
NEWTYPE .PeriFreq

;--------
;periode
;--------
 Periodo.l

;----------
;frequency
;----------
 Frequenza.w

End NEWTYPE
Dim PeriFreq.PeriFreq(127)

;--------------------------------------------------------------------------
;la seguente struttura di variabili serve per identificare il tipo di note
;the following variables structure is used to states the notes kind
;-------------------------------------------------------------------
NEWTYPE .TipoDiNota

;note italian name
 NomeItaliano$

;note english name
 NomeInglese$

;diesis flag
 Diesis.b

;note octave
 Ottava.b
End NEWTYPE
Dim TipoDiNota.TipoDiNota(127)

;----------------------------------------------------------------------------
;la seguente struttura di variabili e' per la gestione dei suoni per l'AMIGA
;the following variables structure is for AMIGA sounds management
;-----------------------------------------------------------------
NEWTYPE .Suono

;---------------------------------------------------
;questa variabile indica il nome del suono caricato
;this variable states the name of the loaded sound
;--------------------------------------------------
 Nome$

;----------------------------------------------------------------------------
;questa variabile indica il canale associato al suono caricato; valore utile
;da 1 a 16, o zero se nessun canale e' associato al suono
;this variable states the channel linked to the loaded sound;useful value
;from 1 to 16, or zero if no channel is assigned to the sound
;--------------------------------------------------------------
 Canale.b

End NEWTYPE
Dim Suono.Suono(31)

NEWTYPE .Sequenza

;--------------------------------------------------
;questa variabile memorizza il nome della sequenza
;this variable stores the sequence name
;---------------------------------------
Nome$

;--------------------------------------------------------------
;questa variabile memorizza il colore del testo della sequenza
;this variable stores the sequence text colour
;----------------------------------------------
ColoreTesto.b

;--------------------------------------------------------------------
;questa variabile memorizza il colore di sfondo testo della sequenza
;this variable stores the sequence background colour
;----------------------------------------------------
ColoreSfondo.b

;-----------------------------------------------------------
;questa variabile indica la durata temporale della sequenza
;this variable states the sequence time duration
;------------------------------------------------
Durata.l

;------------------------------------------------------------------
;questa variabile indica gli eventi musicali totali della sequenza
;this variable states the sequence's total musical events
;---------------------------------------------------------
EventiMusicali.l

;-----------------------------------------------------------------------
;questa variabile indica gli eventi musicali selezionati della sequenza
;this variable states the sequence's selected musical events
;------------------------------------------------------------
EventiMusicaliSelezionati.l

End NEWTYPE
Dim List Sequenza.Sequenza(#MassimoSequenze-1)

NEWTYPE .SequenzaNellaTraccia

;----------------------------------------------------
;questa variabile memorizza il numero della sequenza
;this variable stores the sequence number
;-----------------------------------------
Sequenza.l

;----------------------------------------------------------
;questa variabile indica l'inizio temporale della sequenza
;this variable states the sequence time start
;---------------------------------------------
Inizio.l

;------------------------------------------------------------------
;questa variabile indica la traccia di appartenenza della sequenza
;this variable states the the track of the sequence
;---------------------------------------------------
Traccia.w

;------------------------------------------------------------
;questa variabile indica se la sequenza e' genitore o figlia
;this variable states if the sequence is parent or daughter
;-----------------------------------------------------------
Genitore.l

End NEWTYPE
Dim List SequenzaNellaTraccia.SequenzaNellaTraccia(#MassimoSequenze-1)

;existing sequence
Dim SequenzaEsistente.b(#MassimoSequenze-1)

;------------------------------------------------------------------------
;queste variabili indicizzate indicano True (Vero) se la traccia esiste,
;altrimenti indicano False (Falso)
;these indexed variables (arrays) state True if track exist, otherwise state
;False
;-------
Dim Traccia.b(#MassimoTracce-1)

;----------------------------------------------------------------------------
;la seguente struttura di variabili e' per la gestione degli eventi musicali
;the following vars structure is for the musical events management
;------------------------------------------------------------------
NEWTYPE .EventoMusicale

;----------------------------------------------------------------------------
;questa variabile stringa indica il tipo di evento musicale, che puo' essere
;una nota od un parametro MIDI
;This string variable states the musical event kind, that can be a note or a
;MIDI parameter
;----------------
 Tipo$

;-----------------------------------------------------------------------
;se l'evento musicale e' una nota, questa variabile ne indica l'altezza;
;valore utile da zero a 127
;if the event is a note, this variable states its height;useful value from
;zero to 127
;------------
 Evento.b

;--------------------------------------------------------------------------
;se l'evento musicale e'una nota, questa variabile ne indica l'intensita',
;cioe' il suo volume;se invece l'evento e' un controllo ne indica il valore
;if the musical event is a note, this variable states its intensity, that is
;its volume;if instead it is a control it states its value
;------------------------------------------------------------
 Valore.b

;----------------------------------------------------------------------------
;questa variabile indica la posizione dell'evento musicale nel tempo in tic;
;valore utile da zero a 2 miliardi e rotti
;this variable states musical event position in time by ticks;useful value
;from zero to over 2 billions
;-----------------------------
 Inizio.l

;------------------------------------------------------------------------------
;se l'evento musicale e' una nota, questa variabile ne indica in tic la durata
;nel tempo;valore utile da 0 a 2 miliardi e rotti (192 tic=nota di un quarto)
;if the event is a note, this variable states its duration in time by ticks;
;useful value from zero to over 2 billions (192 ticks=a quarter note)
;---------------------------------------------------------------------
 Durata.l

;------------------------------------------------------------------------------
;questa varibile indica il canale dell'evento musicale;valore utile da 1 a 16
;this variable states musical event's channel;useful value from 1 to 16
;------------------------------------------------------------------------
 Canale.b

;-----------------------------------------------------------------------------
;questa variabile identifica la sequenza di appartenenza dell'evento musicale
;valore utile da 1 a 32768
;this variable states the sequence witch the musical event belong to: useful
;value from 1 to 32768
;-----------------------
 Sequenza.l

;----------------------------------------------------------------------------
;questa variabile indica se l'evento musicale e' stato selezionato, tagliato
;copiato, eseguito o terminato, piu' precisamente:
;0=evento non selezionato
;1=evento selezionato
;+2=evento tagliato
;+4=evento copiato
;+8=evento eseguito
;+16=evento terminato
;this variable states if the musical event has been selected, cutted, copied
;executed or terminated, more precisely:
;0=unselected event
;1=selected event
;+2=cutted event
;+4=copied event
;+8=executed event
;+16=ended event
;-----------------
 Stato.b

End NEWTYPE

DEFTYPE .EventoMusicale NotaSuonata

;--------------------------------------------------------------------
;questa struttura serve per la gestione di aree cliccabili col mouse
;this structure is used for the areas handle selectable by mouse
;----------------------------------------------------------------
NEWTYPE .Bottone
 Numero.b
 X0.w
 Y0.w
 X1.w
 Y1.w
 Testo$
End NEWTYPE

Dim List Bottoni.Bottone(21)

;-----------------------------------------------------
;imposta il numero massimo di eventi musicali usabili
;sets the maximun musical events handling
;-----------------------------------------
MassimoEventiMusicali.l=32768

;---------------------------------------------------------------------------
;crea le variabili array lista con la struttura del NEWTYPE .EventoMusicale
;creates the list array variables with the NEWTYPE .EventoMusicale structure
;----------------------------------------------------------------------------
Dim List EventoMusicale.EventoMusicale(MassimoEventiMusicali-1)


;---------------------------------------------------------------
;questa procedura limita un numero dato tra due numeri limite
;this procedure limits a given number between two bound numbers
;---------------------------------------------------------------
Function.l LimitiInteri{NumeroDato.l,LimiteMinimo.l,LimiteMassimo.l}
;-> Limiti by Stefano Maria Regattin
;d> 25 marzo 2005 from SamplesMaster.AMOS
;-----------------------------------------
 If LimiteMinimo>LimiteMassimo Then Exchange LimiteMinimo,LimiteMassimo
 If NumeroDato<LimiteMinimo Then NumeroDato=LimiteMinimo
 If NumeroDato>LimiteMassimo Then NumeroDato=LimiteMassimo
Function Return NumeroDato
End Function

;-----------------------------------------------------------------
;questa procedura ricava l'esponente in base 2 della battuta data
;this procedure returns the base two exponent of the given bar
;--------------------------------------------------------------
Function .b EsponenteDiDue{Misura.w}
 Misura=LimitiInteri{Misura,1,128}
 Repeat
  If Misura>1
   Misura/2:Esponente+1
   If Misura>1 AND Misura MOD 2>0 Then Misura+1
  EndIf
 Until Misura=1
Function Return Esponente
End Function

;-------------------------------------------
;questa procedura inverte e centra un testo
;this procedure inverts and centers a text
;------------------------------------------
Statement TestoInvertitoECentrato{Testo$,Linea.b}
SHARED LarghezzaInternaFinestraEditoreSuono
;-> Testo invertito e centrato by Stefano Maria Regattin
;i> 23 maggio 1996
;m> 25 maggio 1996
;d> 4 marzo 2005 da SamplesMaster.AMOS
;----------------------------------------------------------------------------
;Linea contiene il numero di linea dove si posizionera' il testo;se vale -1
;(True) il testo sara' posizionato alla linea dove si trova il cursore;in
;questo caso sara' necessario un comando NPrint per spostare il cursore
;Linea retains the number of the line where the text will be positioned;if
;its value is -1 the text will be positioned where is the cursor;so it
;will be needed a NPrint command to move the cursor
;----------------------------------------------------
 WJam #DueColoriPieni

 If Linea=True Then Linea=WCursY/#GrandezzaFonteTopaz
 LineaNellaFinestra.w=Linea*#GrandezzaFonteTopaz
 WBox 0,LineaNellaFinestra,LarghezzaInternaFinestraEditoreSuono-1,LineaNellaFinestra+1,1
 WBox 0,LineaNellaFinestra+2,LarghezzaInternaFinestraEditoreSuono-1,LineaNellaFinestra+3,2
 WBox 0,LineaNellaFinestra+4,LarghezzaInternaFinestraEditoreSuono-1,LineaNellaFinestra+5,3
 WBox 0,LineaNellaFinestra+6,LarghezzaInternaFinestraEditoreSuono-1,LineaNellaFinestra+7,0

;------------------------------------------------------------------------
;il testo e' limitato a 79 caratteri e non 80 perche' i bordi sinistro e
;destro della finestra prendono lo spazio di un carattere
;the text is limited to 79 chars instead of 80 chars because the window
;left and right borders take the space of one char
;---------------------------------------------------
 Testo$=Centre$(Testo$,79)

 WJam #UnColoreSenzaSfondo
 WColour #ColAcquamarina
 WLocate 0,LineaNellaFinestra
 Print Testo$
End Statement

;---------------------------------------------------------------------------
;questa procedura carica l'immagine delle note per la procedura dell'evento
;base
;this procedure loads the note images for the basic event procedure
;-------------------------------------------------------------------
Statement CaricaLImmagineDelleNote{}
SHARED ErroreDiCaricamentoImmagineNote
 ErroreDiCaricamentoImmagineNote=True
 LoadShape #ImmagineNote,"NotesImage"
 ErroreDiCaricamentoImmagineNote=False
End Statement

;---------------------------------
;questa procedura crea un bottone
;this procedure creates a button
;--------------------------------
Statement DisegnaBottone{TestoBottone$,XPosBottone,YPosBottone,ColoreBottone.b}
 WJam #DueColoriPieni

 WLocate XPosBottone,YPosBottone
 XLunBottone.w=Len(TestoBottone$)*#GrandezzaFonteTopaz
 If ColoreBottone=#ColSfondo
  WColour #ColAcquamarina+#Scuro,2:Print TestoBottone$
  Wline XPosBottone,YPosBottone+8-2,XPosBottone,YPosBottone,1
  Wline XPosBottone,YPosBottone,XPosBottone+XLunBottone-2,YPosBottone,1
  Wline XPosBottone+XLunBottone-1,YPosBottone,XPosBottone+XLunBottone-1,YPosBottone+8-1,3
  Wline XPosBottone+XLunBottone-1,YPosBottone+8-1,XPosBottone,YPosBottone+8-1,3
  WColour #ColAcquamarina+#Scuro
 Else
  WColour ColoreBottone,ColoreBottone+#Scuro:Print TestoBottone$
  Wline XPosBottone,YPosBottone,XPosBottone+XLunBottone-1,YPosBottone,ColoreBottone
  Wline XPosBottone+XLunBottone-1,YPosBottone,XPosBottone+XLunBottone-1,YPosBottone+8-1,ColoreBottone
  Wline XPosBottone+XLunBottone-1,YPosBottone+8-1,XPosBottone,YPosBottone+8-1,ColoreBottone
  Wline XPosBottone,YPosBottone+8-1,XPosBottone,YPosBottone,ColoreBottone
  WColour ColoreBottone
 EndIf
End Statement

;------------------------------------------------------
;questa procedura mostra il tempo in battiti su misure
;this procedure shows the tempo by beats per measures
;-----------------------------------------------------
Statement MostraIlTempo{Tempo.b,CanaleEvento.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AltezzaInternaFinestraPrincipale
SHARED LarghezzaBottoniEditoreSequenza
SHARED Spazio$
SHARED XPosSfondoTempo
SHARED YPosSfondoTempo
 WJam #DueColoriPieni

 Tempo$="Tempo="+UStr$(Tempo MOD 16+1)+"/"+UStr$(2^(Tempo/16))
 Tempo$+String$(Spazio$,Len("Tempo=00/000")-Len(Tempo$))
 If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
  XMessaggio.w=(80-Len("Tempo=00/000"))*#GrandezzaFonteTopaz
  YMessaggio.w=AltezzaInternaFinestraPrincipale-8-8
  DisegnaBottone{Tempo$,XMessaggio,YMessaggio,#ColAcquamarina}
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  XMessaggio=LarghezzaBottoniEditoreSequenza
  YMessaggio=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleEvento+4) MOD 16,(CanaleEvento+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print (80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Tempo$
 EndIf
End Statement

;-----------------------------------------------------------------------------
;questa procedura mostra la velocita' di esecuzione delle note in battute per
;minuto
;shows the execution velocity in bars per minute
;------------------------------------------------
Statement MostraLeBattutePerMinuto{BattutePerMinuto.w,CanaleEvento.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AltezzaInternaFinestraPrincipale
SHARED LarghezzaBottoniEditoreSequenza
SHARED TicPerCinquantesimoDiSecondo
SHARED Spazio$
SHARED XPosSfondoBattutePerMinuto
SHARED YPosSfondoBattutePerMinuto

 Format "000":BattutePerMinuto$="BPM="+Str$(BattutePerMinuto)
 If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
  WBlit 8,XPosSfondoBattutePerMinuto,YPosSfondoBattutePerMinuto
  XMessaggio.w=0
  YMessaggio.w=AltezzaInternaFinestraPrincipale-8-8
  DisegnaBottone{BattutePerMinuto$,XMessaggio,YMessaggio,#ColAcquamarina}

  WJam #UnColoreSenzaSfondo
  WColour #ColAcquamarina+#Scuro
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  XMessaggio=LarghezzaBottoniEditoreSequenza
  YMessaggio=AltezzaInternaFinestraEditoreSequenza-8

  WJam #DueColoriPieni
  WColour (CanaleEvento+4) MOD 16,(CanaleEvento+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Format "000":Print BattutePerMinuto$
 EndIf
 TicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto)/3000
 Format "000.0":Print "TicksIn50thSec=",TicPerCinquantesimoDiSecondo:Format ""
End Statement

;----------------------------------------------------------------------------
;questa procedura crea una tabella di riconoscimento delle note, memorizzata
;nell'array TipoDiNota()
;this procedure creates a referring note recognition table, stored in the
;TipoDiNota() (that means Note Kind) array
;-------------------------------------------
Statement ImpostaIlTipoDiNota{Nota.b}
SHARED TipoDiNota()

;--------------------------------------------
;questa variabile indica l'ottava della nota
;this variable state the note octave
;------------------------------------
 OttavaDellaNota.b=Nota/12

 TipoDiNota(Nota)\Ottava=OttavaDellaNota

;-----------------------------------------------------------------------
;questa variabile indica a quali delle 12 note dodici note fondamentali
;corrisponde la nota corrente
;this variable marks which of 12 fundamental notes corresponds the current
;note
;------
 NotaNellOttava.b=Nota MOD 12

 Select NotaNellOttava

;------------------
;la nota e' un Do?
;is the given note a C?
;-----------------------
 Case 0
  TipoDiNota(Nota)\NomeItaliano="Do"
  TipoDiNota(Nota)\NomeInglese="C"
  TipoDiNota(Nota)\Diesis=False

;-------------------------------
;la nota e' un Do diesis (Do#)?
;is the given note a C diesis (C#)?
;-----------------------------------
 Case 1
  TipoDiNota(Nota)\NomeItaliano="Do#"
  TipoDiNota(Nota)\NomeInglese="C#"
  TipoDiNota(Nota)\Diesis=True

;------------------
;la nota e' un Re?
;is the given note a D?
;-----------------------
 Case 2
  TipoDiNota(Nota)\NomeItaliano="Re"
  TipoDiNota(Nota)\NomeInglese="D"
  TipoDiNota(Nota)\Diesis=False

;-------------------------------
;la nota e' un Re diesis (Re#)?
;is the given note a D diesis (D#)?
;-----------------------------------
 Case 3
  TipoDiNota(Nota)\NomeItaliano="Re#"
  TipoDiNota(Nota)\NomeInglese="D#"
  TipoDiNota(Nota)\Diesis=True

;------------------
;la nota e' un Mi?
;is the given note a E?
;-----------------------
 Case 4
  TipoDiNota(Nota)\NomeItaliano="Mi"
  TipoDiNota(Nota)\NomeInglese="E"
  TipoDiNota(Nota)\Diesis=False

;------------------
;la nota e' un Fa?
;is the given note a F?
;-----------------------
 Case 5
  TipoDiNota(Nota)\NomeItaliano="Fa"
  TipoDiNota(Nota)\NomeInglese="F"
  TipoDiNota(Nota)\Diesis=False

;-------------------------------
;la nota e' un Fa diesis (Fa#)?
;is the given note a F diesis (F#)?
;-----------------------------------
 Case 6
  TipoDiNota(Nota)\NomeItaliano="Fa#"
  TipoDiNota(Nota)\NomeInglese="F#"
  TipoDiNota(Nota)\Diesis=True

;-------------------
;la nota e' un Sol?
;is the given note a G?
;-----------------------
 Case 7
  TipoDiNota(Nota)\NomeItaliano="Sol"
  TipoDiNota(Nota)\NomeInglese="G"
  TipoDiNota(Nota)\Diesis=False

;---------------------------------
;la nota e' un Sol diesis (Sol#)?
;is the given note a G diesis (G#)?
;-----------------------------------
 Case 8
  TipoDiNota(Nota)\NomeItaliano="Sol#"
  TipoDiNota(Nota)\NomeInglese="G#"
  TipoDiNota(Nota)\Diesis=True

;------------------
;la nota e' un La?
;is the given note an A?
;------------------------
 Case 9
  TipoDiNota(Nota)\NomeItaliano="La"
  TipoDiNota(Nota)\NomeInglese="A"
  TipoDiNota(Nota)\Diesis=False

;-------------------------------
;la nota e' un La diesis (La#)?
;is the given note an A diesis (A#)?
;------------------------------------
 Case 10
  TipoDiNota(Nota)\NomeItaliano="La#"
  TipoDiNota(Nota)\NomeInglese="A#"
  TipoDiNota(Nota)\Diesis=True

;------------------
;la nota e' un Si?
;is the given note a B?
;-----------------------
 Case 11
  TipoDiNota(Nota)\NomeItaliano="Si"
  TipoDiNota(Nota)\NomeInglese="B"
  TipoDiNota(Nota)\Diesis=False

 End Select
End Statement

;--------------------------------------------------------------------------
;questa procedura crea una tabella di riconoscimento della frequenza e del
;periodo delle note, memorizzata nell'array PeriFreq()
;this procedure creates a referring note frequency and period recognition
;table, stored in the PeriFreq() array
;---------------------------------------
Statement CalcolaLaFrequenzaEdIlPeriodoDelleNote{}
SHARED PeriFreq()
SHARED DistanzaSemitono

;-------------------------------------------------------------------------
;per ottenere la frequenza di tutte le 128 note, si parte dal La della 4a
;ottava (la prima e' l'ottava zero), la cui frequenza e' nota e la si
;moltiplica o divide per la distanza minima tra due note che e' il semitono;
;per ottenere il periodo si divide una delle costanti di temporizzazione, a
;seconda che il proprio AMIGA usi uno schermo PAL o NTSC, per la frequenza
;della nota;queste costanti sono riportate sul MANUALE DI RIFERIMENTO PER
;L'HARDWARE AMIGA
;to obtain all 128 notes it starts from the A from the 4rd octave (the 1st is
;the zero octave) that has a known frequency, and it multiply or divide this
;for the minimum distance between two notes that is the semitone;to obtain
;the period it divides one of the timing constants, depending on your AMIGA
;uses a PAL or NTSC screen, for the note frequency;these constants are
;reported on the AMIGA HARDWARE REFERENCE MANUAL
;-------------------------------------------------
 Frequenza=440
 PeriFreq(45)\Frequenza=Frequenza

 If NTSC=True
  PeriFreq(45)\Periodo=#TemporizzazioneNTSC/PeriFreq(45)\Frequenza
 Else
  PeriFreq(45)\Periodo=#TemporizzazionePAL/PeriFreq(45)\Frequenza
 EndIf
 ImpostaIlTipoDiNota{45}

 For Nota.w=46 To 127
  Frequenza*DistanzaSemitono:PeriFreq(Nota)\Frequenza=Frequenza
  If NTSC=True
   PeriFreq(Nota)\Periodo=#TemporizzazioneNTSC/PeriFreq(Nota)\Frequenza
  Else
   PeriFreq(Nota)\Periodo=#TemporizzazionePAL/PeriFreq(Nota)\Frequenza
  EndIf
  ImpostaIlTipoDiNota{Nota}
 Next Nota

 Frequenza=PeriFreq(45)\Frequenza
 For Nota=44 To 0 Step -1
  Frequenza/DistanzaSemitono:PeriFreq(Nota)\Frequenza=Frequenza
  If NTSC=True
   PeriFreq(Nota)\Periodo=#TemporizzazioneNTSC/PeriFreq(Nota)\Frequenza
  Else
   PeriFreq(Nota)\Periodo=#TemporizzazionePAL/PeriFreq(Nota)\Frequenza
  EndIf
  ImpostaIlTipoDiNota{Nota}
 Next Nota
End Statement

;------------------------------------------------------------------------------
;la seguente procedura converte un valore temporale da tic in battute, battiti
;e tic;la variabile Origine serve per la differente visualizzazione della
;durata delle note che, se vera, parte da zero
;the following procedure converts a time value from ticks into bars, beats and
;ticks;the Origine variable is used for the different note length displacement
;that, if this is true, starts from zero instead of starting from one
;---------------------------------------------------------------------
Statement ConvertiIlTempoInBattute{Tempo.l,Origine.b}
SHARED Battiti
SHARED Misure
 Battuta.l=Abs(Tempo/(#TicDiBasePerQuarto*Misure))
 Battito.b=Abs((Tempo/(#TicDiBasePerQuarto*Battiti/Misure)) MOD Battiti)
 Battuta+Origine:Battito+Origine
 Print Segno$,Battuta,".",Battito
 Tic.w=Tempo MOD #TicDiBasePerQuarto*Battiti/Misure
 If Tic>0 Print ".",Tic
End Statement

;------------------------------------------------
;questa procedura mostra le barre di scorrimento
;this procedure shows the sliders
;---------------------------------
Statement ImpostaBarra{Barra.l,XPos.w,YPos.w,Orientamento$,Parametri.l,ListaBottoni.l}
SHARED XLunBarra
SHARED YLunBarra
 Orientamento$=UCase$(Orientamento$)
 If Orientamento$="HORIZONTAL" Then Parametri+#MovimentoOrizzontale
 If Orientamento$="VERTICAL" Then Parametri+#MovimentoVerticale
 PropGadget ListaBottoni,XPos,YPos,Parametri,Barra,XLunBarra,YLunBarra
End Statement

;--------------------------------------------------
;questa procedura gestisce le barre di scorrimento
;this procedure manages the sliders
;-----------------------------------
Function .l ValoreBarra{Barra.l,ValoreMassimo.l,LunghezzaBarra.w,Orientamento$,ListaBottoni.l}
 Orientamento$=UCase$(Orientamento$)
 If Orientamento$="HORIZONTAL"
  ValoreDellaBarra.q=HPropPot(ListaBottoni,Barra)
  ValoreDelTopo.w=EMouseX*ValoreMassimo/LunghezzaBarra
 EndIf
 If Orientamento$="VERTICAL"
  ValoreDellaBarra=VPropPot(ListaBottoni,Barra)
  ValoreDelTopo=EMouseY*ValoreMassimo/LunghezzaBarra
 EndIf
 ValoreIndicatoDallaBarra.f=ValoreDellaBarra*ValoreMassimo
 If Frac(ValoreIndicatoDallaBarra)>0.45 Then ValoreIndicatoDallaBarra+1 Else ValoreIndicatoDallaBarra-1
 ValoreIndicato.l=Int(ValoreIndicatoDallaBarra)
 If ValoreDelTopo>ValoreIndicato Then ValoreIndicato+1
 If ValoreDelTopo<ValoreIndicato Then ValoreIndicato-1
 ValoreIndicato=LimitiInteri{ValoreIndicato,0,ValoreMassimo}
Function Return ValoreIndicato
End Function

;------------------------------------------------
;questa procedura mostra le barre di scorrimento
;this procedure shows the sliders
;---------------------------------
Statement MostraBarra{Barra.l,ValoreDato.l,ValoreMassimo.l,Orientamento$,ListaBottoni.l,FinestraBarra.l}
 Orientamento$=UCase$(Orientamento$)
 If Orientamento$="HORIZONTAL"
  SetHProp ListaBottoni,Barra,ValoreDato/(ValoreMassimo*1.0),1/(ValoreMassimo*1.0)
 EndIf
 If Orientamento$="VERTICAL"
  SetVProp ListaBottoni,Barra,ValoreDato/(ValoreMassimo*1.0),1/(ValoreMassimo*1.0)
 EndIf
 Redraw FinestraBarra,Barra
End Statement

;---------------------------------------------------------------------------
;questa procedura cancella il file storico degli ultimi 5 MIDI file  aperti
;this procedure clears the last 5 loaded MIDI files history file
;----------------------------------------------------------------
Statement CancellaLaStoriaDeiFileMIDIAperti{}
SHARED FileMIDIAperto$()
SHARED NomeDellaStoriaDeiFileMIDIAperti$
SHARED StoriaDeiFileMIDIAperti
SHARED VoceMenuEsci
 If Exists(NomeDellaStoriaDeiFileMIDIAperti$)>0
  KillFile NomeDellaStoriaDeiFileMIDIAperti$
  For FileMIDIAperto.b=0 To 4
   FileMIDIAperto$(FileMIDIAperto)=""
  Next FileMIDIAperto
  StoriaDeiFileMIDIAperti=False
  VoceMenuEsci=4
 EndIf
End Statement

;------------------------------------------------------------------------
;questa procedura carica il file storico degli ultimi 5 file MIDI aperti
;this procedure loads the last 5 loaded MIDI files history file
;---------------------------------------------------------------
Statement CaricaLaStoriaDeiFileMIDIAperti{}
SHARED FileMIDIAperto$()
SHARED NomeDellaStoriaDeiFileMIDIAperti$
SHARED StoriaDeiFileMIDIAperti
SHARED VoceMenuEsci
 If Exists(NomeDellaStoriaDeiFileMIDIAperti$)>0
  StoriaDeiFileMIDIAperti=ReadFile(#StoriaDeiFileMIDI,NomeDellaStoriaDeiFileMIDIAperti$)
  If StoriaDeiFileMIDIAperti=True
   If Lof(#StoriaDeiFileMIDI)>0
    For FileMIDIAperto.b=0 To 4
     FileMIDIAperto$(FileMIDIAperto)=""
    Next FileMIDIAperto
    FileInput #StoriaDeiFileMIDI
    FileMIDIAperto=0
    VoceMenuEsci=4
    Repeat
     Dato$=Inkey$
     If Dato$=Chr$(10)
      FileMIDIAperto+1
      VoceMenuEsci+1
     Else
      FileMIDIAperto$(FileMIDIAperto)+Dato$
     EndIf
    Until Dato$=""
    PopInput
   EndIf
   CloseFile #StoriaDeiFileMIDI
  EndIf
 EndIf
End Statement

;------------------------------------
;questa procedura imposta lo schermo
;this procedure sets the screen
;-------------------------------
Statement ImpostaLoSchermo{}
SHARED ALTEZZA
SHARED AltezzaSchermo
SHARED LarghezzaSchermo
SHARED RIDUZIONE
SHARED TitoloSchermo$
SHARED TracceVisibili
SHARED YBARRAINGRANDIM
SHARED ZERO

 ColTesto.b=#ColAcquamarina+#Scuro
 ScreenPens ColTesto,#ColGrigioChiaro,#ColGrigioScuro,#ColGrigioMedio,#ColAcquamarina,#ColSfondo,#ColAcquamarina

;------------------------------------------------
;apre lo schermo in alta risoluzione a 16 colori
;opens high resolution screen with 16 colours
;---------------------------------------------
 Screen #Schermo,#AltaRisoluzione+#SediciColori,TitoloSchermo$

;-------------------------------------------------------------------------------
;questa variabile contiene l'indirizzo di memoria della struttura dello schermo
;this variable retains the screen structure memory address
;----------------------------------------------------------
 IndirizzoSchermo.l=Peek.l(Addr Screen(#Schermo))

;----------------------------------------------------------
;questa variabile contiene la vera larghezza dello schermo
;this variable retains the true screen width
;--------------------------------------------
 LarghezzaSchermo=Peek.w(IndirizzoSchermo+12)

;--------------------------------------------------------
;questa variabile contiene la vera altezza dello schermo
;this variable retains the true screen height
;---------------------------------------------
 AltezzaSchermo=Peek.w(IndirizzoSchermo+14)

 If NTSC=True Then RIDUZIONE=4 Else RIDUZIONE=2
 ALTEZZA=256/RIDUZIONE
 YBARRAINGRANDIM.w=64+8+ALTEZZA
 ZERO=127

;-------------------------------------------------------------
;questa variabile indica il massimo numero di tracce visibili
;this variable states the visible tracks maximum number
;-------------------------------------------------------
 TracceVisibili=(AltezzaSchermo-8-#AltezzaBarreTitoli-8-8)/8

End Statement

;creates the backdrop image graphics area
Statement CreaLAreaGraficaConLImmagineDiSfondo{}
SHARED AltezzaSchermo
SHARED ErroreDiCaricamentoDellImmagineDiSfondo
SHARED ImmagineDiSfondo$
SHARED LarghezzaSchermo
 If NTSC=True
  ImmagineDiSfondo$="NTSC.Backdrop"
 Else
  ImmagineDiSfondo$="PAL.Backdrop"
 EndIf
 AltezzaImmagine.w=AltezzaSchermo-#AltezzaBarreTitoli-8

;---------------------------------------------
;crea l'area grafica per l'immagine di sfondo
;ceates the graphics area for the backdrop image
;------------------------------------------------
 BitMap #AreaGraficaImmagineDiSfondo,LarghezzaSchermo,AltezzaImmagine,#SediciColori

 ErroreDiCaricamentoDellImmagineDiSfondo=True

;---------------------------------------------
;carica nell'area grafica l'immagine di sfondo
;loads into the graphics area the backdrop image
;------------------------------------------------
 LoadBitMap #AreaGraficaImmagineDiSfondo,ImmagineDiSfondo$,#TavolozzaDeiColori

 ErroreDiCaricamentoDellImmagineDiSfondo=False

;---------------------------------------------------
;usa la tavolozza dei colori dell'immagine caricata
;uses the loaded image colours palette
;--------------------------------------
 Use Palette #TavolozzaDeiColori

End Statement

;---------------------------------------------------------------------------
;questa procedura memorizza la porzione di sfondo sotto l'indicazione delle
;battute per minuto nella finestra principale
;this procedure stores the background portion under the main window bars per
;minute displacement
;--------------------
;Statement CopiaLoSfondoSottoAlleBattutePerMinuto{}
;SHARED AltezzaInternaFinestraPrincipale
;SHARED XPosSfondoBattutePerMinuto
;SHARED YPosSfondoBattutePerMinuto
;XPosSfondoBattutePerMinuto=0
;YPosSfondoBattutePerMinuto=AltezzaInternaFinestraPrincipale-8-8
;XLunSfondoBattutePerMinuto.w=Len("BPM=000-ticks/50th=000.0")*#GrandezzaFonteTopaz
;YLunSfondoBattutePerMinuto.b=8
;GetaShape 8,XPosSfondoBattutePerMinuto,YPosSfondoBattutePerMinuto,XLunSfondoBattutePerMinuto,YLunSfondoBattutePerMinuto
;End Statement

;-------------------------------------------------------------------------
;questa procedura memorizza la porzione di sfondo sotto l'indicazione del
;tempo nella finestra principale
;this procedure stores the background portion under the main window tempo
;displacement
;--------------
;Statement CopiaLoSfondoSottoAlTempo{}
;SHARED AltezzaInternaFinestraPrincipale
;SHARED LarghezzaInternaFinestraPrincipale
;SHARED XPosSfondoTempo
;SHARED YPosSfondoTempo
;XPosSfondoTempo=LarghezzaInternaFinestraPrincipale-1-(Len("Tempo=00/000")*#GrandezzaFonteTopaz-1)
;YPosSfondoTempo=AltezzaInternaFinestraPrincipale-8-8
;XLunSfondoTempo.b=Len("Tempo=00/000")*#GrandezzaFonteTopaz
;YLunSfondoTempo.b=8
;GetaShape 9,XPosSfondoTempo,YPosSfondoTempo,XLunSfondoTempo,YLunSfondoTempo
;End Statement

;creates an outlined text
Statement TestoBordato{Testo$,XTesto.w,YTesto.w,ColoreTesto.b}
 WLocate XTesto,YTesto:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto+1,YTesto:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto+2,YTesto:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto+2,YTesto+1:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto+2,YTesto+2:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto+1,YTesto+2:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto,YTesto+2:WColour ColoreTesto+#Scuro:Print Testo$
 WLocate XTesto,YTesto+1:WColour ColoreTesto+#Scuro:Print Testo$

 WLocate XTesto+1,YTesto+1:WColour ColoreTesto:Print Testo$
End Statement

;custom requester window
Statement FinestraDiDialogo{TitoloPannello$,MessaggiPannello$,BottoniPannello$}
SHARED AltezzaSchermo
SHARED BottonePremuto
SHARED LarghezzaSchermo
SHARED TastoFuga$
SHARED TitoloSchermo$

 FinestraUsata.b=Used Window

 If MessaggiPannello$<>""
  Dim Messaggio$(19)
  For Carattere.w=1 To Len(MessaggiPannello$)
   Carattere$=Mid$(MessaggiPannello$,Carattere,1)
   If Carattere$="|"
    If XLunMessaggi.w<XLunMessaggio.w Then XLunMessaggi=XLunMessaggio
    If Messaggi.b<19 Then Messaggi+1:XLunMessaggio=0
   Else
    Messaggio$(Messaggi)+Carattere$:XLunMessaggio+#GrandezzaFonteTopaz
   EndIf
  Next Carattere
  If Messaggi=19
   Messaggio$(Messaggi)=Left$(Messaggio$(Messaggi),78)
   XLunMessaggio=Len(Messaggio$(Messaggi))*#GrandezzaFonteTopaz
   If XLunMessaggi<XLunMessaggio Then XLunMessaggi=XLunMessaggio
  Else
   Messaggi+1
  EndIf
 Else
  Messaggi=1:Messaggio$(0)="Click the|OK button":XLunMessaggio=Len(Messaggio$(0))*#GrandezzaFonteTopaz
  Bottoni$="OK"
 EndIf
 If XLunMessaggi<XLunMessaggio Then XLunMessaggi=XLunMessaggio

 Dim Bottoni.Bottone(9)
 For Carattere=1 To Len(BottoniPannello$)
  Carattere$=Mid$(BottoniPannello$,Carattere,1)
  Bottoni(Bottoni.b)\Testo+Carattere$
  If Carattere$="|" OR Carattere=Len(BottoniPannello$)
   Bottoni(Bottoni)\Testo=StripTrail$(Bottoni(Bottoni)\Testo,Asc("|"))
   XLunBottoni.w+2+Len(Bottoni(Bottoni)\Testo)*#GrandezzaFonteTopaz+2
   If Bottoni<9 Then Bottoni+1
  EndIf
 Next Carattere
 If Bottoni=9 Then Bottoni(Bottoni)\Testo=Left$(Bottoni(Bottoni)\Testo,76-(XLunBottoni-Bottoni*2)/#GrandezzaFonteTopaz)

 XLunMessaggi+2:XLunBottoni+Bottoni-1
 If XLunMessaggi<XLunBottoni Then XLunMessaggi=XLunBottoni

;--------------------------------------------
;calcola l'altezza della finestra di dialogo
;evaluates the dialog window height
;-----------------------------------
 YLunFinestra.w=2+#AltezzaBarreTitoli+#AltezzaTestoBordato*Messaggi+#AltezzaBottone+1+2

;----------------------------
;apre la finestra di dialogo
;opens the dialog window
;------------------------
 XLunFinestra.w=4+XLunMessaggi+1+4
 XPosFinestra.w=(LarghezzaSchermo-XLunFinestra)/2
 YPosFinestra.w=(AltezzaSchermo-YLunFinestra)/2
 TipoFinestra.l=#FinestraConMemoriaBordi+#FinestraAttivata

 Window #FinDiDialogo,XPosFinestra,YPosFinestra,XLunFinestra,YLunFinestra,TipoFinestra,TitoloPannello$,1,2
 WindowFont #FonteTopaz8

 For YPunto.w=0 To InnerHeight-1
  ColorePunto.b=YPunto MOD #AltezzaTestoBordato
  If ColorePunto<3 Then Wline 0,YPunto,InnerWidth-1,YPunto,#ColGrigioChiaro
  If ColorePunto>2 AND ColorePunto<7 Then Wline 0,YPunto,InnerWidth-1,YPunto,#ColGrigioMedio
  If ColorePunto>6 Then Wline 0,YPunto,InnerWidth-1,YPunto,#ColGrigioScuro
 Next YPunto

 WJam #UnColoreSenzaSfondo

;--------------------------
;mostra i messaggi bordati
;shows the outlined messages
;----------------------------
 For Messaggio.b=0 To Messaggi-1
  TestoBordato{Messaggio$(Messaggio),0,#AltezzaTestoBordato*Messaggio,#ColAcquamarina}
 Next Messaggio

;-----------------------------------------
;crea i bottoni della finestra di dialogo
;creates the dialog window buttons
;----------------------------------
 XSpazioTraIBottoni.w=(InnerWidth-XLunBottoni)/(Bottoni+1)
 X0.w=XSpazioTraIBottoni:Y1.w=InnerHeight-1:Y0.w=Y1-(#AltezzaBottone-1)
 If XSpazioTraIBottoni=0 Then XSpazioTraIBottoni=1
 For Bottone=1 To Bottoni
  TestoBottone$=Bottoni(Bottone-1)\Testo
  X1.w=X0+2+Len(TestoBottone$)*#GrandezzaFonteTopaz+2-1
  WBox X0,Y0,X1,Y1,2
  Wline X0,Y1-1,X0,Y0,X1-1,Y0,1
  Wline X1,Y0+1,X1,Y1,X0+1,Y1,3
  DisegnaBottone{TestoBottone$,X0+2,Y0+2,#ColRosso}
  If Bottone<Bottoni
   Bottoni(Bottone-1)\Numero=Bottone,X0,Y0,X1,Y1,TestoBottone$
  Else
   Bottoni(Bottone-1)\Numero=0,X0,Y0,X1,Y1,TestoBottone$
  EndIf
  X0=X1+XSpazioTraIBottoni
 Next Bottone

;----------------------------------------------------
;dimentica i tasti del topo e della tastiera premuti
;forgets the mouse and the keyboard pressed buttons
;---------------------------------------------------
 FlushEvents #HaiPremutoUnTastoDelTopo+#HaiPremutoUnTasto

 ZonaDelTopo.b=#NessunaZonaDelTopo

 Repeat
  EventoFinestraDiDialogo.l=WaitEvent
  Select EventoFinestraDiDialogo
  Case #HaiPremutoUnTastoDelTopo
   TastoPremutoDelTopo.b=MButtons:XDelTopo.w=WMouseX:YDelTopo.w=WMouseY
   If TastoPremutoDelTopo>#NessunTastoDelTopoPremuto Then FlushEvents #HaiPremutoUnTastoDelTopo
   If Bottoni>0
    For Bottone=1 To Bottoni
     If XDelTopo>=Bottoni(Bottone-1)\X0 AND XDelTopo<=Bottoni(Bottone-1)\X1
      If YDelTopo>=Bottoni(Bottone-1)\Y0 AND YDelTopo<=Bottoni(Bottone-1)\Y1
       DisegnaBottone{Bottoni(Bottone-1)\Testo,Bottoni(Bottone-1)\X0+2,Bottoni(Bottone-1)\Y0+2,#ColVerde}
       Delay_ 25
       ZonaDelTopo=Bottoni(Bottone-1)\Numero
      EndIf
     EndIf
    Next Bottone
   Else
    ZonaDelTopo=TastoPremutoDelTopo-1
   EndIf
  Case #HaiPremutoUnTasto
   TastoPremuto$=LCase$(Inkey$)
   If TastoPremuto$<>"" Then FlushEvents #HaiPremutoUnTasto
   Select TastoPremuto$
   Case TastoFuga$
    ZonaDelTopo=#No
   Case "n"
    ZonaDelTopo=#No
   Case "y"
    ZonaDelTopo=#Si
   Default
    ZonaDelTopo=Asc(TastoPremuto$)
   End Select
  End Select
 Until ZonaDelTopo>#NessunaZonaDelTopo
 BottonePremuto=ZonaDelTopo

;----------------------------------------------------
;dimentica i tasti del topo e della tastiera premuti
;forgets the mouse and the keyboard pressed buttons
;---------------------------------------------------
 FlushEvents #HaiPremutoUnTastoDelTopo+#HaiPremutoUnTasto

 CloseWindow #FinDiDialogo
 Use Window FinestraUsata
End Statement

;custom requester recognition
Statement RichiestaPannello{TitoloPannello$,TestoPannello$,BottoniPannello$}
SHARED BottonePremuto
 If TitoloPannello$="TITOLO" Then TitoloPannello$="AmySequencer message"
 If TitoloPannello$="AIUTO" Then TitoloPannello$="AmySequencer help"
 If Lisa>0
  BottonePremuto=Request(TitoloPannello$,TestoPannello$,BottoniPannello$)
 Else
  FinestraDiDialogo{TitoloPannello$,TestoPannello$,BottoniPannello$}
 EndIf
End Statement

;-----------------------------------------------------------------------
;questa procedura mostra la finestra di aiuto della finestra principale
;this procedure shows the main window help requester
;----------------------------------------------------
Statement MostraITastiDaUsareNellaFinestraPrincipale{}
 MostraITastiDaUsareNellaFinestraPrincipale$="Left mouse button:|"
 MostraITastiDaUsareNellaFinestraPrincipale$+" add a new sequence or select existing|"
 MostraITastiDaUsareNellaFinestraPrincipale$+"Backspace key:|"
 MostraITastiDaUsareNellaFinestraPrincipale$+" delete the selected sequence|"
 MostraITastiDaUsareNellaFinestraPrincipale$+"Esc key:|"
 MostraITastiDaUsareNellaFinestraPrincipale$+" leave the sequencer|"
 MostraITastiDaUsareNellaFinestraPrincipale$+"Cursor keys:|"
 MostraITastiDaUsareNellaFinestraPrincipale$+" scroll tracks"
 RichiestaPannello{"AIUTO",MostraITastiDaUsareNellaFinestraPrincipale$,"OK"}
End Statement

;-----------------------------------------------------------
;questa procedura imposta la finestra principale invisibile
;this procedure sets the main invisible window
;----------------------------------------------
Statement ImpostaLaFinestraPrincipale{}
SHARED AltezzaInternaFinestraPrincipale
SHARED AltezzaSchermo
SHARED BattutePerMinuto
SHARED LarghezzaInternaFinestraPrincipale
SHARED LarghezzaSchermo
SHARED TitoloSchermo$
SHARED TracceVisibili
SHARED XLunBarra
SHARED YLunBarra

;-------------------------------------------------------------------
;apre la finestra principale per ricavarne la larghezza e l'altezza
;opens main window to obtain its width and height
;-------------------------------------------------
 XPosFin.b=0:YPosFin.b=#AltezzaBarreTitoli:XLunFin.w=LarghezzaSchermo:YLunFin.w=AltezzaSchermo-#AltezzaBarreTitoli
 TipoFin.l=#FinestraDiSfondo+#FinestraSenzaBordi+#FinestraAttivata
 Window #FinPrincipale,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,"",1,2
 WindowFont #FonteTopaz8

;-------------------------------------------------------------------------
;questa variabile conserva la larghezza interna della finestra principale
;this variable stores the inner witdh of the main window
;--------------------------------------------------------
 LarghezzaInternaFinestraPrincipale=InnerWidth

;----------------------------------------------------------------------
;questa variabile conserva l'altezza interna della finestra principale
;this variable stores the inner height of the main window
;---------------------------------------------------------
 AltezzaInternaFinestraPrincipale=InnerHeight

 CloseWindow #FinPrincipale

;----------------------------------------------------------------------
;imposta la barra di scorrimento che regola la velocita' di esecuzione
;sets the slider that tunes the execution velocity
;--------------------------------------------------
 XLunBarra=LarghezzaInternaFinestraPrincipale
 YLunBarra=8
 ImpostaBarra{1,0,AltezzaInternaFinestraPrincipale-8,"HORIZONTAL",0,#ListaBottoniPrincipale}

;-----------------------------------------------------------------------
;imposta la barra di scorrimento che serve per visualizzare le sequenze
;sets the slider that is used to show the sequences
;---------------------------------------------------
 XLunBarra=16
 YLunBarra=TracceVisibili*#GrandezzaFonteTopaz
 ImpostaBarra{2,0,8,"VERTICAL",0,#ListaBottoniPrincipale}

;-----------------------------------------------------------------------
;imposta la barra di scorrimento che serve per visualizzare le sequenze
;sets the slider that is used to show the sequences
;---------------------------------------------------
 XLunBarra=LarghezzaInternaFinestraPrincipale-16
 YLunBarra=AltezzaInternaFinestraPrincipale-8-TracceVisibili*#GrandezzaFonteTopaz-16
 ImpostaBarra{3,16,8+TracceVisibili*#GrandezzaFonteTopaz,"HORIZONTAL",0,#ListaBottoniPrincipale}

;------------------------------------------------------------------------------
;apre la finestra principale solo per il menu' come invisibile e ci attacca la
;lista dei gadget principale
;opens main window for menu usage only as invisible and it attaches the main
;gadget list
;------------
 Window #FinPrincipale,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,"",1,2,#ListaBottoniPrincipale
 WindowFont #FonteTopaz8

 FinestraPrincipaleAperta=True
End Statement

Function$ IsolaIlNomeDelFile{PercorsoFile$}
 Carattere.b=1
 Repeat
  Cassetto.b=Instr(PercorsoFile$,"/",Carattere)
  Dispositivo.b=Instr(PercorsoFile$,":",Carattere)
  If Cassetto>Dispositivo Then Carattere=Cassetto+1
  If Dispositivo>Cassetto Then Carattere=Dispositivo+1
 Until Cassetto=0 AND Dispositivo=0
 NomeFile$=Right$(PercorsoFile$,Carattere)
Function Return NomeFile$
End Function

;------------------------------------------------------------
;questa procedura imposta il menu' della finestra principale
;this procedure sets the main window menu
;-----------------------------------------
Statement ImpostaMenuFinestraPrincipale{}
SHARED FileMIDIAperto$()
SHARED StoriaDeiFileMIDIAperti
SHARED VoceMenuEsci

;-------------------------------------------
;elimina il menu' della finestra principale
;delete the main window menu
;----------------------------
 Free MenuList #ListaMenuPrincipale

;-----------------------------------------------------------
;imposta il colore del testo nel menu' ad acquamarina scuro
;sets the menu text colour to dark cyan
;---------------------------------------
 MenuColour #ColAcquamarina+#Scuro

;-------------------------
;imposta il menu' Project
;sets Project menu
;------------------
 MenuTitle #ListaMenuPrincipale,0,"Song"
 MenuItem #ListaMenuPrincipale,0,0,0,"New"
 MenuItem #ListaMenuPrincipale,0,0,1,"Load"
 MenuItem #ListaMenuPrincipale,0,0,2,"Save"
 MenuItem #ListaMenuPrincipale,0,0,3,"Save as"
 If StoriaDeiFileMIDIAperti=True
  For FileMIDIAperto.b=4 To VoceMenuEsci-1
   NomeFileMIDIAperto$=IsolaIlNomeDelFile{FileMIDIAperto$(FileMIDIAperto-4)}
   If Len(NomeFileMIDIAperto$)>30 Then NomeFileMIDIAperto$="..."+Right$(NomeFileMIDIAperto$,27)
   MenuItem #ListaMenuPrincipale,0,0,FileMIDIAperto,NomeFileMIDIAperto$
  Next FileMIDIAperto
 EndIf
 MenuItem #ListaMenuPrincipale,0,0,VoceMenuEsci,"Quit"

;--------------------------
;imposta il menu' Controls
;sets Controls menu
;------------------
 MenuTitle #ListaMenuPrincipale,1,"Controls"
 MenuItem #ListaMenuPrincipale,0,1,0,"Play"
 MenuItem #ListaMenuPrincipale,0,1,1,"Record"
 MenuItem #ListaMenuPrincipale,0,1,2,"Stop"

;---------------------------
;imposta il menu' Sequences
;sets Sequences menu
;--------------------
 MenuTitle #ListaMenuPrincipale,2,"Sequence"
 MenuItem #ListaMenuPrincipale,0,2,#InserisciIlNomeDellaSequenza,"Name"
 MenuItem #ListaMenuPrincipale,0,2,#EditaLaSequenza,"Edit"
 MenuItem #ListaMenuPrincipale,0,2,#EliminaLaSequenza,"Delete"

;------------------------
;imposta il menu' Sounds
;sets Sounds menu
;-----------------
 MenuTitle #ListaMenuPrincipale,3,"Sounds"
 MenuItem #ListaMenuPrincipale,0,3,0,"Use"

;-----------------------
;imposta il menu' Prefs
;sets Prefs menu
;----------------
 MenuTitle #ListaMenuPrincipale,4,"Prefs"
 MenuItem #ListaMenuPrincipale,0,4,0,"Set MIDI device"
 MenuItem #ListaMenuPrincipale,0,4,1,"Clear loaded MIDI files history"

;----------------------
;imposta il menu' Help
;sets Help menu
;---------------
 MenuTitle #ListaMenuPrincipale,5,"Help"
 MenuItem #ListaMenuPrincipale,0,5,0,"Keys to use"

;---------------------------------
;seleziona la finestra principale
;selects the main window
;------------------------
 Use Window #FinPrincipale

;-------------------------------
;attacca il menu' alla finestra
;attaches menu to window
;------------------------
 SetMenu #ListaMenuPrincipale
End Statement

;----------------------------------------------------------------------
;questa procedura copia l'immagine di sfondo nella finestra principale
;this procedure puts the backdrop image into the main window
;------------------------------------------------------------
Statement MettiLImmagineDiSfondoNellaFinestraPrincipale{}

;--------------------------------------------------------
;copia l'immagine dalla bitmap nella finestra principale
;copies the image from the bitmap into the main window
;------------------------------------------------------
 BitMaptoWindow #AreaGraficaImmagineDiSfondo,#FinPrincipale
End Statement

;--------------------------------------------------------------------------
;questa e' la funzione del panico: Premete il TASTO SINISTRO DEL MOUSE per
;rallentare la conversione del file MIDI in caricamento o premete il TASTO
;DESTRO DEL MOUSE per annullare la conversione
;this is the panic function: press the LEFT MOUSE BUTTON to slow the
;conversion of the MIDI file loading or press the RIGHT MOUSE BUTTON to abort
;the conversion
;----------------
Function .b Panico{}
 Select Joyb(0)
 Case #TastoSinistroDelTopoPremuto
  Delay_ 50:Panico.b=True
 Case #TastoDestroDelTopoPremuto
  Panico=1
 End Select
 Function Return Panico
End Function

;---------------------------------------------------------------------------
;questa funzione converte il valore dato se oltre 127 in un valore negativo
;this function converts the given value if over 127 into the negative
;equivalent
;------------
Function.b ConvertiOltreCentoventisetteInNegativo{Dato.w}
 If Dato>127 Then Dato-256
 DatoConvertito.b=Dato
 Function Return DatoConvertito
End Function

;-------------------------------------
;questa procedura carica un file MIDI
;this procedure loads a MIDI file
;---------------------------------
Statement CaricaUnFileMIDI{FileMIDI$}
SHARED Battiti
SHARED ColoriDellaSequenza
SHARED EventoMusicale()
SHARED FileMIDIAperto$()
SHARED HeaderMarker$
SHARED LunghezzaBrano
SHARED Misure
SHARED NomeDellaStoriaDeiFileMIDIAperti$
SHARED Sequenza()
SHARED SequenzaEsistente()
SHARED SequenzaMassimaDaCreare
SHARED SequenzaNellaTraccia()
SHARED Spazio$
SHARED StoriaDeiFileMIDIAperti
SHARED Traccia()
SHARED TrackMarker$
 WJam #DueColoriPieni

 If FileMIDI$=""
  MaxLen NomeDelFileMIDI$=64
  MaxLen PercorsoDelFileMIDI$=160
  FileMIDI$=FileRequest$("Load a MIDI file...",PercorsoDelFileMIDI$,NomeDelFileMIDI$)
 Else
  CaricatoDalMenu.b=True
 EndIf

 If FileMIDI$=""
  Statement Return
 Else
  FileMIDIAperto.b=ReadFile(#FileMIDIDaCaricare,FileMIDI$)
  If FileMIDIAperto=False
   Statement Return
  EndIf
 EndIf

 FileInput #FileMIDIDaCaricare
 ResetList Sequenza()
 ResetList SequenzaNellaTraccia()
 MarcatoreIniziale$=Inkey$(4)
 If MarcatoreIniziale$=HeaderMarker$
  WColour 10,11
  WLocate 0,0:Print String$(Spazio$,80)
  WLocate 0,0:Print "Recognized a MIDI file..."
  Delay_ 50
 Else
  IlFileCaricatoNonEUnFileMIDI.b=True
  Pop If:Pop If:Pop If:Goto FineCicloCaricamento
 EndIf

 If Cvl(Inkey$(4))<>#_MarkerLength
  IlFileCaricatoNonEUnFileMIDI=True
  Pop If:Pop If:Pop If:Pop If:Goto FineCicloCaricamento
 EndIf

 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Header length correct..."
 Delay_ 50
 TipoDiFileMIDI.b=Cvi(Inkey$(2))
 WLocate 0,0:Print String$(Spazio$,80):WLocate 0,0
 Select TipoDiFileMIDI
 Case #_FormatZero
  Print "Recognized Standard MIDI File Format 0..."
  Delay_ 50
 Case #_FormatOne
  Print "Recognized Standard MIDI File Format 1..."
  Delay_ 50
 Case #_FormatTwo
  Print "Recognized Standard MIDI File Format 2..."
  Delay_50
 Default
  IlFileCaricatoNonEUnFileMIDI=True
  Pop Select:Pop If:Pop If:Pop If:Goto FineCicloCaricamento
 End Select

 Tracce.w=Cvi(Inkey$(2))
 If Tracce=0
  RichiestaPannello{"TITOLO","There are no tracks","OK"}
  Statement Return
 EndIf

 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "There "
 If Tracce=1 Then Print "is one track..." Else Print "are ",Tracce," tracks..."
 Delay_ 50

 If Tracce>1 AND TipoDiFileMIDI=#_FormatZero
  IlFileCaricatoNonEUnFileMIDI=True
  Pop If:Pop If:Pop If:Pop If:Pop If:Goto FineCicloCaricamento
 EndIf

 TicPerQuarto.w=Cvi(Inkey$(2))
 If TicPerQuarto<0
  RichiestaPannello{"TITOLO","SMPTE timing not supported yet","OK"}
  Pop If:Pop If:Pop If:Pop If:Pop If:Goto FineCicloCaricamento
 EndIf

 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Ticks per quarter note: ",TicPerQuarto,"..."
 Delay_ 50
 WLocate 0,0:Print String$(Spazio$,80):WLocate 0,0
 If Tracce=1 Then Print "One track loading..." Else Print Tracce," tracks loading..."
 Delay_ 50
 TicPerSessantaquattresimo.w=TicPerQuarto/16

 Traccia.w=0
 Repeat
  WLocate 0,0:Print String$(Spazio$,80)
  WLocate 0,0:Print "Track ",Traccia+1,": loading..."
  Delay_ 50
  Sequenza.l=Traccia+1
  LastItem Sequenza()

  If AddItem(Sequenza())=False
   RichiestaPannello{"TITOLO","You have used all the available sequences","OK"}
   Delay_ 50
   Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If
   Goto FineCicloCaricamento
  EndIf

  ResetList Sequenza()
  SequenzaCorrente.l=0
  While NextItem(Sequenza())=True
   SequenzaCorrente+1
   If SequenzaCorrente=Sequenza Then Pop While:Goto FineRicercaSequenza
  Wend
FineRicercaSequenza
  LastItem SequenzaNellaTraccia()
  If AddItem(SequenzaNellaTraccia())=True
   SequenzaNellaTraccia()\Sequenza=Sequenza
  Else
   RichiestaPannello{"TITOLO","You have used all the available sequences","OK"}
   Delay_ 50
   Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If
   Goto FineCicloCaricamento
  EndIf

  ResetList SequenzaNellaTraccia()
  SequenzaCorrenteNellaTraccia.l=0
  While NextItem(SequenzaNellaTraccia())=True
   If SequenzaNellaTraccia()\Sequenza=Sequenza
    SequenzaCorrenteNellaTraccia+1
    If SequenzaCorrenteNellaTraccia=1
     SequenzaNellaTraccia()\Genitore=True
    Else
     SequenzaNellaTraccia()\Genitore=Sequenza
    EndIf
   EndIf
  Wend

  If SequenzaNellaTraccia()\Genitore=False Then Goto FineSequenzaGenitore

  Sequenza()\Durata=(#TicDiBasePerQuarto*4.0*Battiti)/Misure
  MarcatoreTraccia$=Inkey$(4)
  If MarcatoreTraccia$<>TrackMarker$
   IlFileCaricatoNonEUnFileMIDI=True
   Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If
   Goto FineCicloCaricamento
  EndIf

  If ColoriDellaSequenza<17 Then ColoriDellaSequenza+1
  If ColoriDellaSequenza<17
   ColoreTestoDellaSequenza=(ColoriDellaSequenza+4) MOD 16
   ColoreSfondoDellaSequenza=(ColoriDellaSequenza+9) MOD 16
  Else
   ColoreTestoDellaSequenza=Rnd(15)
   ColoreSfondoDellaSequenza=Rnd(15)
  EndIf
  Sequenza()\ColoreTesto=ColoreTestoDellaSequenza
  Sequenza()\ColoreSfondo=ColoreSfondoDellaSequenza

  If Panico{}=True
   WLocate 0,0:Print String$(Spazio$,80)
   WLocate 0,0:Print "Track ",Traccia+1,": found track marker..."
   Panico.b=True
  Else
   If Panico{}=1
    Pop If:Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If
    Goto FineCicloCaricamento
   EndIf
   If Panico=True
    WLocate 0,0:Print String$(Spazio$,80)
    WLocate 0,0:Print "Track ",Traccia+1,": loading..."
    Panico=False
   EndIf
  EndIf
  LunghezzaTraccia.l=Cvl(Inkey$(4))
  If LunghezzaTraccia=0
   If Panico{}=True
    WLocate 0,0:Print String$(Spazio$,80)
    WLocate 0,0:Print "No datum found..."
    Panico=True
   Else
    If Panico{}=1
     Pop If:Pop If:Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If
     Goto FineCicloCaricamento
    EndIf
    If Panico=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": loading..."
     Panico=False
    EndIf
   EndIf
  EndIf
  ContatoreByteTraccia.l=0
  InizioEventoMusicale.l=0
  PosizioneEventoMusicale.l=0
  InizioTraccia.b=True
  FineTraccia.b=False
  Repeat
   Repeat
    DeltaPosizioneEventoMusicale.b=ConvertiOltreCentoventisetteInNegativo{Asc(Inkey$)}
    ContatoreByteTraccia+1
    NuovoDeltaPosizioneEventoMusicale.b=DeltaPosizioneEventoMusicale BitTst 7
    If Panico{}=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
     If NuovoDeltaPosizioneEventoMusicale=True
      Print " another event position value to add search..."
     Else
      Print " this was the last event position value to add..."
     EndIf
     Panico=True
    Else
     If Panico{}=1
      Pop If:Pop If:Pop Repeat:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
      Goto FineCicloCaricamento
     EndIf
     If Panico=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": loading..."
      Panico=False
     EndIf
    EndIf
    DeltaPosizioneEventoMusicale BitClr 7
    NuovaPosizioneEventoMusicale.w=DeltaPosizioneEventoMusicale
    NuovaPosizioneEventoMusicale*#TicDiBasePerSessantaquattresimo
    NuovaPosizioneEventoMusicale/TicPerSessantaquattresimo
    PosizioneEventoMusicale+NuovaPosizioneEventoMusicale
   Until NuovoDeltaPosizioneEventoMusicale=False

   If Panico{}=True
    WLocate 0,0:Print String$(Spazio$,80)
    WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
    Print " status byte search..."
    Panico=True
   Else
    If Panico{}=1
     Pop If:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
     Goto FineCicloCaricamento
    EndIf
    If Panico=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": loading..."
     Panico=False
    EndIf
   EndIf
   NuovoByteDiStato.b=ConvertiOltreCentoventisetteInNegativo{Asc(Inkey$)}
   ContatoreByteTraccia+1
   If NuovoByteDiStato<>#_MetaEvent
    If NuovoByteDiStato<0 Then ByteDiStato.b=NuovoByteDiStato
    TipoDiEventoMusicale.b=ByteDiStato & #_StatusBits
    CanaleEventoMusicale.b=ByteDiStato & #_ChannelBits

    If InizioTraccia=True
     SequenzaNellaTraccia()\Inizio=PosizioneEventoMusicale
     PosizioneEventoMusicale=0
     InizioTraccia=False
    EndIf

    If Panico{}=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
     Print " found event at "
     ConvertiIlTempoInBattute{PosizioneEventoMusicale,1}
     Print "..."
     Panico=True
    Else
     If Panico{}=1
      Pop If:Pop If:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
      Goto FineCicloCaricamento
     EndIf
     If Panico=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": loading..."
      Panico=False
     EndIf
    EndIf
    CanaleEventoMusicale+1
    Select TipoDiEventoMusicale
    Case #_NoteOff
     TipoDiEventoMusicale$="NoteOff"
     If NuovoByteDiStato>-1
      EventoMusicale.b=NuovoByteDiStato
     Else
      EventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     ValoreEventoMusicale.b=Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " note off value found..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Case #_NoteOn
     TipoDiEventoMusicale$="Note"
     If NuovoByteDiStato>-1
      EventoMusicale=NuovoByteDiStato
     Else
      EventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     ValoreEventoMusicale=Asc(Inkey$)
     ContatoreByteTraccia+1
     If ValoreEventoMusicale=0
      TipoDiEventoMusicale$="NoteOff"
      If Panico{}=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
       Print " note off value found..."
       Panico=True
      Else
       If Panico{}=1
        Pop If:Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
        Goto FineCicloCaricamento
       EndIf
       If Panico=True
        WLocate 0,0:Print String$(Spazio$,80)
        WLocate 0,0:Print "Track ",Traccia+1,": loading..."
        Panico=False
       EndIf
      EndIf
     Else
      If Panico{}=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
       Print " note on value found..."
       Panico=True
      Else
       If Panico{}=1
        Pop If:Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
        Goto FineCicloCaricamento
       EndIf
       If Panico=True
        WLocate 0,0:Print String$(Spazio$,80)
        WLocate 0,0:Print "Track ",Traccia+1,": loading..."
        Panico=False
       EndIf
      EndIf
     EndIf
    Case #_ProgramChange
     TipoDiEventoMusicale$="Program"
     If NuovoByteDiStato>-1
      EventoMusicale=NuovoByteDiStato
     Else
      EventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " program change value found..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Case #_ControlChange
     TipoDiEventoMusicale$="Control"
     If NuovoByteDiStato>-1
      EventoMusicale=NuovoByteDiStato
     Else
      EventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     ValoreEventoMusicale=Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " control change value found..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Case #_PolyphonicKeyPressure
     TipoDiEventoMusicale$="PolyAftertouch"
     If NuovoByteDiStato>-1
      EventoMusicale=NuovoByteDiStato
     Else
      EventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " polyphonic key pressure value found..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Case #_ChannelKeyPressure
     TipoDiEventoMusicale$="MonoAftertouch"
     If NuovoByteDiStato>-1
      EventoMusicale=NuovoByteDiStato
     Else
      EventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " channel key pressure value found..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Case #_PitchBend
     TipoDiEventoMusicale$="PitchBend"
     If NuovoByteDiStato>-1
      ValoreEventoMusicale=NuovoByteDiStato
     Else
      ValoreEventoMusicale=Asc(Inkey$)
      ContatoreByteTraccia+1
     EndIf
     EventoMusicale=Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " pitchbend value found..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Default
     TipoDiEventoMusicale$=""
    End Select

    If TipoDiEventoMusicale$<>""
     If TipoDiEventoMusicale$<>"NoteOff"
      If AddItem(EventoMusicale())=True
       EventoMusicale()\Tipo=TipoDiEventoMusicale$
       EventoMusicale()\Evento=EventoMusicale
       EventoMusicale()\Inizio=PosizioneEventoMusicale
       EventoMusicale()\Canale=CanaleEventoMusicale
       EventoMusicale()\Sequenza=Sequenza
       EventoMusicale()\Durata=2
       If TipoDiEventoMusicale$="Note"
        EventoMusicale()\Valore=ValoreEventoMusicale
        EventoMusicale()\Stato | #EventoMusicaleEseguito
       EndIf
       If TipoDiEventoMusicale$="Control" Then EventoMusicale()\Valore=ValoreEventoMusicale
       If TipoDiEventoMusicale$="PitchBend" Then EventoMusicale()\Valore=ValoreEventoMusicale
       Sequenza()\EventiMusicali+1
      Else
       RichiestaPannello{"TITOLO","You have used all the available sequences","OK"}
       Pop If:Pop If:Pop If:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
     Else
      PushItem EventoMusicale()
      ResetList EventoMusicale()
      While NextItem(EventoMusicale())=True
       If EventoMusicale()\Stato & #EventoMusicaleTerminato<>#EventoMusicaleTerminato
        If EventoMusicale()\Stato & #EventoMusicaleEseguito=#EventoMusicaleEseguito
         If EventoMusicale()\Tipo="Note"
          If EventoMusicale()\Evento=EventoMusicale AND EventoMusicale()\Canale=CanaleEventoMusicale
           EventoMusicale()\Durata=PosizioneEventoMusicale-EventoMusicale()\Inizio+1
           EventoMusicale()\Stato & %0011110111
           EventoMusicale()\Stato | #EventoMusicaleTerminato
           If Panico{}=True
            WLocate 0,0:Print String$(Spazio$,80)
            WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia
            Print ", note duration "
            ConvertiIlTempoInBattute{EventoMusicale()\Durata,0}
            Print "..."
            Panico=True
           Else
            If Panico{}=1
         Pop If:Pop If:Pop If:Pop If:Pop If:Pop While:Pop If:Pop If:Pop If:Pop Repeat:Pop Repeat:Pop If:Pop If:Pop If:Pop If
             Goto FineCicloCaricamento
            EndIf
            If Panico=True
             WLocate 0,0:Print String$(Spazio$,80)
             WLocate 0,0:Print "Track ",Traccia+1,": loading..."
             Panico=False
            EndIf
           EndIf
          EndIf
          Pop If:Pop If:Pop If:Pop While:Goto FineCicloCaricamentoNota
         EndIf
        EndIf
       Else
        EventoMusicale()\Stato & %0011101111
       EndIf
      Wend
FineCicloCaricamentoNota
      PopItem EventoMusicale()
      If PosizioneEventoMusicale>Sequenza()\Durata Then Sequenza()\Durata=PosizioneEventoMusicale
     EndIf
    EndIf
   Else
    TipoDiMetaEvento.b=ConvertiOltreCentoventisetteInNegativo{Asc(Inkey$)}
    ContatoreByteTraccia+1
    Select TipoDiMetaEvento
    Case #_SequenceNumber

;---------------------------------------------------------------------------
;questa variabile e' fittizia, il suo valore e' noto ed  e' 2, e' usata per
;saltare un dato
;this is a dummy var, its value is known AND is 2, is Used To skip a datum
;--------------------------------------------------------------------------
     LunghezzaMetaEvento.l=Asc(Inkey$)

     ContatoreByteTraccia+1
     Sequenza=Cvi(Inkey$(2))
     ContatoreByteTraccia+2
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " sequence number: ",Sequenza,"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
     PushItem Sequenza()
     ResetList Sequenza()
     SequenzaCorrente=0
     While NextItem(Sequenza())=True
      SequenzaCorrente+1
      If SequenzaCorrente=Sequenza Then Pop While:Goto FineCicloSequenza
     Wend
FineCicloSequenza
     PopItem Sequenza()
    Case #_SequenceName
     LunghezzaNome.l=0
     Repeat
      DeltaLunghezzaNome.b=ConvertiOltreCentoventisetteInNegativo{Asc(Inkey$)}
      ContatoreByteTraccia+1
      FineDeiDeltaLunghezzaNome.b=DeltaLunghezzaNome BitTst 7
      If Panico{}=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
       If FineDeiDeltaLunghezzaNome=True
        Print " another sequence name length value to add search..."
       Else
        Print " this was the last sequence name length value to add..."
       EndIf
       Panico=True
      Else
       If Panico{}=1
        Pop If:Pop Repeat:Pop Select:Pop If:Pop Repeat:Pop If:Pop If
        Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
        Goto FineCicloCaricamento
       EndIf
       If Panico=True
        WLocate 0,0:Print String$(Spazio$,80)
        WLocate 0,0:Print "Track ",Traccia+1,": loading..."
        Panico=False
       EndIf
      EndIf
      DeltaLunghezzaNome BitClr 7
      LunghezzaNome+DeltaLunghezzaNome
     Until FineDeiDeltaLunghezzaNome=False
     NomeSequenza$=StripTrail$(Inkey$(LunghezzaNome),0)
     ContatoreByteTraccia+LunghezzaNome
     Sequenza()\Nome=NomeSequenza$
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      Print " sequence name: ",Left$(NomeSequenza$,77-WCursX/8),"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Case #_EndOfTrackChunk
     FineTraccia=Asc(Inkey$)
     ContatoreByteTraccia+1
     If FineTraccia=0 Then FineTraccia=True
    Case #_TimeSignatureChange
     LunghezzaDatiDelTempo.b=ConvertiOltreCentoventisetteInNegativo{Asc(Inkey$)}
     ContatoreByteTraccia+1
     Battiti=Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      If Battiti=1 Then Battiti$="beat" Else Battiti$="beats"
      Print Spazio$,Battiti,Spazio$,Battiti$,"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
     Misure=2^Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      If Misure=1 Then Misure$="measure" Else Misure$="measures"
      Print Spazio$,Misure,Spazio$,Misure$,"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
     TicPerBattito.w=Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      If TicPerBattito=1 Then TicPerBattito$="tick per beat" Else TicPerBattito$="ticks per beat"
      Print Spazio$,TicPerBattito,Spazio$,TicPerBattito$,"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
     If TicPerBattito=0 Then TicPerBattito=#TicDiBasePerQuarto
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      TicPerBattito$="ticks per beat forced to "+Str$(#TicDiBasePerQuarto)+" base ticks"
      Print Spazio$,TicPerBattito$,"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
     TrentaduesimiInUnQuarto.b=Asc(Inkey$)
     ContatoreByteTraccia+1
     If Panico{}=True
      WLocate 0,0:Print String$(Spazio$,80)
      WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
      TrentaduesimiInUnQuarto$="32th"
      If TrentaduesimiInUnQuarto=1 Then TrentaduesimiInUnQuarto$+" per quarter" Else TrentaduesimiInUnQuarto$+"s per quarter"
      Print Spazio$,TrentaduesimiInUnQuarto,Spazio$,TrentaduesimiInUnQuarto$,"..."
      Panico=True
     Else
      If Panico{}=1
       Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
       Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
       Goto FineCicloCaricamento
      EndIf
      If Panico=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": loading..."
       Panico=False
      EndIf
     EndIf
    Default
     LunghezzaMetaEvento=0
     Repeat
      DeltaLunghezzaMetaEvento.b=ConvertiOltreCentoventisetteInNegativo{Asc(Inkey$)}
      ContatoreByteTraccia+1
      FineDeiDeltaLunghezzaMetaEvento.b=DeltaLunghezzaMetaEvento BitTst 7
      If Panico{}=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print "Track ",Traccia+1,": byte ",ContatoreByteTraccia," of ",LunghezzaTraccia,","
       If FineDeiDeltaLunghezzaMetaEvento=True
        Print " another meta event length value to add search..."
       Else
        Print " this was the last meta event length value to add..."
       EndIf
       Panico=True
      Else
       If Panico{}=1
        Pop If:Pop Repeat:Pop Select:Pop If:Pop Repeat:Pop If:Pop If
        Pop If:Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
        Goto FineCicloCaricamento
       EndIf
       If Panico=True
        WLocate 0,0:Print String$(Spazio$,80)
        WLocate 0,0:Print "Track ",Traccia+1,": loading..."
        Panico=False
       EndIf
      EndIf
      DeltaLunghezzaMetaEvento BitClr 7
      LunghezzaMetaEvento+DeltaLunghezzaMetaEvento
     Until FineDeiDeltaLunghezzaMetaEvento=False
     If LunghezzaMetaEvento>0
      ValoreMetaEvento$=Inkey$(LunghezzaMetaEvento)
      ContatoreByteTraccia+LunghezzaMetaEvento
      If Panico{}=True
       WLocate 0,0:Print String$(Spazio$,80)
       WLocate 0,0:Print Left$(ValoreMetaEvento$,80)
       Panico=True
      Else
       If Panico{}=1
        Pop If:Pop If:Pop Select:Pop If:Pop Repeat:Pop If:Pop If:Pop If
        Pop Repeat:Pop If:Pop If:Pop If:Pop If:Pop If
        Goto FineCicloCaricamento
       EndIf
       If Panico=True
        WLocate 0,0:Print String$(Spazio$,80)
        WLocate 0,0:Print "Track ",Traccia+1,": loading..."
        Panico=False
       EndIf
      EndIf
     EndIf
    End Select
   EndIf
  Until FineTraccia=True OR ContatoreByteTraccia=LunghezzaTraccia
FineSequenzaGenitore
  If SequenzaNellaTraccia()\Genitore=True
   If Panico{}=True
    WLocate 0,0:Print String$(Spazio$,80)
    WLocate 0,0:Print "Track ",Traccia+1,": ",ContatoreByteTraccia," of ",LunghezzaTraccia,"..."
    Panico=True
   Else
    If Panico{}=1
     Pop If:Pop If:Pop If:Pop If:Pop If:Pop Repeat:Pop If:Pop If:Pop If
     Pop If:Pop If
     Goto FineCicloCaricamento
    EndIf
    If Panico=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": loading..."
     Panico=False
    EndIf
   EndIf
   If Panico{}=True
    WLocate 0,0:Print String$(Spazio$,80)
    WLocate 0,0:Print "Track ",Traccia+1,": "
    If FineTraccia=True
     Print "track correctly terminated :-)"
    Else
     Print "track not correctly terminated! :-("
    EndIf
    Panico=True
   Else
    If FineTraccia=False Then BeepScreen #Schermo
    If Panico=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": end loading."
     Panico=False
    EndIf
   EndIf
   If Panico{}=True
    WLocate 0,0:Print String$(Spazio$,80)
    WLocate 0,0:Print "Track ",Traccia+1,": "
    If ContatoreByteTraccia=LunghezzaTraccia
     Print "bytes match! :-)"
    Else
     Print "bytes don't match! :-("
    EndIf
    Panico=True
   Else
    If ContatoreByteTraccia<>LunghezzaTraccia Then BeepScreen #Schermo
    If Panico=True
     WLocate 0,0:Print String$(Spazio$,80)
     WLocate 0,0:Print "Track ",Traccia+1,": end loading."
     Panico=False
    EndIf
   EndIf
   If SequenzaMassimaDaCreare=1
    LunghezzaBrano=SequenzaNellaTraccia()\Inizio+Sequenza()\Durata
   Else
    If SequenzaNellaTraccia()\Inizio+Sequenza()\Durata>LunghezzaBrano
     LunghezzaBrano=SequenzaNellaTraccia()\Inizio+Sequenza()\Durata
    EndIf
   EndIf
  EndIf
  SequenzaNellaTraccia()\Traccia=Traccia+1
  SequenzaEsistente(Sequenza-1)=True
  Traccia(Traccia)=True
  SequenzaMassimaDaCreare+1
  Traccia+1
 Until Traccia=Tracce

FineCicloCaricamento
 CloseFile #FileMIDIDaCaricare
 PopInput

 If IlFileCaricatoNonEUnFileMIDI=True
  RichiestaPannello{"TITOLO","This is not a MIDI file!","OK"}
 Else
  If CaricatoDalMenu=False
   For FileMIDIAperto.b=3 To 0 Step -1
    FileMIDIAperto$(FileMIDIAperto+1)=FileMIDIAperto$(FileMIDIAperto)
   Next FileMIDIAperto
   FileMIDIAperto$(0)=FileMIDI$
   StoriaDeiFileMIDIAperti=WriteFile(#StoriaDeiFileMIDI,NomeDellaStoriaDeiFileMIDIAperti$)
   If StoriaDeiFileMIDIAperti=True
    FileOutput #StoriaDeiFileMIDI
    For FileMIDIAperto=0 To 4
     If FileMIDIAperto$(FileMIDIAperto)<>"" Then NPrint FileMIDIAperto$(FileMIDIAperto)
    Next FileMIDIAperto
    CloseFile #StoriaDeiFileMIDI
    PopOutput
   EndIf
  EndIf
 EndIf
End Statement

;-------------------------------------------------------------
;questa procedura crea il suono da sentire nell'editore suono
;this procedure create the sound to listen into the sound editor
;----------------------------------------------------------------
Statement CreaIlSuono{Indirizzo.l}
SHARED LUNGHEZZASUONO
SHARED PeriFreq()
SHARED NuovaNota
 Free Sound #SuonoEditato
 InitSound #SuonoEditato,LUNGHEZZASUONO
 For Dato.l=0 To LUNGHEZZASUONO-1
  SoundData #SuonoEditato,Dato,Peek.b(Indirizzo+Dato)
 Next Dato
 SetPeriod #SuonoEditato,PeriFreq(NuovaNota)\Periodo
End Statement

;---------------------------------------------------------------------
;questa procedura crea la forma d'onda multipla di quella di partenza
;this procedure creates the multiple waveform from the start one
;----------------------------------------------------------------
Statement Multiplo{}
SHARED FREQUENZAMASSIMA
SHARED LunghezzaSintetico
SHARED MULTIPLO
 InitBank #BancoOndaMultipla,LunghezzaSintetico,#MemoriaFast
 Repeat
  For X.l=0 To LunghezzaSintetico-1 Step MULTIPLO
   DATO.b=Peek.b(Bank(#BancoOndaSintetica)+X)
   INDIRIZZO.l=Bank(#BancoOndaMultipla)+M
   Poke.b INDIRIZZO,DATO
   M+1
   If M=LunghezzaSintetico Then Pop For:Pop Repeat:Goto FineCicloOndaMultipla
  Next
 Until M=LunghezzaSintetico
FineCicloOndaMultipla
 WPlot 0,103,#ColDati
 For X=0 To LunghezzaSintetico-1
  DATO=Peek.b(Bank(#BancoOndaSintetica)+X)
  INDIRIZZO=Bank(#BancoOndaMultipla)+X
  Poke.b INDIRIZZO,DATO
  DATO=ConvertiOltreCentoventisetteInNegativo{DATO}
  Wline (X*512)/LunghezzaSintetico,103-DATO/4,#ColDati
 Next
 FreeBank #BancoOndaMultipla
 MULTIPLO=ValoreBarra{#BarraMultiplo,FREQUENZAMASSIMA,608,"HORIZONTAL",#ListaBottoniGeneratoreSuono}
 WLocate 75*#GrandezzaFonteTopaz,17*#GrandezzaFonteTopaz:Format "####":Print MULTIPLO:Format ""
End Statement

;-------------------------------------------------
;questa procedura somma una forma d'onda al suono
;this procedure adds a waveform to the sound
;--------------------------------------------
Statement Somma{}
SHARED FORMADONDA()
SHARED LUNGHEZZASINTETICO
 For X.w=0 To LUNGHEZZASINTETICO-1
  Dato.b=PeekSound(#SuonoEditato,X)
  FORMADONDA(X)+Dato
 Next X
End Statement

;---------------------------------------------------------------------
;questa procedura ripulisce l'area dei bottoni dell'editore del suono
;this procedure cleans the sound editor buttons area
;----------------------------------------------------
Statement PulisciLAreaDeiBottoniDellEditoreSuono{}
SHARED AltezzaInternaFinestraEditoreSuono
SHARED LarghezzaInternaFinestraEditoreSuono
SHARED ULTIMALINEA
 WBox 0,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,LarghezzaInternaFinestraEditoreSuono-1,AltezzaInternaFinestraEditoreSuono-1,0
End Statement

;--------------------------------------------------------
;questa procedura carica un suono nell'editore del suono
;this procedure loads a sound into the sound editor
;---------------------------------------------------
Statement CaricaUnSuono{}
SHARED ANNOTAZIONI$
SHARED ErroreDiCaricamentoDelSuono
SHARED FINESUONO
SHARED FREQUENZA
SHARED INIZIOSUONO
SHARED LUNGHEZZASUONO
SHARED NomeDelSuono$
SHARED PercorsoDelSuono$
SHARED PeriFreq()
SHARED SENZAMEMORIA
SHARED Suono$
SHARED Suono()
SHARED SuonoIndicatoDalTopo
SHARED TitoloSchermo$
SHARED ULTIMALINEA
 If ANNOTAZIONI$<>"" Then Suono$=FileRequest$("Load a sound...",PercorsoDelSuono$,NomeDelSuono$)
 If Exists(Suono$)=0 Then Statement Return
 LoadBank #BancoDiConversione,Suono$,#MemoriaFast
 If BankSize(#BancoDiConversione)=0
  TestoInvertitoECentrato{"It is not possible to load the sound",ULTIMALINEA-1}
  TestoInvertitoECentrato{Suono$,ULTIMALINEA}
  Delay_ 100
  PulisciLAreaDeiBottoniDellEditoreSuono{}
  Statement Return
 EndIf
 LUNGHEZZABANCO.l=BankSize(#BancoDiConversione)
 INDIRIZZO.l=Bank(#BancoDiConversione)+8
 If Peeks$(INDIRIZZO,8)="8SVXVHDR"
  INDIRIZZO+12
  LUNGHEZZASUONO=Peek.l(INDIRIZZO)
  INDIRIZZO+4
  If LUNGHEZZASUONO=0 Then LUNGHEZZASUONO=Peek.l(INDIRIZZO)
  INDIRIZZO+8
  FREQUENZA=Peek.w(INDIRIZZO)
  INDIRIZZO+8
  If Peeks$(INDIRIZZO,4)="NAME"
   INDIRIZZO+4
   Dati.l=Peek.l(INDIRIZZO)
   INDIRIZZO+4
   NomeDelSuono$=StripTrail$(Peeks$(INDIRIZZO,Dati),0)
   INDIRIZZO+Dati
  EndIf
  If Peeks$(INDIRIZZO,4)="(C) "
   INDIRIZZO+4
   Dati=Peek.l(INDIRIZZO)
   INDIRIZZO+4
   Proprieta$=StripTrail$(Peeks$(INDIRIZZO,Dati),0)
   INDIRIZZO+Dati
  EndIf
  If Peeks$(INDIRIZZO,4)="AUTH"
   INDIRIZZO+4
   Dati=Peek.l(INDIRIZZO)
   INDIRIZZO+4
   Autore$=StripTrail$(Peeks$(INDIRIZZO,Dati),0)
   INDIRIZZO+Dati
  EndIf
  If Peeks$(INDIRIZZO,4)="ANNO"
   INDIRIZZO+4
   Dati=Peek.l(INDIRIZZO)
   INDIRIZZO+4
   ANNOTAZIONI$=StripTrail$(Peeks$(INDIRIZZO,Dati),0)
   INDIRIZZO+Dati
  EndIf
  If Peeks$(INDIRIZZO,4)="BODY"
   INDIRIZZO+4
   LUNGHEZZADATI=Peek.l(INDIRIZZO)
   INDIRIZZO+4
   If LUNGHEZZASUONO<LUNGHEZZADATI Then LUNGHEZZASUONO=LUNGHEZZADATI
   InitBank #BancoDelSuono,LUNGHEZZASUONO,#MemoriaFast
   For BancoDelSuono.l=0 To LUNGHEZZASUONO-1
    Poke.b Bank(#BancoDelSuono)+BancoDelSuono,Peek.b(INDIRIZZO+BancoDelSuono)
   Next BancoDelSuono
   CaricaIlSuonoGrezzo.b=False
  Else
   TestoInvertitoECentrato{NomeDelSuono$+UStr$(BankSize(#BancoDiConversione))+" Bytes",ULTIMALINEA-1}
   TestoInvertitoECentrato{"is an anomalous AMIGA sound, it is hard to load!",ULTIMALINEA}
   Delay_ 100
   CaricaIlSuonoGrezzo=True
  EndIf
 Else
  CaricaIlSuonoGrezzo=True
 EndIf
 If CaricaIlSuonoGrezzo=True
  TestoInvertitoECentrato{Suono$,ULTIMALINEA-1}
  TestoInvertitoECentrato{"I am going to load the sound as uncoded",ULTIMALINEA}
  Delay_ 100
  PulisciLAreaDeiBottoniDellEditoreSuono{}
  InitBank #BancoDelSuono,LUNGHEZZABANCO,#MemoriaFast
  For BancoDelSuono=0 To LUNGHEZZABANCO-1
   Poke.b Bank(#BancoDelSuono)+BancoDelSuono,Peek.b(Bank(#BancoDiConversione)+BancoDelSuono)
  Next BancoDelSuono
  ANNOTAZIONI$=""
  FREQUENZA=PeriFreq(8*12)\Frequenza
  LUNGHEZZASUONO=LUNGHEZZABANCO
  If LCase$(Right$(NomeDelSuono$,5))=".8svx" Then NomeDelSuono$=UnLeft$(NomeDelSuono$,5)
  If Len(NomeDelSuono$)>25 Then NomeDelSuono$=UnLeft$(NomeDelSuono$,4)
  If LCase$(Right$(NomeDelSuono$,4))<>".raw" Then NomeDelSuono$+".Raw"
 Else
  If Exists(Suono$)>0
   ErroreDiCaricamentoDelSuono=True
   LoadSound Suono,Suono$
   ErroreDiCaricamentoDelSuono=False
   Suono(Suono)\Nome=Suono$
   If LCase$(Right$(NomeDelSuono$,4))=".raw" Then NomeDelSuono$=UnLeft$(NomeDelSuono$,4)
   If Len(NomeDelSuono$)>26 Then NomeDelSuono$=UnLeft$(NomeDelSuono$,4)
   If LCase$(Right$(NomeDelSuono$,5))<>".8svx" Then NomeDelSuono$+".8svx"
   Suono(SuonoIndicatoDalTopo)\Nome=Suono$
  EndIf
 EndIf
 INIZIOSUONO=Bank(#BancoDelSuono)
 FINESUONO=INIZIOSUONO+(LUNGHEZZASUONO-1)
 CreaIlSuono{INIZIOSUONO}
 FreeBank #BancoDiConversione
 SENZAMEMORIA=False
 TitoloFinestra$="Sound Editor-"+NomeDelSuono$:WTitle TitoloFinestra$,TitoloSchermo$
End Statement

;----------------------------------------------------------------------------
;questa procedura salva il suono o come suono grezzo oppure come suono AMIGA
;standard
;this procedure saves the sound either uncoded sound or standard AMIGA sound
;----------------------------------------------------------------------------
Statement SalvaIlSuono{}
SHARED Autore$
SHARED LUNGHEZZASUONO
SHARED NUOVAFREQUENZA
SHARED NUOVOINIZIOSUONO
SHARED NomeDelSuono$
SHARED PercorsoDelSuono$
SHARED Suono$
SHARED TastoFuga$
SHARED TitoloSchermo$
SHARED ULTIMALINEA
 RispostaValida.b=False
 Suono$=FileRequest$("Save the sound",PercorsoDelSuono$,NomeDelSuono$)
 If Suono$<>""
  TestoInvertitoECentrato{Right$(Suono$,79),ULTIMALINEA-1}
  TestoInvertitoECentrato{"Do you wish to save it as standard AMIGA sound (y/n/Esc)?",ULTIMALINEA}
  Repeat
   Risposta$=LCase$(Inkey$)
   If Risposta$=TastoFuga$ Then RispostaValida=True
   If Risposta$="n" Then RispostaValida=True
   If Risposta$="y" Then RispostaValida=True
   VWait
  Until RispostaValida=True
  If Risposta$=TastoFuga$
   TestoInvertitoECentrato{"Saving aborted by user!",ULTIMALINEA}
   Delay_ 100
   PulisciLAreaDeiBottoniDellEditoreSuono{}
   Statement Return
  EndIf
  NuovoNomeDelSuono$=GetFileName(Suono$)
  NuovoPercorsoDelSuono$=GetPathName(Suono$)
  If Risposta$="y"
   If LCase$(Right$(NuovoNomeDelSuono$,5))<>".8svx"
    If LCase$(Right$(NuovoNomeDelSuono$,4))=".raw" Then NuovoNomeDelSuono$=UnLeft$(NuovoNomeDelSuono$,4)
    If Len(NuovoNomeDelSuono$)>25 Then NuovoNomeDelSuono$=UnLeft$(NuovoNomeDelSuono$,5)
    NuovoNomeDelSuono$+".8svx"
   EndIf
   Suono$=NuovoPercorsoDelSuono$+NuovoNomeDelSuono$
   TestoInvertitoECentrato{"I am going to save as standard AMIGA sound",ULTIMALINEA-1}
   TestoInvertitoECentrato{Right$(Suono$,79),ULTIMALINEA}
   Delay_ 100
   LUNGHEZZANOME.w=Len(NuovoNomeDelSuono$)/4*4
   RESTONOME.b=Len(NuovoNomeDelSuono$) MOD 4:If RESTONOME>0 Then LUNGHEZZANOME+4
   LUNGHEZZABANCO.l=40+8+#LunghezzaAnnotazioni+8+#LunghezzaProprieta+8+#LunghezzaAutore+8+LUNGHEZZASUONO
   If NuovoNomeDelSuono$<>"" Then LUNGHEZZABANCO+8+LUNGHEZZANOME
   LunghezzaDispari.b=LUNGHEZZABANCO MOD 2:LUNGHEZZABANCO+LunghezzaDispari
   InitBank #BancoDiConversione,LUNGHEZZABANCO,#MemoriaFast
   INDIRIZZO.l=Bank(#BancoDiConversione)
   Poke$ INDIRIZZO,"FORM"
   INDIRIZZO+4
   Poke.l INDIRIZZO,LUNGHEZZABANCO-8
   INDIRIZZO+4
   Poke$ INDIRIZZO,"8SVXVHDR"
   INDIRIZZO+8
   Poke.l INDIRIZZO,20
   INDIRIZZO+4
   Poke.l INDIRIZZO,0
   INDIRIZZO+4
   Poke.l INDIRIZZO,LUNGHEZZASUONO
   INDIRIZZO+4
   Poke.l INDIRIZZO,0
   INDIRIZZO+4
   Poke.w INDIRIZZO,NUOVAFREQUENZA
   INDIRIZZO+2
   Poke.w INDIRIZZO,256
   INDIRIZZO+2
   Poke.w INDIRIZZO,256
   INDIRIZZO+2
   Poke.w INDIRIZZO,0
   INDIRIZZO+2
   If NuovoNomeDelSuono$<>""
    Poke$ INDIRIZZO,"NAME"
    INDIRIZZO+4
    Poke.l INDIRIZZO,LUNGHEZZANOME
    INDIRIZZO+4
    Poke$ INDIRIZZO,NuovoNomeDelSuono$
    INDIRIZZO+Len(NuovoNomeDelSuono$)
    If RESTONOME>0
     ZERIDOPONOME.b=4-RESTONOME
     Repeat
      Poke INDIRIZZO,0
      INDIRIZZO+1:ZERIDOPONOME-1
     Until ZERIDOPONOME=0
    EndIf
   EndIf
   Poke$ INDIRIZZO,"(C) "
   INDIRIZZO+4
   Poke.l INDIRIZZO,#LunghezzaProprieta
   INDIRIZZO+4
   Proprieta$="2008 EsseEmmeErre Software Solutions"
   Poke$ INDIRIZZO,Proprieta$
   INDIRIZZO+#LunghezzaProprieta
   Poke$ INDIRIZZO,"AUTH"
   INDIRIZZO+4
   Poke.l INDIRIZZO,#LunghezzaAutore
   INDIRIZZO+4
   Poke$ INDIRIZZO,Autore$+String$(Chr$(0),2)
   INDIRIZZO+#LunghezzaAutore
   Poke$ INDIRIZZO,"ANNO"
   INDIRIZZO+4
   Poke.l INDIRIZZO,#LunghezzaAnnotazioni
   INDIRIZZO+4
   Poke$ INDIRIZZO,"AmySequencer by "+Autore$+String$(Chr$(0),2)
   INDIRIZZO+#LunghezzaAnnotazioni
   Poke$ INDIRIZZO,"BODY"
   INDIRIZZO+4
   Poke.l INDIRIZZO,LUNGHEZZASUONO
   INDIRIZZO+4
   For BancoDelSuono.l=0 To LUNGHEZZASUONO-1
    Poke.b INDIRIZZO+BancoDelSuono,Peek.b(NUOVOINIZIOSUONO+BancoDelSuono)
   Next BancoDelSuono
   INDIRIZZO+LUNGHEZZASUONO+LunghezzaDispari
   If INDIRIZZO=Bank(#BancoDiConversione)+BankSize(#BancoDiConversione)
    TestoInvertitoECentrato{"Sound conversion from uncoded to AMIGA sound successful!",ULTIMALINEA}
    Delay_ 100
   Else
    FreeBank #BancoDiConversione
    TestoInvertitoECentrato{"Sound conversion from uncoded to AMIGA sound failed!",ULTIMALINEA}
    Delay_ 100
    PulisciLAreaDeiBottoniDellEditoreSuono{}
    Statement Return
   EndIf
   TestoInvertitoECentrato{"I am saving the AMIGA sound named",ULTIMALINEA-1}
   TestoInvertitoECentrato{Right$(Suono$,79),ULTIMALINEA}
   Delay_ 100
   SuonoSalvato.b=False
   SaveBank #BancoDiConversione,Suono$
   SuonoSalvato=True
   FreeBank #BancoDiConversione
  Else
   If LCase$(Right$(NuovoNomeDelSuono$,4))<>".raw"
    If LCase$(Right$(NuovoNomeDelSuono$,5))=".8svx" Then NuovoNomeDelSuono$=UnLeft$(NuovoNomeDelSuono$,5)
    If Len(NuovoNomeDelSuono$)>26 Then NuovoNomeDelSuono$=UnLeft$(NuovoNomeDelSuono$,4)
    NuovoNomeDelSuono$+".Raw"
   EndIf
   Suono$=NuovoPercorsoDelSuono$+NuovoNomeDelSuono$
   TestoInvertitoECentrato{"I am saving an uncoded sound named",ULTIMALINEA-1}
   TestoInvertitoECentrato{Right$(Suono$,79),ULTIMALINEA}
   Delay_ 100
   InitBank #BancoDiConversione,LUNGHEZZASUONO,#MemoriaFast
   For BancoDelSuono=0 To LUNGHEZZASUONO-1
    Poke.b Bank(#BancoDiConversione)+BancoDelSuono,Peek.b(NUOVOINIZIOSUONO+BancoDelSuono)
   Next BancoDelSuono
   SuonoSalvato=False
   SaveBank #BancoDiConversione,Suono$
   SuonoSalvato=True
   FreeBank #BancoDiConversione
  EndIf
  If SuonoSalvato=False
   TestoInvertitoECentrato{"Unsuccessful saving of the sound named",ULTIMALINEA-1}
   TestoInvertitoECentrato{Right$(Suono$,79),ULTIMALINEA}
   Delay_ 100
  Else
   TitoloFinestra$="Sound Editor-"+NuovoNomeDelSuono$:WTitle TitoloFinestra$,TitoloSchermo$
  EndIf
  PulisciLAreaDeiBottoniDellEditoreSuono{}
 EndIf
End Statement

;-----------------------------------------------------------------------------
;questa procedura cerca il valore di zero nel suono avanti od indietro vicino
;alla posizione indicata
;this procedure seeks the zero value inside the sound forward or backward near
;the stated position
;--------------------
Statement CercaLoZero{Direzione.b}
SHARED FINESUONO
SHARED INIZIOSUONO
SHARED POSIZIONEINGRANDIMENTO

;------------------------------------
;queste linee cercano lo zero avanti
;these lines look for the zero forward
;--------------------------------------
 If Direzione=#Avanti
  If POSIZIONEINGRANDIMENTO<FINESUONO
   Repeat
    POSIZIONEINGRANDIMENTO+1
    DATO.b=Peek.b(POSIZIONEINGRANDIMENTO)
   Until DATO=0 OR POSIZIONEINGRANDIMENTO=FINESUONO
  EndIf
 EndIf

;--------------------------------------
;queste linee cercano lo zero indietro
;these lines look for zero backward
;-----------------------------------
 If Direzione=#Indietro
  If POSIZIONEINGRANDIMENTO>INIZIOSUONO
   Repeat
    POSIZIONEINGRANDIMENTO-1
    DATO=Peek.b(POSIZIONEINGRANDIMENTO)
   Until DATO=0 OR POSIZIONEINGRANDIMENTO=INIZIOSUONO
  EndIf
 EndIf
End Statement

;-----------------------------------------------------------------------
;this procedure try to remove the direct current offset from the sample
;questa procedura cerca di rimuovere la componente continua dal campione
;------------------------------------------------------------------------
Statement CentraVerticalmenteSulloZero{}
SHARED BottonePremuto
SHARED NUOVAFINESUONO
SHARED NUOVOINIZIOSUONO
 LunghezzaSuono.l=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
 For Indirizzo.l=NUOVOINIZIOSUONO To NUOVAFINESUONO
  Dato.w=Peek.b(Indirizzo):ComponenteContinua.l+Dato
 Next Indirizzo
 ComponenteContinua/LunghezzaSuono
 If ComponenteContinua=0
  TestoPannello$="The offset is zero|Operation aborted"
  BottoniPannello$="OK"
 Else
  TestoPannello$="The offset is "+Str$(ComponenteContinua)+"|Do you wish to remove it?"
  BottoniPannello$="Yes|No"
 EndIf
 RichiestaPannello{"TITOLO",TestoPannello$,BottoniPannello$}
 If BottonePremuto=#Si
  For Indirizzo=INIZIOSUONO To FINESUONO
   Dato=Peek.b(Indirizzo):Dato-ComponenteContinua
   Dato=LimitiInteri{Dato,-128,127}:Poke.b Indirizzo,Dato
  Next Indirizzo
 EndIf
End Statement

;-------------------------------------------
;questa procedura disegna il suono caricato
;this procedure draws the loaded sample
;---------------------------------------
Statement MostraIlSuono{}
SHARED InizioLinee
SHARED LarghezzaInternaFinestraEditoreSuono
SHARED LUNGHEZZASUONO
SHARED NUOVAFINESUONO
SHARED NUOVOINIZIOSUONO
SHARED PASSO
SHARED Spazio$
SHARED XLINEAFINESUONO
SHARED XLINEAINIZIOSUONO
 WJam #DueColoriPieni

 WBox 0,0,639,63,0
 PASSO=LUNGHEZZASUONO/LarghezzaInternaFinestraEditoreSuono+1
 Wline 0,31,LarghezzaInternaFinestraEditoreSuono-1,31,#ColLinee
 X0.w=0:Y0.b=31:X1.w=1
 For INDIRIZZO.l=NUOVOINIZIOSUONO To NUOVAFINESUONO Step PASSO
  DATO.b=ConvertiOltreCentoventisetteInNegativo{Peek.b(INDIRIZZO)}
  Y1.b=31-DATO/4
  Wline X0,Y0,X1,Y1,#ColDati:X0=X1:Y0=Y1:X1+1
 Next INDIRIZZO
 InizioLinee=NUOVOINIZIOSUONO
 XLINEAINIZIOSUONO=0
 XLINEAFINESUONO=X1-1
End Statement

;---------------------------------------------------------------------
;questa procedura mostra le linee di inizio e fine del suono caricato
;this procedure shows the loaded sound start and end lines
;----------------------------------------------------------
Statement MostraLeLinee{}
SHARED XLINEAFINESUONO
SHARED XLINEAINIZIOSUONO
 WJam #SecondaVoltaStessiColori

 Wline XLINEAINIZIOSUONO,0,XLINEAINIZIOSUONO,63,#ColLinee
 Wline XLINEAFINESUONO,0,XLINEAFINESUONO,63,#ColLinee
End Statement

;-----------------------------------------------------------------------------
;questa procedura mostra i numeri di inizio, di fine e la lunghezza del suono
;caricato
;this procedure shows the begin, end and length numbers of the loaded sound
;---------------------------------------------------------------------------
Statement MostraINumeri{}
SHARED ANNOTAZIONI$
SHARED INIZIOSUONO
SHARED NUOVAFINESUONO
SHARED NUOVOINIZIOSUONO
SHARED Spazio$
 WJam #DueColoriPieni

 WColour 1,0
 WLocate 0,64:Print String$(Spazio$,80)
 WLocate 0,64
 Format "######"
 Print "Begin>"
 Print NUOVOINIZIOSUONO-INIZIOSUONO
 Print " End>"
 Print NUOVAFINESUONO-INIZIOSUONO
 Print " Length>"
 Print NUOVAFINESUONO-NUOVOINIZIOSUONO+1
 Format ""
 WColour #ColDati,0:Print Spazio$,Right$(ANNOTAZIONI$,43)
End Statement

;--------------------------------------------------------------------
;questa procedura disegna una porzione ingrandita del suono caricato
;this procedure draws a magnified portion of the loaded sound
;--------------------------------------------------------------
Statement MostraIngrandimentoDelSuono{}
SHARED ALTEZZA
SHARED FINESUONO
SHARED INIZIOINGRANDIMENTO
SHARED INIZIOSUONO
SHARED LarghezzaInternaFinestraEditoreSuono
SHARED NUOVAFINESUONO
SHARED NUOVOINIZIOSUONO
SHARED YPosIngrandimento
SHARED ZERO
 Use BitMap #AreaGraficaIngrandim:Cls
 Line LarghezzaInternaFinestraEditoreSuono-1,ZERO,0,ZERO,#ColLinee
 YPosIngrandimentoVisibile.w=(256-ALTEZZA)/2
 For X.w=0 To LarghezzaInternaFinestraEditoreSuono-1
  POSIZIONE.l=INIZIOINGRANDIMENTO+X
  If POSIZIONE>=INIZIOSUONO AND POSIZIONE<=FINESUONO
   DATO.b=ConvertiOltreCentoventisetteInNegativo{Peek.b(POSIZIONE)}
   Y.w=ZERO-DATO
   Line X,Y,#ColDati
  EndIf
  If POSIZIONE=NUOVOINIZIOSUONO
   Line X,0,X,255,#ColLinee
   Line X+2,YPosIngrandimentoVisibile,X+4,YPosIngrandimentoVisibile,#ColLinee
   Plot X+2,YPosIngrandimentoVisibile+1,#ColLinee:Plot X+4,YPosIngrandimentoVisibile+1,#ColLinee
   Line X+2,YPosIngrandimentoVisibile+2,X+6,YPosIngrandimentoVisibile+2,#ColLinee
   Plot X+2,YPosIngrandimentoVisibile+3,#ColLinee:Plot X+6,YPosIngrandimentoVisibile+3,#ColLinee
   Line X+2,YPosIngrandimentoVisibile+4,X+6,YPosIngrandimentoVisibile+4,#ColLinee
   Line X,Y,X,Y,ColoreDati
  EndIf
  If POSIZIONE=NUOVAFINESUONO
   Line X,0,X,255,#ColLinee
   Line X+2,YPosIngrandimentoVisibile,X+2,YPosIngrandimentoVisibile+4,#ColLinee
   Line X+2,YPosIngrandimentoVisibile,X+6,YPosIngrandimentoVisibile,#ColLinee
   Line X+2,YPosIngrandimentoVisibile+2,X+4,YPosIngrandimentoVisibile+2,#ColLinee
   Line X+2,YPosIngrandimentoVisibile+4,X+6,YPosIngrandimentoVisibile+4,#ColLinee
   Line X,Y,X,Y,ColoreDati
  EndIf
 Next X
 BitMaptoWindow #AreaGraficaIngrandim,#FinEditoreSuono,0,YPosIngrandimentoVisibile,0,YPosIngrandimento,InnerWidth,ALTEZZA
End Statement

;----------------------------------------------------------
;questa procedura imposta i bottoni dell'editore del suono
;this procedure sets the sounds editor buttons
;----------------------------------------------
Statement ImpostaIBottoniDellEditoreSuono{}
SHARED ALTEZZA
SHARED Bottoni()
SHARED LarghezzaInternaFinestraEditoreSuono
SHARED ULTIMALINEA
 ResetList Bottoni()
 Testo$="Frequency":X0.w=0:Y0.w=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1.w=Len(Testo$)*#GrandezzaFonteTopaz-1:Y1.w=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=1,X0,Y0,X1,Y1,Testo$
 Testo$="<<":X0=9*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y1+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=2,X0,Y0,X1,Y1,Testo$
 Testo$=">>":X0=11*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=3,X0,Y0,X1,Y1,Testo$
 Testo$="SampleMix":X0=21*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=4,X0,Y0,X1,Y1,Testo$
 Testo$="MarkOnTheFly":X0=31*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=5,X0,Y0,X1,Y1,Testo$
 Testo$="CentreOnZero":X0=44*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=6,X0,Y0,X1,Y1,Testo$
 Testo$="Load":X0=75*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-2)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=7,X0,Y0,X1,Y1,Testo$
 Testo$="Play":X0=0:Y0=(ULTIMALINEA-1)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=8,X0,Y0,X1,Y1,Testo$
 Testo$="Filter":X0=5*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-1)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=9,X0,Y0,X1,Y1,Testo$
 Testo$="Save":X0=75*#GrandezzaFonteTopaz:Y0=(ULTIMALINEA-1)*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=10,X0,Y0,X1,Y1,Testo$
 Testo$="Stop":X0=0:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=11,X0,Y0,X1,Y1,Testo$
 Testo$="Loop":X0=5*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=12,X0,Y0,X1,Y1,Testo$
 Testo$="Create":X0=12*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=13,X0,Y0,X1,Y1,Testo$
 Testo$="All":X0=19*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=14,X0,Y0,X1,Y1,Testo$
 Testo$="Between":X0=23*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=15,X0,Y0,X1,Y1,Testo$
 Testo$="Begin":X0=31*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=16,X0,Y0,X1,Y1,Testo$
 Testo$="End":X0=37*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=17,X0,Y0,X1,Y1,Testo$
 Testo$="<Backward":X0=41*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=18,X0,Y0,X1,Y1,Testo$
 Testo$="Forward>":X0=51*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=19,X0,Y0,X1,Y1,Testo$
 Testo$="Exit":X0=75*#GrandezzaFonteTopaz:Y0=ULTIMALINEA*#GrandezzaFonteTopaz
 X1=X0+Len(Testo$)*#GrandezzaFonteTopaz-1:Y1=Y0+7
 If AddItem(Bottoni())=True Then Bottoni()\Numero=20,X0,Y0,X1,Y1,Testo$

 X0=0:Y0=0:X1=LarghezzaInternaFinestraEditoreSuono-1:Y1=63:Testo$="Sample"
 If AddItem(Bottoni())=True Then Bottoni()\Numero=21,X0,Y0,X1,Y1,Testo$
 X0=0:Y0=72:X1=LarghezzaInternaFinestraEditoreSuono-1:Y1=72+ALTEZZA:Testo$="Magnification"
 If AddItem(Bottoni())=True Then Bottoni()\Numero=22,X0,Y0,X1,Y1,Testo$
End Statement

;------------------------------------
;questa procedura cancella i bottoni
;this procedure deletes the buttons
;-----------------------------------
Statement CancellaIBottoni{}
SHARED Bottoni()
 ResetList Bottoni()
 While NextItem(Bottoni())=True
  KillItem Bottoni()
 Wend
End Statement

;------------------------------------------------------------
;this procedure finds the closest frequency to that of sound
;questa procedura trova la frequenza piu' vicina a quella del suono
;-------------------------------------------------------------------
Statement TrovaLaFrequenzaDelSuono{}
SHARED FREQUENZA
SHARED Nota
SHARED NuovaNota
SHARED PeriFreq()
 For NuovaNota=127 To 0 Step -1
  DistanzaFrequenza.w=PeriFreq(NuovaNota)\Frequenza-FREQUENZA
  If DistanzaFrequenza>=0 Then Nota=NuovaNota
 Next NuovaNota
 SetPeriod #SuonoEditato,PeriFreq(Nota)\Periodo
 FREQUENZA=PeriFreq(Nota)\Frequenza
 NuovaNota=Nota
End Statement

;---------------------------------------------------------
;questa procedura mostra i bottoni dell'editore del suono
;this procedure shows the sound editor buttons
;----------------------------------------------
Statement MostraIBottoniDellEditoreSuono{Zona.b}
SHARED CICLO
SHARED INIZIO
SHARED INIZIOSUONO
SHARED NIENTEFILTRO
SHARED NUOVAFREQUENZA
SHARED NuovaNota
SHARED Spazio$
SHARED TipoDiNota()
SHARED ULTIMALINEA
 If Zona=1 Then ColoreBottone.b=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Frequency",0,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=2 AND NuovaNota>#_MiddleC Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"<<",9*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=3 AND NuovaNota<120 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{">>",11*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 WColour #ColAcquamarina+#Scuro,#ColSfondo
 Format "#####":WLocate 13*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz:Print NUOVAFREQUENZA:Format "":Print "Hz"
 NomeDellaNota$=TipoDiNota(NuovaNota)\NomeInglese
 NomeDellOttavaDellaNota$=UStr$(TipoDiNota(NuovaNota)\Ottava)
 Nota$=NomeDellaNota$+NomeDellOttavaDellaNota$
 Nota$=String$(Spazio$,5-Len(Nota$))+Nota$
 WLocate 13*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz:Print Nota$

 If Zona=4 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"SampleMix",21*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=5 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"MarkOnTheFly",31*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=6 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"CentreOnZero",44*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=7 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Load",75*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=8 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Play",0,(ULTIMALINEA-1)*#GrandezzaFonteTopaz,ColoreBottone}

 If NIENTEFILTRO=Off Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Filter",5*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz,ColoreBottone}

 WColour 1,0
 WLocate 19*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz:Print "Show sample"
 WLocate 31*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz:Print "Position"
 WLocate 46*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz:Print "Seek zero"

 If Zona=10 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Save",75*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=11 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Stop",0,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If CICLO=On Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Loop",5*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=13 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Create",12*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=14 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"All",19*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=15 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Between",23*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If INIZIO=True AND INIZIOSUONO>0 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Begin",31*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If INIZIO=False AND INIZIOSUONO>0 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"End",37*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=18 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"<Backward",41*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=19 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Forward>",51*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}

 If Zona=20 Then ColoreBottone=#ColAcquamarina Else ColoreBottone=#ColSfondo
 DisegnaBottone{"Exit",75*#GrandezzaFonteTopaz,ULTIMALINEA*#GrandezzaFonteTopaz,ColoreBottone}
End Statement

;-----------------------------------------------------------------------
;questa procedura gestisce le azioni dei bottoni dell'editore dei suoni
;this procedure manages the sound editor button actions
;-------------------------------------------------------
Statement GestisciIBottoniDellEditoreSuono{Zona.b,TastiDelTopo.b}
SHARED AltezzaInternaFinestraEditoreSuono
SHARED ANNOTAZIONI$
SHARED Autore$
SHARED CICLO
SHARED FINESUONO
SHARED FREQUENZA
SHARED INIZIO
SHARED INIZIOINGRANDIMENTO
SHARED InizioLinee
SHARED INIZIOSUONO
SHARED LarghezzaInternaFinestraEditoreSuono
SHARED LUNGHEZZASUONO
SHARED NIENTEFILTRO
SHARED Nota
SHARED NUOVAFINESUONO
SHARED NUOVAFREQUENZA
SHARED NuovaNota
SHARED NUOVOINIZIOSUONO
SHARED PASSO
SHARED PeriFreq()
SHARED POSIZIONEINGRANDIMENTO
SHARED Spazio$
SHARED TipoDiNota()
SHARED ULTIMALINEA
SHARED XLINEAFINESUONO
SHARED XLINEAINIZIOSUONO
 MessaggioPannello$="You must load the sound first"
 Select Zona
 Case 1
  NuovaNota=Nota
  NUOVAFREQUENZA=FREQUENZA
  If INIZIOSUONO>0 Then SetPeriod #SuonoEditato,PeriFreq(NuovaNota)\Periodo
 Case 2
  If NuovaNota>#_MiddleC
   NuovaNota-1:NUOVAFREQUENZA=PeriFreq(NuovaNota)\Frequenza
   If INIZIOSUONO>0 Then SetPeriod #SuonoEditato,PeriFreq(NuovaNota)\Periodo
   While Joyb(0)>#NessunTastoDelTopoPremuto AND NuovaNota>#_MiddleC
    NuovaNota-1:NUOVAFREQUENZA=PeriFreq(NuovaNota)\Frequenza
    If INIZIOSUONO>0 Then SetPeriod #SuonoEditato,PeriFreq(NuovaNota)\Periodo
    WColour #ColAcquamarina+#Scuro,0
    Format "#####":WLocate 13*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz:Print NUOVAFREQUENZA:Format ""
    NomeDellaNota$=TipoDiNota(NuovaNota)\NomeInglese
    NomeDellOttavaDellaNota$=UStr$(TipoDiNota(NuovaNota)\Ottava)
    Nota$=NomeDellaNota$+NomeDellOttavaDellaNota$
    Nota$=String$(Spazio$,5-Len(Nota$))+Nota$
    WLocate 13*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz:Print Nota$
    Delay_ 25
   Wend
  EndIf
 Case 3
  If NuovaNota<117
   NuovaNota+1:NUOVAFREQUENZA=PeriFreq(NuovaNota)\Frequenza
   If INIZIOSUONO>0 Then SetPeriod #SuonoEditato,PeriFreq(NuovaNota)\Periodo
   While Joyb(0)>#NessunTastoDelTopoPremuto AND NuovaNota<117
    NuovaNota+1:NUOVAFREQUENZA=PeriFreq(NuovaNota)\Frequenza
    If INIZIOSUONO>0 Then SetPeriod #SuonoEditato,PeriFreq(NuovaNota)\Periodo
    WColour #ColAcquamarina+#Scuro,0
    Format "#####":WLocate 13*#GrandezzaFonteTopaz,(ULTIMALINEA-2)*#GrandezzaFonteTopaz:Print NUOVAFREQUENZA:Format ""
    NomeDellaNota$=TipoDiNota(NuovaNota)\NomeInglese
    NomeDellOttavaDellaNota$=UStr$(TipoDiNota(NuovaNota)\Ottava)
    Nota$=NomeDellaNota$+NomeDellOttavaDellaNota$
    Nota$=String$(Spazio$,5-Len(Nota$))+Nota$
    WLocate 13*#GrandezzaFonteTopaz,(ULTIMALINEA-1)*#GrandezzaFonteTopaz:Print Nota$
    Delay_ 25
   Wend
  EndIf
 Case 6
  If INIZIOSUONO>0
   CentraVerticalmenteSulloZero{}
   NUOVOINIZIOSUONO=INIZIOSUONO
   NUOVAFINESUONO=FINESUONO
   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraIlSuono{}
   MostraLeLinee{}
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   If INIZIO=True
    POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
   Else
    POSIZIONEINGRANDIMENTO=NUOVAFINESUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
   EndIf

   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 7
  If INIZIOSUONO>0 Then Sound #SuonoEditato,%0011,0,0
  CaricaUnSuono{}
  NUOVOINIZIOSUONO=INIZIOSUONO
  NUOVAFINESUONO=FINESUONO
  MostraIlSuono{}
  MostraLeLinee{}
  MostraINumeri{}

  If INIZIO=True
   POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO
   INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
  Else
   POSIZIONEINGRANDIMENTO=NUOVAFINESUONO
   INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
  EndIf

  MostraIngrandimentoDelSuono{}
  PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
  MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  TrovaLaFrequenzaDelSuono{}
  NUOVAFREQUENZA=FREQUENZA
  If ANNOTAZIONI$="" Then ANNOTAZIONI$="AmySequencer by "+Autore$
 Case 8
  If INIZIOSUONO>0
   If CICLO=On
    LoopSound #SuonoEditato,%0011,64,64
   Else
    Sound #SuonoEditato,%0011,64,64
   EndIf
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 9
  NIENTEFILTRO=NOT NIENTEFILTRO:Filter NIENTEFILTRO
 Case 10
  If INIZIOSUONO>0 Then Sound #SuonoEditato,%0011,0,0:SalvaIlSuono{}
 Case 11
  If INIZIOSUONO>0 Then Sound #SuonoEditato,%0011,0,0
 Case 12
  If INIZIOSUONO>0 Then Sound #SuonoEditato,%0011,0,0:CICLO=NOT CICLO
 Case 14
  If INIZIOSUONO>0
   NUOVOINIZIOSUONO=INIZIOSUONO
   NUOVAFINESUONO=FINESUONO
   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraIlSuono{}
   MostraLeLinee{}
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   If INIZIO=True
    POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
   Else
    POSIZIONEINGRANDIMENTO=NUOVAFINESUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
   EndIf

   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  EndIf
 Case 15
  If INIZIOSUONO>0
   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraIlSuono{}
   MostraLeLinee{}
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   If INIZIO=True
    POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
   Else
    POSIZIONEINGRANDIMENTO=NUOVAFINESUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
   EndIf

   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 16
  If INIZIOSUONO>0
   INIZIO=True
   POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO
   INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 17
  If INIZIOSUONO>0
   INIZIO=False
   POSIZIONEINGRANDIMENTO=NUOVAFINESUONO
   INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 18
  If INIZIOSUONO>0
   CercaLoZero{#Indietro}

   MostraLeLinee{}
   If INIZIO=True
    If POSIZIONEINGRANDIMENTO<INIZIOSUONO Then POSIZIONEINGRANDIMENTO=INIZIOSUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
    XLINEAINIZIOSUONO=(POSIZIONEINGRANDIMENTO-InizioLinee)/PASSO
   Else
    If POSIZIONEINGRANDIMENTO<NUOVOINIZIOSUONO+8 Then POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO+8
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+8
    NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
    XLINEAFINESUONO=(POSIZIONEINGRANDIMENTO-InizioLinee)/PASSO
   EndIf
   MostraLeLinee{}

   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 19
  If INIZIOSUONO>0
   CercaLoZero{#Avanti}

   MostraLeLinee{}
   If INIZIO=True
    If POSIZIONEINGRANDIMENTO>NUOVAFINESUONO-8 Then POSIZIONEINGRANDIMENTO=NUOVAFINESUONO-8
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
    XLINEAINIZIOSUONO=(POSIZIONEINGRANDIMENTO-InizioLinee)/PASSO
   Else
    If POSIZIONEINGRANDIMENTO>FINESUONO Then POSIZIONEINGRANDIMENTO=FINESUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+8
    NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
    XLINEAFINESUONO=(POSIZIONEINGRANDIMENTO-InizioLinee)/PASSO
   EndIf
   MostraLeLinee{}

   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 21
  If INIZIOSUONO>0
   MostraLeLinee{}

   XLinea.w=WMouseX
   Select TastiDelTopo

;left mouse button pressed
   Case #TastoSinistroDelTopoPremuto

    XLINEAINIZIOSUONO=XLinea
    If XLINEAINIZIOSUONO>XLINEAFINESUONO-1 Then XLINEAINIZIOSUONO=XLINEAFINESUONO-1
    NUOVOINIZIOSUONO=INIZIOSUONO+XLINEAINIZIOSUONO*PASSO
    If NUOVOINIZIOSUONO>NUOVAFINESUONO-8 Then NUOVOINIZIOSUONO=NUOVAFINESUONO-8
    POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    INIZIO=True

;right mouse button pressed
   Case #TastoDestroDelTopoPremuto

    If XLinea>LarghezzaInternaFinestraEditoreSuono-1 Then XLinea=LarghezzaInternaFinestraEditoreSuono-1
    XLINEAFINESUONO=XLinea
    If XLINEAFINESUONO<XLINEAINIZIOSUONO+1 Then XLINEAFINESUONO=XLINEAINIZIOSUONO+1
    NUOVAFINESUONO=INIZIOSUONO+XLINEAFINESUONO*PASSO
    If NUOVAFINESUONO<NUOVOINIZIOSUONO+8 Then NUOVAFINESUONO=NUOVOINIZIOSUONO+8
    POSIZIONEINGRANDIMENTO=NUOVAFINESUONO
    INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
    INIZIO=False
   End Select

   MostraLeLinee{}

   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   MostraIngrandimentoDelSuono{}
   PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
   MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 Case 22
  If INIZIOSUONO>0
   MostraLeLinee{}
   XLinea=WMouseX

   If INIZIO=True
    If XLINEAINIZIOSUONO+1<XLINEAFINESUONO
     POSIZIONEINGRANDIMENTO+XLinea
     NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
     If NUOVOINIZIOSUONO>NUOVAFINESUONO-8 Then NUOVOINIZIOSUONO=NUOVAFINESUONO-8
     XLINEAINIZIOSUONO=(NUOVOINIZIOSUONO-INIZIOSUONO)/PASSO
     XLINEAINIZIOSUONO=LimitiInteri{XLINEAINIZIOSUONO,0,XLINEAFINESUONO-1}
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    EndIf
   Else
    If XLINEAFINESUONO-1>XLINEAINIZIOSUONO
     POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9+XLinea
     If POSIZIONEINGRANDIMENTO>FINESUONO Then POSIZIONEINGRANDIMENTO=FINESUONO
     NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
     If NUOVAFINESUONO<NUOVOINIZIOSUONO+8 Then NUOVAFINESUONO=NUOVOINIZIOSUONO+8
     XLINEAFINESUONO=(NUOVAFINESUONO-INIZIOSUONO)/PASSO
     XLINEAFINESUONO=LimitiInteri{XLINEAFINESUONO,XLINEAINIZIOSUONO+1,LarghezzaInternaFinestraEditoreSuono}
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+9
    EndIf
   EndIf

   MostraLeLinee{}

   LUNGHEZZASUONO=NUOVAFINESUONO-NUOVOINIZIOSUONO+1
   MostraINumeri{}
   CreaIlSuono{NUOVOINIZIOSUONO}

   If INIZIO=True AND XLINEAINIZIOSUONO+1<XLINEAFINESUONO Then MostraIngrandimento.b=True
   If INIZIO=False AND XLINEAFINESUONO-1>XLINEAINIZIOSUONO Then MostraIngrandimento=True
   If MostraIngrandimento=True
    MostraIngrandimentoDelSuono{}
    PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
   EndIf
  Else
   RichiestaPannello{"TITOLO",MessaggioPannello$,"OK"}
  EndIf
 End Select
End Statement

;-----------------------------------------------------------------------------
;questa procedura permette di modificare i suoni AMIGA da usare col programma
;this procedure allows to modify the AMIGA sounds to use by the program
;-----------------------------------------------------------------------
Statement EditoreSuono{}
SHARED AltezzaInternaFinestraEditoreSuono
SHARED AltezzaSchermo
SHARED ANNOTAZIONI$
SHARED Bottoni()
SHARED FINESUONO
SHARED INIZIO
SHARED INIZIOINGRANDIMENTO
SHARED INIZIOSUONO
SHARED LarghezzaInternaFinestraEditoreSuono
SHARED LarghezzaSchermo
SHARED LUNGHEZZASUONO
SHARED NUOVAFINESUONO
SHARED NUOVAFREQUENZA
SHARED NUOVOINIZIOSUONO
SHARED PASSO
SHARED POSIZIONEINGRANDIMENTO
SHARED TastoCursoreDestra$
SHARED TastoCursoreGiu$
SHARED TastoCursoreSinistra$
SHARED TastoCursoreSu$
SHARED TastoFuga$
SHARED TitoloSchermo$
SHARED ULTIMALINEA
SHARED XLINEAFINESUONO
SHARED XLINEAINIZIOSUONO
SHARED XLunBarra
SHARED YBARRAINGRANDIM
SHARED YLunBarra
SHARED YPosIngrandimento
 TitoloFinestra$="Sound Editor"
 XPosFin.b=0:YPosFin.b=#AltezzaBarreTitoli:XLunFin.w=LarghezzaSchermo:YLunFin.w=AltezzaSchermo-#AltezzaBarreTitoli
 TipoFin.l=#BottoneChiudiFinestra+#FinestraConMemoriaBordi+#FinestraAttivata
 Window #FinEditoreSuono,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,TitoloFinestra$,1,2
 WTitle TitoloFinestra$,TitoloSchermo$
 LarghezzaInternaFinestraEditoreSuono=InnerWidth
 AltezzaInternaFinestraEditoreSuono=InnerHeight
 CloseWindow #FinEditoreSuono


;---------------------------------------------------------------------
;imposta la barra di scorrimento che serve per sportarsi nell'area di
;Ingrandimento del suono
;sets the slider that is used to move in the sound magnification area
;---------------------------------------------------------------------
 XLunBarra=LarghezzaInternaFinestraEditoreSuono
 YLunBarra=8
 ImpostaBarra{#BarraIngrandimento,0,YBARRAINGRANDIM,"HORIZONTAL",0,#ListaBottoniEditoreSuono}

 Window #FinEditoreSuono,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,TitoloFinestra$,1,2,#ListaBottoniEditoreSuono
 WTitle TitoloFinestra$,TitoloSchermo$
 WindowFont #FonteTopaz8

;-----------------------------------------------------------------
;disabilita i menu rendendo disponibile il tasto destro del mouse
;disables the menu giving available the right mouse button
;----------------------------------------------------------
 MenusOff

 ULTIMALINEA=AltezzaInternaFinestraEditoreSuono/8-1

 If YPosIngrandimento=0

;---------------------------------------------
;crea la bitmap per l'Ingrandimento dei suoni
;creates the sounds magnification bitmap
;----------------------------------------
  BitMap #AreaGraficaIngrandim,LarghezzaInternaFinestraEditoreSuono,256,#SediciColori

  YPosIngrandimento=64+8
 EndIf

 ImpostaIBottoniDellEditoreSuono{}

 If INIZIOSUONO>0
  PosBarra.l=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
  MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
 EndIf

 Repeat
  If SecondoClicDelTopo.b=False
   MostraIBottoniDellEditoreSuono{0}
   If INIZIOSUONO>0
    Enable #ListaBottoniEditoreSuono,#BarraIngrandimento
   Else
    Disable #ListaBottoniEditoreSuono,#BarraIngrandimento
   EndIf
   Redraw #FinEditoreSuono,#BarraIngrandimento
   SecondoClicDelTopo=True
  EndIf

  EventoFinestraEditoreSuono.l=WaitEvent

  Select EventoFinestraEditoreSuono
  Case #HaiPremutoUnTastoDelTopo
   TastiDelTopo.b=MButtons:XTopo.w=WMouseX:YTopo.w=WMouseY:Zona.b=0
   ResetList Bottoni()
   While NextItem(Bottoni())=True
    If YTopo>=Bottoni()\Y0 AND YTopo<=Bottoni()\Y1
     If XTopo>=Bottoni()\X0 AND XTopo<=Bottoni()\X1
      Zona=Bottoni()\Numero
     EndIf
    EndIf
   Wend
   Select TastiDelTopo
   Case #TastoSinistroDelTopoPremuto
    If Zona=20 Then EsciDallEditoreSuono.b=True
    If Zona>0
     MostraIBottoniDellEditoreSuono{Zona}
     GestisciIBottoniDellEditoreSuono{Zona,TastiDelTopo}
     SecondoClicDelTopo=False
    Else
     SecondoClicDelTopo=True
    EndIf
   Case #TastoDestroDelTopoPremuto
    If Zona=20 Then EsciDallEditoreSuono=True
    If Zona>0
     MostraIBottoniDellEditoreSuono{Zona}
     GestisciIBottoniDellEditoreSuono{Zona,TastiDelTopo}
     SecondoClicDelTopo=False
    Else
     SecondoClicDelTopo=True
    EndIf
   End Select
  Case #HaiPremutoUnBottone
   If GadgetHit=#BarraIngrandimento
    VALOREMASSIMO.l=LUNGHEZZASUONO/PASSO
    POSIZIONEINGRANDIMENTO=ValoreBarra{#BarraIngrandimento,VALOREMASSIMO,InnerWidth,"HORIZONTAL",#ListaBottoniEditoreSuono}
    POSIZIONEINGRANDIMENTO*PASSO+INIZIOSUONO
    If POSIZIONEINGRANDIMENTO+LarghezzaInternaFinestraEditoreSuono+8>FINESUONO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono-8
    Else
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    EndIf
    MostraIngrandimentoDelSuono{}
    SecondoClicDelTopo=False
   EndIf
  Case #HaiRilasciatoUnBottone
   If GadgetHit=#BarraIngrandimento
    VALOREMASSIMO=LUNGHEZZASUONO/PASSO
    POSIZIONEINGRANDIMENTO=ValoreBarra{#BarraIngrandimento,VALOREMASSIMO,InnerWidth,"HORIZONTAL",#ListaBottoniEditoreSuono}
    POSIZIONEINGRANDIMENTO*PASSO+INIZIOSUONO
    If POSIZIONEINGRANDIMENTO+LarghezzaInternaFinestraEditoreSuono+8>FINESUONO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono-8
    Else
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    EndIf
    MostraIngrandimentoDelSuono{}
    SecondoClicDelTopo=False
   Else
    SecondoClicDelTopo=True
   EndIf
  Case #HaiChiusoLaFinestra
   EsciDallEditoreSuono=True
  Case #HaiPremutoUnTasto
   TastoPremuto$=LCase$(Inkey$)
   Select TastoPremuto$
   Case TastoFuga$
    EsciDallEditoreSuono=True
   Case TastoCursoreSu$
    MostraLeLinee{}
    If INIZIO=True Then XLinea.w=XLINEAINIZIOSUONO Else XLinea=XLINEAFINESUONO
    XLinea-1:If XLinea<0 Then XLinea=0
    POSIZIONEINGRANDIMENTO=INIZIOSUONO+XLinea*PASSO
    If INIZIO=True
     XLINEAINIZIOSUONO=XLinea
     NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    Else
     If XLinea<XLINEAINIZIOSUONO+1 Then XLinea=XLINEAINIZIOSUONO+1
     XLINEAFINESUONO=XLinea
     If POSIZIONEINGRANDIMENTO<NUOVOINIZIOSUONO+8 Then POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO+8
     NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+8
    EndIf
    MostraLeLinee{}
    WJam #DueColoriPieni
    CreaIlSuono{NUOVOINIZIOSUONO}
    MostraINumeri{}
    MostraIngrandimentoDelSuono{}
    PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
   Case TastoCursoreGiu$
    MostraLeLinee{}
    If INIZIO=True Then XLinea=XLINEAINIZIOSUONO Else XLinea=XLINEAFINESUONO
    XLinea+1:If XLinea>LarghezzaInternaFinestraEditoreSuono-1 Then XLinea=LarghezzaInternaFinestraEditoreSuono-1
    POSIZIONEINGRANDIMENTO=INIZIOSUONO+XLinea*PASSO
    If POSIZIONEINGRANDIMENTO>FINESUONO Then POSIZIONEINGRANDIMENTO=FINESUONO
    If INIZIO=True
     If XLinea>XLINEAFINESUONO-1 Then XLinea=XLINEAFINESUONO-1
     XLINEAINIZIOSUONO=XLinea
     If POSIZIONEINGRANDIMENTO>NUOVAFINESUONO-8 Then POSIZIONEINGRANDIMENTO=NUOVAFINESUONO-8
     NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    Else
     XLINEAFINESUONO=XLinea
     NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+8
    EndIf
    MostraLeLinee{}
    WJam #DueColoriPieni
    CreaIlSuono{NUOVOINIZIOSUONO}
    MostraINumeri{}
    MostraIngrandimentoDelSuono{}
    PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
   Case TastoCursoreDestra$
    MostraLeLinee{}
    If INIZIO=True Then XLinea=XLINEAINIZIOSUONO Else XLinea=XLINEAFINESUONO
    POSIZIONEINGRANDIMENTO+LarghezzaInternaFinestraEditoreSuono
    If POSIZIONEINGRANDIMENTO>FINESUONO Then POSIZIONEINGRANDIMENTO=FINESUONO
    XLinea=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    If INIZIO=True
     If XLinea>XLINEAFINESUONO-1 Then XLinea=XLINEAFINESUONO-1
     XLINEAINIZIOSUONO=XLinea
     If POSIZIONEINGRANDIMENTO>NUOVAFINESUONO-8 Then POSIZIONEINGRANDIMENTO=NUOVAFINESUONO-8
     NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    Else
     XLINEAFINESUONO=XLinea
     NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+8
    EndIf
    MostraLeLinee{}
    WJam #DueColoriPieni
    CreaIlSuono{NUOVOINIZIOSUONO}
    MostraINumeri{}
    MostraIngrandimentoDelSuono{}
    PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
   Case TastoCursoreSinistra$
    MostraLeLinee{}
    If INIZIO=True Then XLinea=XLINEAINIZIOSUONO Else XLinea=XLINEAFINESUONO
    POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono
    If POSIZIONEINGRANDIMENTO<INIZIOSUONO Then POSIZIONEINGRANDIMENTO=INIZIOSUONO
    XLinea=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    If INIZIO=True
     XLINEAINIZIOSUONO=XLinea
     NUOVOINIZIOSUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO
    Else
     If XLinea<XLINEAINIZIOSUONO+1 Then XLinea=XLINEAINIZIOSUONO+1
     XLINEAFINESUONO=XLinea
     If POSIZIONEINGRANDIMENTO<NUOVOINIZIOSUONO+8 Then POSIZIONEINGRANDIMENTO=NUOVOINIZIOSUONO+8
     NUOVAFINESUONO=POSIZIONEINGRANDIMENTO
     INIZIOINGRANDIMENTO=POSIZIONEINGRANDIMENTO-LarghezzaInternaFinestraEditoreSuono+8
    EndIf
    MostraLeLinee{}
    WJam #DueColoriPieni
    CreaIlSuono{NUOVOINIZIOSUONO}
    MostraINumeri{}
    MostraIngrandimentoDelSuono{}
    PosBarra=(POSIZIONEINGRANDIMENTO-INIZIOSUONO)/PASSO
    MostraBarra{#BarraIngrandimento,PosBarra,LUNGHEZZASUONO/PASSO,"HORIZONTAL",#ListaBottoniEditoreSuono,#FinEditoreSuono}
   End Select
  End Select

  FlushEvents
 Until EsciDallEditoreSuono=True

 CancellaIBottoni{}

 FreeBank #BancoDelSuono
 Free Sound #SuonoEditato
 CloseWindow #FinEditoreSuono
 Use Window #FinGestoreSuoni

;-------------------------------------------------------------------------
;abilita i menu cosi' il tasto destro del mouse non puo' essere usato per
;altro
;enables the menu so the right mouse button cannot be used for something else
;-----------------------------------------------------------------------------
 MenusOn

 ANNOTAZIONI$=""
 INIZIOSUONO=0
End Statement

Statement EliminaIlSuonoSelezionato{}
SHARED CanaliAttivati
SHARED SuoniCaricati
SHARED Suono()
SHARED SuonoIndicatoDalTopo
 If SuoniCaricati>0
  If SuonoIndicatoDalTopo>=0 AND SuonoIndicatoDalTopo<SuoniCaricati
   Free Sound SuonoIndicatoDalTopo
   Suono.b=SuonoIndicatoDalTopo
   Suono(Suono)\Nome=""
   While Suono+1<SuoniCaricati
    Suono(Suono)\Nome=Suono(Suono+1)\Nome
    Suono(Suono)\Canale=Suono(Suono+1)\Canale
    Suono+1
   Wend
   Suono(SuonoIndicatoDalTopo)\Nome=""
   CanaliAttivati BitClr (Suono(SuonoIndicatoDalTopo)\Canale-1)
   Suono(SuonoIndicatoDalTopo)\Canale=0
   SuonoIndicatoDalTopo=-1
   SuoniCaricati-1
  Else
   RichiestaPannello{"TITOLO","You must select a sound first","OK"}
  EndIf
 Else
  RichiestaPannello{"TITOLO","You must load a sound first","OK"}
 EndIf
End Statement

;-------------------------------------------------------------------
;questa procedura mostra la finestra di aiuto del gestore dei suoni
;this procedure shows the sounds manager help requester
;-------------------------------------------------------
Statement MostraITastiDaUsareNelGestoreSuoni{}
 MostraITastiDaUsareNelGestoreSuoni$="Left mouse button:|"
 MostraITastiDaUsareNelGestoreSuoni$+" changes the sound channel or select existing sound|"
 MostraITastiDaUsareNelGestoreSuoni$+"Backspace key:                                     |"
 MostraITastiDaUsareNelGestoreSuoni$+" deletes the selected sound                        |"
 MostraITastiDaUsareNelGestoreSuoni$+"Esc key:                                           |"
 MostraITastiDaUsareNelGestoreSuoni$+" leaves the sounds manager                         "
 RichiestaPannello{"AIUTO",MostraITastiDaUsareNelGestoreSuoni$,"OK"}
End Statement

;------------------------------------------------------------------
;questa procedura gestisce i suoni AMIGA da usare con il programma
;this procedure manages AMIGA sounds to use by the program
;----------------------------------------------------------
Statement GestoreSuoni{}
SHARED AltezzaSchermo
SHARED CanaliAttivati
SHARED ErroreDiCaricamentoDelSuono
SHARED LarghezzaSchermo
SHARED NomeDelSuono$
SHARED PercorsoDelSuono$
SHARED Spazio$
SHARED SuoniCaricati
SHARED Suono$
SHARED Suono()
SHARED SuonoIndicatoDalTopo
SHARED TastoIndietro$
SHARED TastoFuga$
SHARED TitoloSchermo$
SHARED XLunBarra
SHARED YLunBarra
 WJam #DueColoriPieni

 Free MenuList #ListaMenuGestoreSuoni

;-----------------------------------------------------------
;imposta il colore del testo nel menu' ad acquamarina scuro
;sets the menu text colour to dark cyan
;---------------------------------------
 MenuColour #ColAcquamarina+#Scuro

 MenuTitle #ListaMenuGestoreSuoni,0,"Sound"
 MenuItem #ListaMenuGestoreSuoni,0,0,#CaricaUnSuono,"Load"
 MenuItem #ListaMenuGestoreSuoni,0,0,#EditaIlSuono,"Edit"
 MenuItem #ListaMenuGestoreSuoni,0,0,#EliminaIlSuono,"Delete"

 MenuTitle #ListaMenuGestoreSuoni,1,"Help"
 MenuItem #ListaMenuGestoreSuoni,0,1,0,"Keys to use"

 XPosFin.b=0:YPosFin.b=#AltezzaBarreTitoli:XLunFin.w=LarghezzaSchermo:YLunFin.w=AltezzaSchermo-#AltezzaBarreTitoli
 TipoFin.l=#BottoneChiudiFinestra+#FinestraConMemoriaBordi+#FinestraAttivata
 Window #FinGestoreSuoni,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,"Sounds Manager",1,2
 WTitle "Sounds Manager",TitoloSchermo$
 LarghezzaInternaFinestraGestoreSuoni.w=InnerWidth
 AltezzaInternaFinestraGestoreSuoni.w=InnerHeight
 CloseWindow #FinGestoreSuoni

;-------------------------------------------------------------------------------
;imposta la barra di scorrimento che serve per visualizzare i suoni disponibili
;sets the slider that is used to show the available sounds
;----------------------------------------------------------
 XLunBarra=16
 YLunBarra=AltezzaInternaFinestraGestoreSuoni
 ImpostaBarra{#BarraGestoreSuoni,LarghezzaInternaFinestraGestoreSuoni-16,0,"VERTICAL",0,#ListaBottoniGestoreSuoni}

 Window #FinGestoreSuoni,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,"",1,2,#ListaBottoniGestoreSuoni
 WTitle "Sounds Manager",TitoloSchermo$
 WindowFont #FonteTopaz8

;-------------------------------
;attacca il menu' alla finestra
;attaches menu to window
;------------------------
 SetMenu #ListaMenuGestoreSuoni

;-----------------------------------
;sounds window's displacement start
;-----------------------------------
 InizioSuoni.b=0

;------------------------
;maximum strings length
;------------------------
 LunghezzaMassimaStringhe.b=(LarghezzaInternaFinestraGestoreSuoni-16)/8

;---------------------------------
;stated by mouse new sound number
;---------------------------------
 NuovoSuonoIndicatoDalTopo.b=-1

;-------------------------------------------------------------------------
;imposta la barra di scorrimento della velocita' di esecuzione delle note
;sets the notes execution velocity slider
;-----------------------------------------
 MostraBarra{#BarraGestoreSuoni,InizioSuoni,2,"VERTICAL",#ListaBottoniGestoreSuoni,#FinGestoreSuoni}

 Repeat
  If SecondoClicDelTopo.b=False
   WCls
   WLocate 0,0

   For Suono.b=0 To SuoniCaricati-1
    If Suono>=InizioSuoni
     AssegnamentoSuono$=Suono(Suono)\Nome
     If AssegnamentoSuono$<>""
      CanaleSuono.b=Suono(Suono)\Canale
      If CanaleSuono>0
       WColour (CanaleSuono+4) MOD 16,(CanaleSuono+9) MOD 16
       Format "00":CanaleSuono$=">channel "+Str$(CanaleSuono):Format ""
      Else
       WColour 0,1:CanaleSuono$="-no channel"
      EndIf
      AssegnamentoSuono$+CanaleSuono$
      AssegnamentoSuono$=Right$(AssegnamentoSuono$,LunghezzaMassimaStringhe)
      AssegnamentoSuono$+String$(Spazio$,LunghezzaMassimaStringhe-Len(AssegnamentoSuono$))
      NPrint AssegnamentoSuono$
      If Suono=SuonoIndicatoDalTopo
       YSuono.b=SuonoIndicatoDalTopo-InizioSuoni
       If CanaleSuono>0
        Wline 0,YSuono*8,LarghezzaInternaFinestraGestoreSuoni-16,YSuono*8+7,(CanaleSuono+4) MOD 16
        Wline 0,YSuono*8+7,LarghezzaInternaFinestraGestoreSuoni-16,YSuono*8,(CanaleSuono+4) MOD 16
       Else
        Wline 0,YSuono*8,LarghezzaInternaFinestraGestoreSuoni-16,YSuono*8+7,0
        Wline 0,YSuono*8+7,LarghezzaInternaFinestraGestoreSuoni-16,YSuono*8,0
       EndIf
      EndIf
     EndIf
    EndIf
   Next Suono

   If SuoniCaricati>AltezzaInternaFinestraGestoreSuoni/8
    Enable #ListaBottoniGestoreSuoni,#BarraGestoreSuoni
   Else
    Disable #ListaBottoniGestoreSuoni,#BarraGestoreSuoni
   EndIf
   MostraBarra{#BarraGestoreSuoni,InizioSuoni,2,"VERTICAL",#ListaBottoniGestoreSuoni,#FinGestoreSuoni}

   SecondoClicDelTopo=True
   EsciDalGestoreSuoni.b=False
  EndIf

  EventoFinestraGestoreSuoni.l=WaitEvent

  Select EventoFinestraGestoreSuoni
  Case #HaiPremutoUnTastoDelTopo
   TastiDelTopo.b=MButtons:YTopo.w=WMouseY
   Select TastiDelTopo
   Case #TastoSinistroDelTopoPremuto
    NuovoSuonoIndicatoDalTopo=YTopo/8+InizioSuoni
    If NuovoSuonoIndicatoDalTopo=SuonoIndicatoDalTopo
     If SuoniCaricati>0 AND SuonoIndicatoDalTopo<SuoniCaricati
      CanaleSuonoIndicatoDalTopo.b=Suono(SuonoIndicatoDalTopo)\Canale
      If CanaliAttivati=%1111111111111111
       Suono(Suono)\Canale=0
       CanaliAttivati BitClr (CanaleSuonoIndicatoDalTopo-1)
      Else
       If CanaleSuonoIndicatoDalTopo>0
        If CanaleSuonoIndicatoDalTopo=16
         Suono(SuonoIndicatoDalTopo)\Canale=0
         CanaliAttivati BitClr 15
         CanaleSuono=0
        Else
         For CanaleSuono=1 To 15
          CanaleLibero.b=(CanaleSuono+CanaleSuonoIndicatoDalTopo-1) MOD 16
          If CanaliAttivati BitTst CanaleLibero=False
           Suono(SuonoIndicatoDalTopo)\Canale=CanaleLibero+1
           CanaliAttivati BitClr (CanaleSuonoIndicatoDalTopo-1)
           CanaliAttivati BitSet CanaleLibero
           Pop If:Pop For:Pop If:Pop If:Pop If:Goto FineCicloAssegnamentoCanali
          EndIf
         Next CanaleSuono
        EndIf
       Else
        For CanaleSuono=0 To 15
         If CanaliAttivati BitTst CanaleSuono=False
          Suono(SuonoIndicatoDalTopo)\Canale=CanaleSuono+1
          CanaliAttivati BitSet CanaleSuono
          Pop If:Pop For:Pop If:Pop If:Goto FineCicloAssegnamentoCanali
         EndIf
        Next CanaleSuono
       EndIf
      EndIf
FineCicloAssegnamentoCanali
      If CanaleSuono=16 Then RichiestaPannello{"TITOLO","No free channel available","OK"}
     EndIf
    Else
     SuonoIndicatoDalTopo=NuovoSuonoIndicatoDalTopo
    EndIf
    SecondoClicDelTopo=False
   Case #TastoSinistroDelTopoRilasciato
    SecondoClicDelTopo=True
   End Select
  Case #HaiPremutoUnBottone
   YLunBarra=AltezzaInternaFinestraGestoreSuoni
   InizioSuoni=ValoreBarra{#BarraGestoreSuoni,#MassimoSuoni-YLunBarra/8+1,YLunBarra,"VERTICAL",#ListaBottoniGestoreSuoni}
   SecondoClicDelTopo=False
  Case #HaiRilasciatoUnBottone
   YLunBarra=AltezzaInternaFinestraGestoreSuoni
   InizioSuoni=ValoreBarra{#BarraGestoreSuoni,#MassimoSuoni-YLunBarra/8+1,YLunBarra,"VERTICAL",#ListaBottoniGestoreSuoni}
   SecondoClicDelTopo=False
  Case #HaiAttivatoIlMenu
   MenuScelto.b=MenuHit
   VoceMenuScelta.b=ItemHit
   Select MenuScelto
   Case 0
    Select VoceMenuScelta
    Case #CaricaUnSuono
     If SuoniCaricati<#MassimoSuoni
      Suono$=FileRequest$("Load a sound...",PercorsoDelSuono$,NomeDelSuono$)
      If Suono$<>""
       StessoSuono.b=False
       If SuoniCaricati>0
        For SuonoPrecedente.b=0 To SuoniCaricati-1
         If Suono$=Suono(SuonoPrecedente)\Nome Then StessoSuono=True
        Next SuonoPrecedente
       EndIf
       If StessoSuono=False
        ErroreDiCaricamentoDelSuono=True
        LoadSound SuoniCaricati,Suono$
        ErroreDiCaricamentoDelSuono=False
        Suono(SuoniCaricati)\Nome=Suono$
        Sound SuoniCaricati,%0011
        NomeDelSuono$=GetFileName(Suono$)
        PercorsoDelSuono$=GetPathName(Suono$)
        SuoniCaricati+1
       EndIf
      EndIf
     Else
      RichiestaPannello{"TITOLO","You cannot load more sounds","OK"}
     EndIf
    Case #EditaIlSuono
     If SuoniCaricati>0
      If SuonoIndicatoDalTopo>=0 AND SuonoIndicatoDalTopo<SuoniCaricati
       Suono$=Suono(SuonoIndicatoDalTopo)\Nome
       EditoreSuono{}
      Else
       RichiestaPannello{"TITOLO","You must select a sound first","OK"}
      EndIf
     Else
      RichiestaPannello{"TITOLO","You must load a sound first","OK"}
     EndIf
    Case #EliminaIlSuono
     EliminaIlSuonoSelezionato{}
    End Select
   Case 1
    If ItemHit=0 Then MostraITastiDaUsareNelGestoreSuoni{}
   End Select
   SecondoClicDelTopo=False
  Case #HaiChiusoLaFinestra
   EsciDalGestoreSuoni=True

;--------------------------
;se avete premuto un tasto
;if you have pressed a key
;--------------------------
  Case #HaiPremutoUnTasto

;--------------------------------------------
;questa variabile memorizza il tasto premuto
;this variable stores the key pressed
;-------------------------------------
   TastoPremuto$=LCase$(Inkey$)

   Select TastoPremuto$

;------------------------------------------------------------------
;se avete premuto il tasto Backspace cancella il suono selezionato
;if you have typed the Backspace key deletes the selected sound
;---------------------------------------------------------------
   Case TastoIndietro$
    EliminaIlSuonoSelezionato{}

;---------------------------------------------------------------------
;se avete premuto il tasto Esc vi lascia uscire dal gestore dei suoni
;if you have typed the Esc key lets you exit from the sounds manager
;--------------------------------------------------------------------
   Case TastoFuga$
    EsciDalGestoreSuoni=True

   End Select

   SecondoClicDelTopo=False
  End Select

  FlushEvents
 Until EsciDalGestoreSuoni=True
 CloseWindow #FinGestoreSuoni
 Use Window #FinPrincipale
End Statement

;-----------------------------------------------------
;questa procedura cancella a video un evento musicale
;this procedure clears on screen a musical event
;------------------------------------------------
Statement CancellaUnEventoMusicale{TipoDiEventoMusicale$,Evento.w,InizioEvento.l,DurataEvento.l,StatoEvento.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AreaUtileEventiNonNote
SHARED AreaVisibileDeiValori
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED ScalaEventiMusicali
SHARED TipoDiNota()
SHARED XInizioAreaVisibile
SHARED YInizioAreaVisibile
 SelezioneEventoMusicale.b=StatoEvento & #EventoMusicaleSelezionato
 EventoMusicaleTagliato.b=StatoEvento & #EventoMusicaleTagliato
 EventoMusicaleCopiato.b=StatoEvento & #EventoMusicaleCopiato
 Select TipoDiEventoMusicale$
 Case "Note"
  NotaVisualizzata.w=(127-Evento-YInizioAreaVisibile)*#GrandezzaFonteTopaz
  If NotaVisualizzata>=0 AND NotaVisualizzata+7<=AltezzaInternaFinestraEditoreSequenza-8-8
   InizioNota.l=InizioEvento:FineNota.l=InizioNota+DurataEvento-1
   I.w=16+(InizioNota-XInizioAreaVisibile)/ScalaEventiMusicali
   F.w=16+(FineNota-XInizioAreaVisibile)/ScalaEventiMusicali
   If I>=16 AND I<LarghezzaInternaFinestraEditoreSequenza
    InizioNotaVisibile.b=True
   Else
    InizioNotaVisibile=False
   EndIf
   If F>=16 AND F<LarghezzaInternaFinestraEditoreSequenza
    FineNotaVisibile.b=True
   Else
    FineNotaVisibile=False
   EndIf
   If I<16 AND F>LarghezzaInternaFinestraEditoreSequenza
    NotaVisibile.b=True
   Else
    If InizioNotaVisibile=True OR FineNotaVisibile=True
     NotaVisibile=True
    Else
     NotaVisibile=False
    EndIf
   EndIf
   If NotaVisibile=True
    X0Nota=LimitiInteri{I,16,LarghezzaInternaFinestraEditoreSequenza-1}
    Y0Nota=LimitiInteri{NotaVisualizzata,0,AreaUtileEventiNonNote}
    X1Nota=LimitiInteri{F,16,LarghezzaInternaFinestraEditoreSequenza-1}
    Y1Nota=LimitiInteri{NotaVisualizzata+7,0,AreaVisibileDeiValori-1}
    If TipoDiNota(Nota)\Diesis=True
     WBox X0Nota,Y0Nota,X1Nota,Y1Nota,0
    Else
     WBox X0Nota,Y0Nota,X1Nota,Y1Nota,3
    EndIf
   EndIf
  EndIf
 Case "Program"
  FineProgramma.l=InizioEvento+Len("Program000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineProgramma+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineProgramma+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineProgramma+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FineProgramma-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Programma.b=AreaUtileEventiNonNote*(127.0-Evento)/127
   For Linea.b=0 To 7
    Y.w=Programma+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FineProgramma,Y,0
    Else
     Wline I,Y,FineProgramma,Y,3
    EndIf
   Next Linea
  EndIf
 Case "Control"
  FineControllo.l=InizioEvento+Len("Control000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineControllo+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineControllo+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineControllo+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FineControllo-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Controllo.b=AreaUtileEventiNonNote*(127.0-Evento)/127
   For Linea.b=0 To 7
    Y=Controllo+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FineControllo,Y,0
    Else
     Wline I,Y,FineControllo,Y,3
    EndIf
   Next Linea
  EndIf
 Case "PolyAftertouch"
  FinePressioneMultipla.l=InizioEvento+Len("Poly000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FinePressioneMultipla+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FinePressioneMultipla+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FinePressioneMultipla+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FinePressioneMultipla-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   PressioneMultipla.b=AreaUtileEventiNonNote*(127.0-Evento)/127
   For Linea.b=0 To 7
    Y=PressioneMultipla+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FinePressioneMultipla,Y,0
    Else
     Wline I,Y,FinePressioneMultipla,Y,3
    EndIf
   Next Linea
  EndIf
 Case "MonoAftertouch"
  FinePressioneSingola.l=InizioEvento+Len("Mono000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FinePressioneSingola+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FinePressioneSingola+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FinePressioneSingola+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FinePressioneSingola-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   PressioneSingola.b=AreaUtileEventiNonNote*(127.0-Evento)/127
   For Linea.b=0 To 7
    Y=PressioneSingola+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FinePressioneSingola,Y,0
    Else
     Wline I,Y,FinePressioneSingola,Y,3
    EndIf
   Next Linea
  EndIf
 Case "PitchBend"
  FineCurvaDiPicco.l=InizioEvento+Len("Bend+0000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineCurvaDiPicco+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineCurvaDiPicco+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineCurvaDiPicco+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FineCurvaDiPicco-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   CurvaDiPicco.w=AreaUtileEventiNonNote*(127.0-Evento/128)/127
   For Linea.b=0 To 7
    Y=CurvaDiPicco+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FineCurvaDiPicco,Y,0
    Else
     Wline I,Y,FineCurvaDiPicco,Y,3
    EndIf
   Next Linea
  EndIf
 Case "Tempo"
  FineTempo.l=InizioEvento+Len("Tempo00/000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineTempo+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineTempo+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineTempo+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FineTempo-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Tempo.b=AreaUtileEventiNonNote*(127.0-Evento)/127
   For Linea.b=0 To 7
    Y=Tempo+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FineTempo,Y,0
    Else
     Wline I,Y,FineTempo,Y,3
    EndIf
   Next Linea
  EndIf
 Case "BPM"
  FineBattutePerMinuto.l=InizioEvento+Len("BPM000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineBattutePerMinuto+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineBattutePerMinuto+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineBattutePerMinuto+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+(FineBattutePerMinuto-XInizioAreaVisibile)/ScalaEventiMusicali
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   BattutePerMinuto.b=AreaUtileEventiNonNote*(97.0-(Evento-9)/3)/97
   For Linea.b=0 To 7
    Y=BattutePerMinuto+Linea
    If TipoDiNota(127-YInizioAreaVisibile-Y/8)\Diesis=True
     Wline I,Y,FineBattutePerMinuto,Y,0
    Else
     Wline I,Y,FineBattutePerMinuto,Y,3
    EndIf
   Next Linea
  EndIf
 End Select
End Statement

;--------------------------------------------
;questa procedura disegna un evento musicale
;this procedure draws a musical events
;--------------------------------------
Statement DisegnaUnEventoMusicale{TipoDiEventoMusicale$,Evento.w,InizioEvento.l,DurataEvento.l,CanaleEvento.b,StatoEvento.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AreaUtileEventiNonNote
SHARED AreaVisibileDeiValori
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED ScalaEventiMusicali
SHARED XInizioAreaVisibile
SHARED YInizioAreaVisibile
 WJam #DueColoriPieni

 ColoreSopra.b=(CanaleEvento+4) MOD 16:ColoreSotto.b=(CanaleEvento+9) MOD 16

 SelezioneEventoMusicale.b=StatoEvento & #EventoMusicaleSelezionato
 EventoMusicaleTagliato.b=StatoEvento & #EventoMusicaleTagliato
 EventoMusicaleCopiato.b=StatoEvento & #EventoMusicaleCopiato
 EventoMusicaleEseguito.b=StatoEvento & #EventoMusicaleEseguito
 Select TipoDiEventoMusicale$
 Case "Note"
  NotaVisualizzata.w=(127-Evento-YInizioAreaVisibile)*#GrandezzaFonteTopaz
  If NotaVisualizzata>=0 AND NotaVisualizzata+7<=AltezzaInternaFinestraEditoreSequenza-8-8
   FineNota.l=InizioEvento+DurataEvento-1
   I.w=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
   F.w=16+(FineNota-XInizioAreaVisibile)/ScalaEventiMusicali
   If I>=16 AND I<LarghezzaInternaFinestraEditoreSequenza
    InizioNotaVisibile.b=True
   Else
    InizioNotaVisibile=False
   EndIf
   If F>=16 AND F<LarghezzaInternaFinestraEditoreSequenza
    FineNotaVisibile.b=True
   Else
    FineNotaVisibile=False
   EndIf
   If I<16 AND F>LarghezzaInternaFinestraEditoreSequenza
    NotaVisibile.b=True
   Else
    If InizioNotaVisibile=True OR FineNotaVisibile=True
     NotaVisibile=True
    Else
     NotaVisibile=False
    EndIf
   EndIf
   If NotaVisibile=True
    X0Nota=LimitiInteri{I,16,LarghezzaInternaFinestraEditoreSequenza-1}
    Y0Nota=LimitiInteri{NotaVisualizzata,0,AreaUtileEventiNonNote}
    X1Nota=LimitiInteri{F,16,LarghezzaInternaFinestraEditoreSequenza-1}
    Y1Nota=LimitiInteri{NotaVisualizzata+7,0,AreaVisibileDeiValori-1}

    WBox X0Nota,Y0Nota,X1Nota,Y1Nota,ColoreSotto

    WColour ColoreSopra,ColoreSotto

    If EventoMusicaleTagliato=#EventoMusicaleTagliato
     WLocate X0Nota,Y0Nota:Print Left$("Cutted",(X1Nota-X0Nota+1)/8)
    EndIf

    If EventoMusicaleCopiato=#EventoMusicaleCopiato
     WLocate X0Nota,Y0Nota:Print Left$("Copied",(X1Nota-X0Nota+1)/8)
    EndIf

    If SelezioneEventoMusicale=#EventoMusicaleSelezionato
     Wline X0Nota,NotaVisualizzata,X1Nota,NotaVisualizzata+7,ColoreSopra
     Wline X0Nota,NotaVisualizzata+7,X1Nota,NotaVisualizzata,ColoreSopra
    EndIf

    If SelezioneEventoMusicale=#EventoMusicaleNonSelezionato
     Wline X0Nota+1,NotaVisualizzata+1,X1Nota-1,NotaVisualizzata+1,ColoreSopra
     Wline X0Nota+1,NotaVisualizzata+6,X1Nota-1,NotaVisualizzata+6,ColoreSopra
    EndIf

    If SelezioneEventoMusicale=#EventoMusicaleNonSelezionato
     If InizioNotaVisibile=True
      Wline I+1,NotaVisualizzata+1,I+1,NotaVisualizzata+6,ColoreSopra
     EndIf
     If FineNotaVisibile=True
      Wline F-1,NotaVisualizzata+1,F-1,NotaVisualizzata+6,ColoreSopra
     EndIf
    EndIf

    If EventoMusicaleEseguito=#EventoMusicaleEseguito
     WJam #SecondaVoltaStessiColori
     WBox X0Nota,Y0Nota,X1Nota,Y1Nota,ColoreSotto
    EndIf

   EndIf
  EndIf
 Case "Program"
  FineProgramma.l=InizioEvento+Len("Program000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineProgramma+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineProgramma+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineProgramma+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FineProgramma-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "000":Programma$="Program"+Str$(Evento):Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then Programma$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then Programma$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then Programma$+"Co"
   If I<16 Then IniziaPrima.b=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo.b=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y.w=AreaUtileEventiNonNote*(127.0-Evento)/127
   If IniziaPrima=True Then Programma$=Right$(Programma$,(F-I+1)/8)
   If FinisceDopo=True Then Programma$=Left$(Programma$,(F-I+1)/8)
   WLocate I,Y:Print Programma$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print Programma$
   EndIf
  EndIf
 Case "Control"
  FineControllo.l=InizioEvento+Len("Control000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineControllo+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineControllo+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineControllo+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FineControllo-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "000":Controllo$="Control"+Str$(Evento):Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then Controllo$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then Controllo$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then Controllo$+"Co"
   If I<0 Then IniziaPrima=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y=AreaUtileEventiNonNote*(127.0-Evento)/127
   If IniziaPrima=True Then Controllo$=Right$(Controllo$,(F-I+1)/8)
   If FinisceDopo=True Then Controllo$=Left$(Controllo$,(F-I+1)/8)
   WLocate I,Y:Print Controllo$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print Controllo$
   EndIf
  EndIf
 Case "PolyAftertouch"
  FinePressioneMultipla.l=InizioEvento+Len("Poly000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FinePressioneMultipla+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FinePressioneMultipla+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FinePressioneMultipla+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FinePressioneMultipla-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "000":PressioneMultipla$="Poly"+Str$(Evento):Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then PressioneMultipla$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then PressioneMultipla$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then PressioneMultipla$+"Co"
   If I<0 Then IniziaPrima=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y=AreaUtileEventiNonNote*(127.0-Evento)/127
   If IniziaPrima=True Then PressioneMultipla$=Right$(PressioneMultipla$,(F-I+1)/8)
   If FinisceDopo=True Then PressioneMultipla$=Left$(PressioneMultipla$,(F-I+1)/8)
   WLocate I,Y:Print PressioneMultipla$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print PressioneMultipla$
   EndIf
  EndIf
 Case "MonoAftertouch"
  FinePressioneSingola.l=InizioEvento+Len("Mono000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FinePressioneSingola+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FinePressioneSingola+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FinePressioneSingola+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FinePressioneSingola-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "000":PressioneSingola$="Mono"+Str$(Evento):Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then PressioneSingola$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then PressioneSingola$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then Print PressioneSingola$+"Co"
   If I<0 Then IniziaPrima=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y=AreaUtileEventiNonNote*(127.0-Evento)/127
   If IniziaPrima=True Then PressioneSingola$=Right$(PressioneSingola$,(F-I+1)/8)
   If FinisceDopo=True Then PressioneSingola$=Left$(PressioneSingola$,(F-I+1)/8)
   WLocate I,Y:Print PressioneSingola$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print PressioneSingola$
   EndIf
  EndIf
 Case "PitchBend"
  FineCurvaDiPicco.l=InizioEvento+Len("Bend+0000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineCurvaDiPicco+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineCurvaDiPicco+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineCurvaDiPicco+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FineCurvaDiPicco-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "+0000":CurvaDiPicco$="Bend"+Str$(Evento-#_PitchBendCenter):Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then CurvaDiPicco$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then CurvaDiPicco$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then CurvaDiPicco$+"Co"
   If I<0 Then IniziaPrima=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y=AreaUtileEventiNonNote*(127.0-Evento/128)/127
   If IniziaPrima=True Then CurvaDiPicco$=Right$(CurvaDiPicco$,(F-I+1)/8)
   If FinisceDopo=True Then CurvaDiPicco$=Left$(CurvaDiPicco$,(F-I+1)/8)
   WLocate I,Y:Print CurvaDiPicco$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print CurvaDiPicco$
   EndIf
  EndIf
 Case "Tempo"
  FineTempo.l=InizioEvento+Len("Tempo00/000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineTempo+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineTempo+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineTempo+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FineTempo-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "00":Tempo$="Tempo"+Str$(Evento MOD 16+1)
   Format "000":Tempo$+"/"+Str$(2^(Evento/16))
   Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then Tempo$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then Tempo$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then Tempo$+"Co"
   If I<0 Then IniziaPrima=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y=AreaUtileEventiNonNote*(127.0-Evento)/127
   If IniziaPrima=True Then Tempo$=Right$(Tempo$,(F-I+1)/8)
   If FinisceDopo=True Then Tempo$=Left$(Tempo$,(F-I+1)/8)
   WLocate I,Y:Print Tempo$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print Tempo$
   EndIf
  EndIf
 Case "BPM"
  FineBattutePerMinuto.l=InizioEvento+Len("BPM000")*#GrandezzaFonteTopaz-1
  If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then FineBattutePerMinuto+Len("X")*#GrandezzaFonteTopaz
  If EventoMusicaleTagliato=#EventoMusicaleTagliato Then FineBattutePerMinuto+Len("Cu")*#GrandezzaFonteTopaz
  If EventoMusicaleCopiato=#EventoMusicaleCopiato Then FineBattutePerMinuto+Len("Co")*#GrandezzaFonteTopaz
  I=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
  F=16+FineBattutePerMinuto-XInizioAreaVisibile
  If I>=16 OR I<LarghezzaInternaFinestraEditoreSequenza OR F>=16 OR F<LarghezzaInternaFinestraEditoreSequenza
   WColour ColoreSopra,ColoreSotto
   Format "000":BattutePerMinuto$="BPM"+Str$(Evento):Format ""
   If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then BattutePerMinuto$+"X"
   If EventoMusicaleTagliato=#EventoMusicaleTagliato Then BattutePerMinuto$+"Cu"
   If EventoMusicaleCopiato=#EventoMusicaleCopiato Then BattutePerMinuto$+"Co"
   If I<0 Then IniziaPrima=True
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then FinisceDopo=True
   If I<16 Then I=16
   If F>LarghezzaInternaFinestraEditoreSequenza-1 Then F=LarghezzaInternaFinestraEditoreSequenza-1
   Y=AreaUtileEventiNonNote*(97.0-(Evento-9)/3)/97
   If IniziaPrima=True Then BattutePerMinuto$=Right$(BattutePerMinuto$,(F-I+1)/8)
   If FinisceDopo=True Then BattutePerMinuto$=Left$(BattutePerMinuto$,(F-I+1)/8)
   WLocate I,Y:Print BattutePerMinuto$

   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    WJam #SecondaVoltaStessiColori
    WLocate I,Y:Print BattutePerMinuto$
   EndIf
  EndIf
 End Select
End Statement

;---------------------------------------------------------------
;questa procedura mostra la scala di visualizzazione delle note
;this procedure shows the note scale of notes displaying
;--------------------------------------------------------
Statement MostraLaScalaDegliEventiMusicali{Ritardo.b,XBottone.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED ScalaEventiMusicali
 WJam #DueColoriPieni

 Select ScalaEventiMusicali
 Case 1
  Ingrandimento.b=1
 Case 2
  Ingrandimento=2
 Case 4
  Ingrandimento=3
 Case 8
  Ingrandimento=4
 Case 16
  Ingrandimento=5
 Case 32
  Ingrandimento=6
 Case 64
  Ingrandimento=7
 End Select
 If Ritardo=True
  If XBottone=0 Then DisegnaBottone{"Z"+UStr$(Ingrandimento),0,AltezzaInternaFinestraEditoreSequenza-8-8,#ColBlu}
  If XBottone=8 Then DisegnaBottone{"Z"+UStr$(Ingrandimento),0,AltezzaInternaFinestraEditoreSequenza-8-8,#ColRosso}
  Delay_ 50
 EndIf
 DisegnaBottone{"+",0,AltezzaInternaFinestraEditoreSequenza-8-8,#ColBlu}
 DisegnaBottone{"-",8,AltezzaInternaFinestraEditoreSequenza-8-8,#ColRosso}
End Statement

Statement ProgressioneEventiMusicaliCurvaDiPicco{InizioProgressione.w,FineProgressione.w}
SHARED BottonePremuto
SHARED CanaleSelezionato
SHARED EventiMusicali
SHARED EventiMusicaliSelezionati
SHARED EventoMusicale()
SHARED LarghezzaEventoBase
SHARED PuntoDInserimento
SHARED SequenzaSelezionata
SHARED TitoloSchermo$
 If CanaleSelezionato>0
  RichiestaPannello{"TITOLO","How many inner values|for the progression?","1|2|4|8|16|32|64|Cancel"}
  Valori.b=BottonePremuto

  If Valori=0 Then Statement Return
  Valori=2+2^(Valori-1)
  Passo.w=(FineProgressione-InizioProgressione)/(Valori-1)
  LastItem EventoMusicale()
  For Valore.w=InizioProgressione To FineProgressione Step Passo
   If AddItem(EventoMusicale())=True
    EventoMusicale()\Tipo="PitchBend"
    EventoMusicale()\Evento=Valore/128
    EventoMusicale()\Valore=Valore MOD 128
    EventoMusicale()\Inizio=PuntoDInserimento+LarghezzaEventoBase/(Valori-1)*Abs(Valore-InizioProgressione)/Passo
    EventoMusicale()\Durata=2
    EventoMusicale()\Canale=CanaleSelezionato
    EventoMusicale()\Sequenza=SequenzaSelezionata
    EventoMusicale()\Stato=#EventoMusicaleSelezionato
    EventiMusicali+1
    EventiMusicaliSelezionati+1
   Else
    RichiestaPannello{"TITOLO","You have used all the available events","OK"}
    ProgressioneInterrotta.b=True
    Pop For:Goto FineCicloForProgressione
   EndIf
  Next Valore
FineCicloForProgressione
  If ProgressioneInterrotta=False Then RichiestaPannello{"TITOLO","Progression successfully completed!","OK"}
 Else
  RichiestaPannello{"TITOLO","You must select a channel first","OK"}
 EndIf
End Statement

;-----------------------------------------------------------------------
;questa procedura permette di cambiare i parametri dell'evento corrente
;this procedure permits to change the current event parameters
;--------------------------------------------------------------
Statement CambiaValoriEventoBase{}
SHARED BottonePremuto
SHARED EventiMusicaliSelezionati
SHARED EventoMusicale()
SHARED LarghezzaEventoBase
SHARED Spazio$
SHARED TastoCursoreDestra$
SHARED TastoCursoreSinistra$
SHARED TastoFuga$
SHARED TipoDiEventoMusicaleDiBase$
SHARED TitoloSchermo$
SHARED ValoreEventoBase
SHARED XLunBarra
SHARED YLunBarra
 WJam #DueColoriPieni

 TipoFin.l=#FinestraMovibile+#BottoneChiudiFinestra+#FinestraConMemoriaBordi+#FinestraAttivata
 YPosFin.w=#AltezzaBarreTitoli*2:YLunFin.w=#AltezzaBarreTitoli+#YLunImmagineNota+8+8+2
 If TipoDiEventoMusicaleDiBase$<>"Program"
  If TipoDiEventoMusicaleDiBase$<>"PolyAftertouch" AND TipoDiEventoMusicaleDiBase$<>"MonoAftertouch"
   If TipoDiEventoMusicaleDiBase$<>"Tempo" AND TipoDiEventoMusicaleDiBase$<>"BPM"
    YLunFin+8+8
   EndIf
  EndIf
 EndIf
 If TipoDiEventoMusicaleDiBase$="PitchBend" Then YLunFin+8+8
 TitoloFinestra$="Basic event: "+LCase$(TipoDiEventoMusicaleDiBase$)
 Window #FinEventoBase,4,YPosFin,4+#XLunImmagineNota*10+4,YLunFin,TipoFin,"",1,2
 WTitle TitoloFinestra$,TitoloSchermo$
 LarghezzaInternaFinestraEventoBase.w=InnerWidth
 AltezzaInternaFinestraEventoBase.w=InnerHeight
 CloseWindow #FinEventoBase
 XLunBarra=LarghezzaInternaFinestraEventoBase
 YLunBarra=8
 If TipoDiEventoMusicaleDiBase$<>"Program"
  If TipoDiEventoMusicaleDiBase$<>"PolyAftertouch" AND TipoDiEventoMusicaleDiBase$<>"MonoAftertouch"
   If TipoDiEventoMusicaleDiBase$<>"Tempo" AND TipoDiEventoMusicaleDiBase$<>"BPM"
    If TipoDiEventoMusicaleDiBase$="PitchBend"
     ImpostaBarra{1,0,AltezzaInternaFinestraEventoBase-8-8-8-8-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
     ImpostaBarra{2,0,AltezzaInternaFinestraEventoBase-8-8-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
     ImpostaBarra{3,0,AltezzaInternaFinestraEventoBase-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
    Else
     ImpostaBarra{1,0,AltezzaInternaFinestraEventoBase-8-8-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
     ImpostaBarra{2,0,AltezzaInternaFinestraEventoBase-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
    EndIf
   Else
    ImpostaBarra{1,0,AltezzaInternaFinestraEventoBase-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
   EndIf
  EndIf
 Else
  ImpostaBarra{1,0,AltezzaInternaFinestraEventoBase-8,"HORIZONTAL",0,#ListaBottoniEventoBase}
 EndIf

 Window #FinEventoBase,4,YPosFin,4+#XLunImmagineNota*10+4,YLunFin,TipoFin,"",1,2,#ListaBottoniEventoBase
 WTitle TitoloFinestra$,TitoloSchermo$
 WindowFont #FonteTopaz8

;-----------------------------------------------------------------
;disabilita i menu rendendo disponibile il tasto destro del mouse
;disables the menu giving available the right mouse button
;----------------------------------------------------------
 MenusOff

 WColour 1,0

 MostraBarra{1,(LarghezzaEventoBase-2)/2,(192*6-2)/2,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
 If TipoDiEventoMusicaleDiBase$<>"Program"
  If TipoDiEventoMusicaleDiBase$<>"PolyAftertouch" AND TipoDiEventoMusicaleDiBase$<>"MonoAftertouch"
   If TipoDiEventoMusicaleDiBase$<>"Tempo" AND TipoDiEventoMusicaleDiBase$<>"BPM"
    If TipoDiEventoMusicaleDiBase$="PitchBend"
;------------------------------------------------------------------------------
;questa variabile contiene il valore finale di base dello spostamento di picco
;delle note
;this variable retains the basic pitch bend final value
;-------------------------------------------------------
     FineCurvaDiPiccoEventoBase.w=#_PitchBendCenter

;--------------------------------------------------------------------------
;questa variabile contiene il valore iniziale di base dello spostamento di
;picco delle note
;this variable retains the basic pitch bend initial value
;---------------------------------------------------------
     InizioCurvaDiPiccoEventoBase.w=#_PitchBendCenter

     ValoreMassimo.w=16384
     Valore.w=InizioCurvaDiPiccoEventoBase
     MostraBarra{2,Valore,ValoreMassimo,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
     Valore.w=FineCurvaDiPiccoEventoBase
     MostraBarra{3,Valore,ValoreMassimo,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
    Else
     If TipoDiEventoMusicaleDiBase$="Note"
      MostraBarra{2,ValoreEventoBase,127,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
     Else
      MostraBarra{2,ValoreEventoBase,128,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
     EndIf
    EndIf
   EndIf
  EndIf
 EndIf
 NuovaLarghezzaEventoBase.w=LarghezzaEventoBase
 NuovoValoreEventoBase.b=ValoreEventoBase
 NuovoInizioCurvaDiPiccoEventoBase.w=InizioCurvaDiPiccoEventoBase
 NuovaFineCurvaDiPiccoEventoBase.w=FineCurvaDiPiccoEventoBase
 Repeat
  If SecondoClicDelTopo.b=False
   WBlit #ImmagineNote,0,0

   X0.w=0
   Select NuovaLarghezzaEventoBase
   Case #TicDiBasePerQuarto*4
    ColoreSelezione.b=#ColAcquamarina:X0=#XLunImmagineNota
   Case #TicDiBasePerQuarto*2
    ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*2
   Case #TicDiBasePerQuarto
    ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*3
   Case #TicDiBasePerQuarto/2
    ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*4
   Case #TicDiBasePerQuarto/4
    ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*5
   Case #TicDiBasePerQuarto/8
    ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*6
   Case #TicDiBasePerQuarto/16
    ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*7
   Default
    If NotaPuntata.w>0 Then ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*8
    If Terzina.b=3 Then ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*9
    If Cinquina.b=5 Then ColoreSelezione=#ColAcquamarina:X0=#XLunImmagineNota*10
    If X0=0
     If NuovaLarghezzaEventoBase>#TicDiBasePerQuarto*4
      X0=#XLunImmagineNota
     Else
      If NuovaLarghezzaEventoBase>#TicDiBasePerQuarto*2
       X0=#XLunImmagineNota*2
      Else
       If NuovaLarghezzaEventoBase>#TicDiBasePerQuarto
        X0=#XLunImmagineNota*3
       Else
        If NuovaLarghezzaEventoBase>#TicDiBasePerQuarto/2
         X0=#XLunImmagineNota*4
        Else
         If NuovaLarghezzaEventoBase>#TicDiBasePerQuarto/4
          X0=#XLunImmagineNota*5
         Else
          If NuovaLarghezzaEventoBase>#TicDiBasePerQuarto/8
           X0=#XLunImmagineNota*6
          Else
           X0=#XLunImmagineNota*7
          EndIf
         EndIf
        EndIf
       EndIf
      EndIf
     EndIf
     ColoreSelezione=#ColBlu
    EndIf
   End Select
   If X0>0
    X0-#XLunImmagineNota:X1.w=X0+#XLunImmagineNota-1:Y1.b=#YLunImmagineNota-1
    Wline X0,0,X1,0,X1,Y1,X0,Y1,X0,0,ColoreSelezione
   EndIf

   If TipoDiEventoMusicaleDiBase$<>"Program"
    If TipoDiEventoMusicaleDiBase$<>"PolyAftertouch" AND TipoDiEventoMusicaleDiBase$<>"MonoAftertouch"
     If TipoDiEventoMusicaleDiBase$<>"Tempo" AND TipoDiEventoMusicaleDiBase$<>"BPM"
      If TipoDiEventoMusicaleDiBase$="PitchBend"
       WLocate 0,AltezzaInternaFinestraEventoBase-8-8-8-8-8-8
      Else
       WLocate 0,AltezzaInternaFinestraEventoBase-8-8-8-8
      EndIf
     Else
      WLocate 0,AltezzaInternaFinestraEventoBase-8-8
     EndIf
    EndIf
   Else
    WLocate 0,AltezzaInternaFinestraEventoBase-8-8
   EndIf
   If NuovaLarghezzaEventoBase MOD 6=0
    WColour #ColAcquamarina,#ColAcquamarina+#Scuro
   Else
    WColour #ColBlu,#ColBlu+#Scuro
   EndIf
   Format "0000":Print NuovaLarghezzaEventoBase:Format ""
   Print String$(Spazio$,(#XLunImmagineNota*10)/#GrandezzaFonteTopaz-Len("0000")-Len("width")),"width"

   If TipoDiEventoMusicaleDiBase$<>"Program"
    If TipoDiEventoMusicaleDiBase$<>"PolyAftertouch" AND TipoDiEventoMusicaleDiBase$<>"MonoAftertouch"
     If TipoDiEventoMusicaleDiBase$<>"Tempo" AND TipoDiEventoMusicaleDiBase$<>"BPM"
      If TipoDiEventoMusicaleDiBase$="PitchBend"
       Y.w=AltezzaInternaFinestraEventoBase-8-8-8-8
       WColour #ColViola,#ColViola+#Scuro:WLocate 0,Y:Format "+0000"
       Print NuovoInizioCurvaDiPiccoEventoBase-#_PitchBendCenter:Format ""
       Valore$="initial":Print String$(Spazio$,(#XLunImmagineNota*10)/#GrandezzaFonteTopaz-Len("+0000")-Len(Valore$)),Valore$
      Else
       Y=AltezzaInternaFinestraEventoBase-8-8
       WColour #ColRosso,#ColRosso+#Scuro:WLocate 0,Y:Format "000"
       Print NuovoValoreEventoBase:Format ""
       If TipoDiEventoMusicaleDiBase$="Note" Then Valore$="velocity"
       If TipoDiEventoMusicaleDiBase$="Control" Then Valore$="value"
       Print String$(Spazio$,(#XLunImmagineNota*10)/8-3-Len(Valore$)),Valore$
      EndIf
     EndIf
    EndIf
   EndIf

   If TipoDiEventoMusicaleDiBase$="PitchBend"
    Y=AltezzaInternaFinestraEventoBase-8-8
    WColour #ColViola,#ColViola+#Scuro:WLocate 0,Y:Format "+0000"
    Print NuovaFineCurvaDiPiccoEventoBase-#_PitchBendCenter:Format ""
    Valore$="final":Print String$(Spazio$,(#XLunImmagineNota*10)/#GrandezzaFonteTopaz-Len("+0000")-Len(Valore$)),Valore$
   EndIf
   SecondoClicDelTopo=True
  EndIf

  EventoFinestraEventoBase.l=WaitEvent

  Select EventoFinestraEventoBase
  Case #HaiPremutoUnTastoDelTopo
   XTopo.w=WMouseX:YTopo.w=WMouseY:TastiDelTopo.b=MButtons
   Select TastiDelTopo
   Case #TastoSinistroDelTopoPremuto
    XZonaTopo.b=XTopo/#XLunImmagineNota+1:YZonaTopo.b=YTopo>=0 AND YTopo<#YLunImmagineNota
    If YZonaTopo=True
     Select XZonaTopo
     Case 1
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto*4:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 2
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto*2:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 3
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 4
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto/2:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 5
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto/4:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 6
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto/8:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 7
      NuovaLarghezzaEventoBase=#TicDiBasePerQuarto/16:NotaPuntata=0:Terzina=0:Cinquina=0
     Case 8
      If NotaPuntata=0
       If Terzina>0
        NuovaLarghezzaEventoBase*Terzina
        Terzina=0
       EndIf
       If Cinquina>0
        NuovaLarghezzaEventoBase*Cinquina
        Cinquina=0
       EndIf
       NotaPuntata=NuovaLarghezzaEventoBase/2
       If NuovaLarghezzaEventoBase+NotaPuntata<=192*6
        NuovaLarghezzaEventoBase+NotaPuntata
       Else
        NotaPuntata=0:XZonaTopo=0
       EndIf
      Else
       NuovaLarghezzaEventoBase/3*2
       NotaPuntata=0
      EndIf
     Case 9
      If Terzina=0 AND NuovaLarghezzaEventoBase>5
       If NotaPuntata>0
        NuovaLarghezzaEventoBase/3*2
        NotaPuntata=0
       EndIf
       If Cinquina>0
        NuovaLarghezzaEventoBase*Cinquina
        Cinquina=0
       EndIf
       Terzina=3:NuovaLarghezzaEventoBase/Terzina
      Else
       NuovaLarghezzaEventoBase*Terzina
       Terzina=0
      EndIf
     Case 10
      If Cinquina=0 AND NuovaLarghezzaEventoBase>9
       If NotaPuntata>0
        NuovaLarghezzaEventoBase/3*2
        NotaPuntata=0
       EndIf
       If Terzina>0
        NuovaLarghezzaEventoBase*Terzina
        Terzina=0
       EndIf
       Cinquina=5:NuovaLarghezzaEventoBase/Cinquina
      Else
       NuovaLarghezzaEventoBase*Cinquina
       Cinquina=0
      EndIf
     End Select
     If XZonaTopo>0 AND XZonaTopo<11
      MostraBarra{1,(NuovaLarghezzaEventoBase-2)/2,(192*6-2)/2,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
     EndIf
     SecondoClicDelTopo=False
    Else
     SecondoClicDelTopo=True
    EndIf
   Case #TastoSinistroDelTopoRilasciato
    SecondoClicDelTopo=True
   End Select
  Case #HaiPremutoUnBottone
   XLunBarra=LarghezzaInternaFinestraEventoBase
   Select GadgetHit
   Case 1
    NuovaLarghezzaEventoBase=ValoreBarra{1,(192*6-2)/2,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}*2+2
    NotaPuntata=0:Terzina=0
   Case 2
    If TipoDiEventoMusicaleDiBase$="PitchBend"
     NuovoInizioCurvaDiPiccoEventoBase=ValoreBarra{2,16384,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}
    Else
     If TipoDiEventoMusicaleDiBase$="Note"
      NuovoValoreEventoBase=ValoreBarra{2,127,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}+1
     Else
      NuovoValoreEventoBase=ValoreBarra{2,128,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}
     EndIf
    EndIf
   Case 3
    NuovaFineCurvaDiPiccoEventoBase=ValoreBarra{3,16384,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}
   End Select
   SecondoClicDelTopo=False
  Case #HaiRilasciatoUnBottone
   XLunBarra=LarghezzaInternaFinestraEventoBase
   Select GadgetHit
   Case 1
    NuovaLarghezzaEventoBase=ValoreBarra{1,(192*6-2)/2,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}*2+2
    NotaPuntata=0:Terzina=0
   Case 2
    If TipoDiEventoMusicaleDiBase$="PitchBend"
     NuovoInizioCurvaDiPiccoEventoBase=ValoreBarra{2,16384,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}
    Else
     If TipoDiEventoMusicaleDiBase$="Note"
      NuovoValoreEventoBase=ValoreBarra{2,127,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}+1
     Else
      NuovoValoreEventoBase=ValoreBarra{2,128,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}
     EndIf
    EndIf
   Case 3
    NuovaFineCurvaDiPiccoEventoBase=ValoreBarra{3,16384,XLunBarra,"HORIZONTAL",#ListaBottoniEventoBase}
   End Select
   SecondoClicDelTopo=False
  Case #HaiChiusoLaFinestra
   EsciDalEventoBase=True
  Case #HaiPremutoUnTasto
   TastoPremuto$=LCase$(Inkey$)
   Select TastoPremuto$
   Case TastoFuga$
    EsciDalEventoBase=True
   Case TastoCursoreDestra$
    If NuovaLarghezzaEventoBase<#TicDiBasePerQuarto*6-2
     NuovaLarghezzaEventoBase+2:NotaPuntata=0:Terzina=0:Cinquina=0
     MostraBarra{1,(NuovaLarghezzaEventoBase-2)/2,(192*6-2)/2,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
    EndIf
   Case TastoCursoreSinistra$
    If NuovaLarghezzaEventoBase>3
     NuovaLarghezzaEventoBase-2:NotaPuntata=0:Terzina=0:Cinquina=0
     MostraBarra{1,(NuovaLarghezzaEventoBase-2)/2,(192*6-2)/2,"HORIZONTAL",#ListaBottoniEventoBase,#FinEventoBase}
    EndIf
   End Select
   SecondoClicDelTopo=False
  End Select

  FlushEvents
 Until EsciDalEventoBase=True
 EventoBaseModificato.b=False
 If NuovaLarghezzaEventoBase<>LarghezzaEventoBase Then EventoBaseModificato=True
 If NuovoValoreEventoBase<>ValoreEventoBase Then EventoBaseModificato=True
 If EventiMusicaliSelezionati>0
  MessaggioPannello$="You have made "
  If EventoBaseModificato=True Then MessaggioPannello$+"changes:" Else MessaggioPannello$+"no changes:"
  MessaggioPannello$+"|Would you apply the current|settings to the selected events?"
  RichiestaPannello{TitoloPannello$,MessaggioPannello$,"Yes|No"}
  ApplicaINuoviValoriAgliEventiMusicaliSelezionati.b=BottonePremuto

  If ApplicaINuoviValoriAgliEventiMusicaliSelezionati=1
   Select TipoDiEventoMusicaleDiBase$
   Case "Note"
    RichiestaPannello{TitoloPannello$,"Change notes start?","Quantize|Scale|No"}
    AggiustaInizio.b=BottonePremuto

    RichiestaPannello{TitoloPannello$,"Change notes length?","Quantize|Scale|No"}
    AggiustaDurata.b=BottonePremuto

    RichiestaPannello{TitoloPannello$,"Change notes velocity?","Replace|Add|Sub|No"}
    AggiustaValore.b=BottonePremuto
   Case "Program"
    RichiestaPannello{TitoloPannello$,"Change programs start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto
   Case "Control"
    RichiestaPannello{TitoloPannello$,"Change controls start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto

    RichiestaPannello{TitoloPannello$,"Change controls value?","Replace|Add|Sub|No"}
    AggiustaValore=BottonePremuto
   Case "PolyAftertouch"
    RichiestaPannello{TitoloPannello$,"Change poly aftertouches start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto

    RichiestaPannello{TitoloPannello$,"Change poly aftertouches value?","Replace|Add|Sub|No"}
    AggiustaValore=BottonePremuto
   Case "MonoAftertouch"
    RichiestaPannello{TitoloPannello$,"Change mono aftertouches start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto

    RichiestaPannello{TitoloPannello$,"Change mono aftertouches value?","Replace|Add|Sub|No"}
    AggiustaValore=BottonePremuto
   Case "PitchBend"
    RichiestaPannello{TitoloPannello$,"Change pitch bends start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto
   Case "Tempo"
    RichiestaPannello{TitoloPannello$,"Change tempos start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto
   Case "BPM"
    RichiestaPannello{TitoloPannello$,"Change beats per mins start?","Quantize|Scale|No"}
    AggiustaInizio=BottonePremuto
   End Select
   ResetList EventoMusicale()
   While NextItem(EventoMusicale())=True
    StatoEventoMusicale.b=EventoMusicale()\Stato
    SelezioneEventoMusicale.b=StatoEventoMusicale & #EventoMusicaleSelezionato
    If SelezioneEventoMusicale=#EventoMusicaleSelezionato
     Select EventoMusicale()\Tipo
     Case "Note"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
      Select AggiustaDurata
      Case 1
       EventoMusicale()\Durata*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Durata*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
      Select AggiustaValore
      Case 1
       EventoMusicale()\Valore=ValoreEventoBase
      Case 2
       NuovoValore=EventoMusicale()\Valore+NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      Case 3
       NuovoValore=EventoMusicale()\Valore-NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      End Select
     Case "Program"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
     Case "Control"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
      Select AggiustaValore
      Case 1
       EventoMusicale()\Valore=ValoreEventoBase
      Case 2
       NuovoValore=EventoMusicale()\Valore+NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      Case 3
       NuovoValore=EventoMusicale()\Valore-NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      End Select
     Case "PolyAftertouch"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
      Select AggiustaValore
      Case 1
       EventoMusicale()\Valore=ValoreEventoBase
      Case 2
       NuovoValore=EventoMusicale()\Valore+NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      Case 3
       NuovoValore=EventoMusicale()\Valore-NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      End Select
     Case "MonoAftertouch"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
      Select AggiustaValore
      Case 1
       EventoMusicale()\Valore=ValoreEventoBase
      Case 2
       NuovoValore=EventoMusicale()\Valore+NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      Case 3
       NuovoValore=EventoMusicale()\Valore-NuovoValoreEventoBase
       EventoMusicale()\Valore=LimitiInteri{NuovoValore,0,127}
      End Select
     Case "PitchBend"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
     Case "Tempo"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
     Case "BPM"
      Select AggiustaInizio
      Case 1
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/NuovaLarghezzaEventoBase
      Case 2
       EventoMusicale()\Inizio*NuovaLarghezzaEventoBase/LarghezzaEventoBase
      End Select
     End Select
    EndIf
   Wend
  EndIf
 EndIf
 LarghezzaEventoBase=NuovaLarghezzaEventoBase
 ValoreEventoBase=NuovoValoreEventoBase

 If NuovoInizioCurvaDiPiccoEventoBase<>InizioCurvaDiPiccoEventoBase Then Progressione.b=True
 If NuovaFineCurvaDiPiccoEventoBase<>FineCurvaDiPiccoEventoBase Then Progressione=True
 If Progressione=True
  ProgressioneEventiMusicaliCurvaDiPicco{NuovoInizioCurvaDiPiccoEventoBase,NuovaFineCurvaDiPiccoEventoBase}
  InizioCurvaDiPiccoEventoBase=NuovoInizioCurvaDiPiccoEventoBase
  FineCurvaDiPiccoEventoBase=NuovaFineCurvaDiPiccoEventoBase
 EndIf

 CloseWindow #FinEventoBase
 Use Window #FinEditoreSequenza

;-------------------------------------------------------------------------
;abilita i menu cosi' il tasto destro del mouse non puo' essere usato per
;altro
;enables the menu so the right mouse button cannot be used for something else
;-----------------------------------------------------------------------------
 MenusOn

End Statement

;---------------------------------------------------------------
;this procedure states the selected by mouse event new position
;questa procedura mostra la nuova posizione dell'evento selezionato col mouse
;-----------------------------------------------------------------------------
Statement MostraNuovaPosizioneEvento{XEvento.l,YEvento.b}
SHARED AreaVisibileDeiValori
SHARED AreaUtileEventiNonNote
SHARED EventoMusicale()
SHARED LarghezzaEventoBase
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED MostraNuovoValore
SHARED ScalaEventiMusicali
SHARED TipoDiEventoMusicaleDiBase$
SHARED XInizioAreaVisibile
SHARED YInizioAreaVisibile
 WJam #SecondaVoltaStessiColori

 X0.w=16+(XEvento-XInizioAreaVisibile)/ScalaEventiMusicali
 Select TipoDiEventoMusicaleDiBase$
 Case "Note"
  Y0.w=(127-YInizioAreaVisibile-YEvento)*8
  X1.w=X0+(LarghezzaEventoBase-1)/ScalaEventiMusicali
 Case "Program"
  Y0=AreaUtileEventiNonNote*(127.0-YEvento)/127
  X1=X0+Len("Program000X")*#GrandezzaFonteTopaz-1
 Case "Control"
  Y0=AreaUtileEventiNonNote*(127.0-YEvento)/127
  X1=X0+Len("Control000X")*#GrandezzaFonteTopaz-1
 Case "PolyAftertouch"
  Y0=AreaUtileEventiNonNote*(127.0-YEvento)/127
  X1=X0+Len("Poly000X")*#GrandezzaFonteTopaz-1
 Case "MonoAftertouch"
  Y0=AreaUtileEventiNonNote*(127.0-YEvento)/127
  X1=X0+Len("Mono000X")*#GrandezzaFonteTopaz-1
 Case "PitchBend"
  Y0=AreaUtileEventiNonNote*(127.0-YEvento)/127
  X1=X0+Len("Bend+0000X")*#GrandezzaFonteTopaz-1
 Case "Tempo"
  Y0=AreaUtileEventiNonNote*(127.0-YEvento)/127
  X1=X0+Len("Tempo00/000X")*#GrandezzaFonteTopaz-1
 Case "BPM"
  Y0=AreaUtileEventiNonNote*(97.0-YEvento)/97
  X1=X0+Len("BPM000X")*#GrandezzaFonteTopaz-1
 End Select
 Y1.w=Y0+7
 X0=LimitiInteri{X0,16,LarghezzaInternaFinestraEditoreSequenza-1}
 Y0=LimitiInteri{Y0,0,AreaUtileEventiNonNote}
 X1=LimitiInteri{X1,16,LarghezzaInternaFinestraEditoreSequenza-1}
 Y1=LimitiInteri{Y1,7,AreaVisibileDeiValori-1}
 If MostraNuovoValore=True
  WLocate X0,Y0
  Select TipoDiEventoMusicaleDiBase$
  Case "Note"
   Wline X0,Y0,X1,Y0,X1,Y1,X0,Y1,X0,Y0,0
  Case "Program"
   Format "000":Print "Program",YEvento,"X":Format ""
  Case "Control"
   Format "000":Print "Control",YEvento,"X":Format ""
  Case "PolyAftertouch"
   Format "000":Print "Poly",YEvento,"X":Format ""
  Case "MonoAftertouch"
   Format "000":Print "Mono",YEvento,"X":Format ""
  Case "PitchBend"
   Format "+0000":Print "Bend",YEvento*128+EventoMusicale()\Valore-#_PitchBendCenter,"X":Format ""
  Case "Tempo"
   Format "00":Tempo$="Tempo"+Str$(YEvento MOD 16+1)
   Format "000":Tempo$+"/"+Str$(2^(YEvento/16)):Format ""
  Case "BPM"
   Format "000":Print "BPM",9+YEvento*3+EventoMusicale()\Valore,"X":Format ""
  End Select
 Else
  Wline X0,Y0,X1,Y0,X1,Y1,X0,Y1,X0,Y0,0
 EndIf
End Statement

;------------------------------------------------------------------------------
;questa procedura permette di spostare gli eventi selezionati cliccando con il
;mouse su uno di essi
;this procedure permits to move the selected events clicking on one of these
;----------------------------------------------------------------------------
Statement MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneEvento.l,YPosizioneEvento.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AreaUtileEventiNonNote
SHARED CanaleSelezionato
SHARED DurataSequenza
SHARED EventoMusicale()
SHARED EventoMusicaleSpostatoConIlTopo
SHARED LarghezzaBottoniEditoreSequenza
SHARED LarghezzaEventoBase
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED MostraNuovoValore
SHARED ScalaEventiMusicali
SHARED SequenzaSelezionata
SHARED Spazio$
SHARED XInizioAreaVisibile
SHARED YInizioAreaVisibile
 Repeat
  NuovaXTopo.w=LimitiInteri{WMouseX,16,LarghezzaInternaFinestraEditoreSequenza-1}
  NuovaYTopo.w=LimitiInteri{WMouseY,0,AreaUtileEventiNonNote}
  TastoPremutoDelTopo.b=Joyb(0)
  TipoDiEventoMusicale$=EventoMusicale()\Tipo
  CanaleEvento.b=EventoMusicale()\Canale
  Select TipoDiEventoMusicale$
  Case "Note"
   XNuovaPosizioneNota.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizioneNota=(XNuovaPosizioneNota/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizioneNota<>XPosizioneEvento
    IncrementoXEventoMusicale.l=XNuovaPosizioneNota-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizioneNota.b=127-YInizioAreaVisibile-NuovaYTopo/8
   If YNuovaPosizioneNota<>YPosizioneEvento
    IncrementoYEventoMusicale.b=YNuovaPosizioneNota-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    Messaggio$="Note="+Str$(IncrementoYEventoMusicale)
   EndIf
  Case "Program"
   XNuovaPosizioneProgramma.l=XInizioAreaVisbile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizioneProgramma=(XNuovaPosizioneProgramma/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizioneProgramma<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizioneProgramma-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizioneProgramma.b=127-(NuovaYTopo*127.0)/AreaUtileEventiNonNote
   If YNuovaPosizioneProgramma<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizioneProgramma-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    Messaggio$="Program="+Str$(IncrementoYEventoMusicale)
   EndIf
  Case "Control"
   XNuovaPosizioneControllo.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizioneControllo=(XNuovaPosizioneControllo/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizioneControllo<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizioneControllo-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizioneControllo.b=127-(NuovaYTopo*127.0)/AreaUtileEventiNonNote
   If YNuovaPosizioneControllo<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizioneControllo-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    Messaggio$="Control="+Str$(IncrementoYEventoMusicale)
   EndIf
  Case "PolyAftertouch"
   XNuovaPosizionePressioneMultipla.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizionePressioneMultipla=(XNuovaPosizionePressioneMultipla/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizionePressioneMultipla<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizionePressioneMultipla-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizionePressioneMultipla.b=127-(NuovaYTopo*127.0)/AreaUtileEventiNonNote
   If YNuovaPosizionePressioneMultipla<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizionePressioneMultipla-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    Messaggio$="Poly="+Str$(IncrementoYEventoMusicale)
   EndIf
  Case "MonoAftertouch"
   XNuovaPosizionePressioneSingola.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizionePressioneSingola=(XNuovaPosizionePressioneSingola/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizionePressioneSingola<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizionePressioneSingola-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizionePressioneSingola.b=127-(NuovaYTopo*127.0)/AreaUtileEventiNonNote
   If YNuovaPosizionePressioneMultipla<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizionePressioneSingola-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    Messaggio$="Mono="+Str$(IncrementoYEventoMusicale)
   EndIf
  Case "PitchBend"
   XNuovaPosizioneCurvaDiPicco.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizioneCurvaDiPicco=(XNuovaPosizioneCurvaDiPicco/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizioneCurvaDiPicco<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizioneCurvaDiPicco-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizioneCurvaDiPicco.b=127-(NuovaYTopo*127.0)/AreaUtileEventiNonNote
   If YNuovaPosizioneCurvaDiPicco<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizioneCurvaDiPicco-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    Messaggio$="Bend="+Str$(IncrementoYEventoMusicale*128)
   EndIf
  Case "Tempo"
   XNuovaPosizioneTempo.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizioneTempo=(XNuovaPosizioneTempo/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizioneTempo<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizioneTempo-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizioneTempo.b=127-(NuovaYTopo*127.0)/AreaUtileEventiNonNote
   If YNuovaPosizioneTempo<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizioneTempo-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    NuoviBattiti.b=IncrementoYEventoMusicale MOD 16+1
    NuoveMisure.w=2^Abs(IncrementoYEventoMusicale/16)
    Messaggio$="Tempo=":If Sgn(IncrementoYEventoMusicale)=-1 Then Messaggio$+"-"
    Format "00":Messaggio$+Str$(NuoviBattiti)
    Format "000":Messaggio$+"/"+Str$(NuoveMisure)
    Format ""
   EndIf
  Case "BPM"
   XNuovaPosizioneBattutePerMinuto.l=XInizioAreaVisibile+(NuovaXTopo-16)*ScalaEventiMusicali
   XNuovaPosizioneBattutePerMinuto=(XNuovaPosizioneBattutePerMinuto/LarghezzaEventoBase)*LarghezzaEventoBase
   If XNuovaPosizioneBattutePerMinuto<>XPosizioneEvento
    IncrementoXEventoMusicale=XNuovaPosizioneBattutePerMinuto-XPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoXEventoMusicale=0
   EndIf
   YNuovaPosizioneBattutePerMinuto.b=97-(NuovaYTopo*97.0)/AreaUtileEventiNonNote
   If YNuovaPosizioneBattutePerMinuto<0

;---------------------------------------------------------------------------
;il valore massimo per le battute per minuto e' di 97*3, cioe' 291, piu' il
;valore di partenza che e' 10, meno 1 dato che questo e' compreso, fa 300
;the maximum value for BPM events is 97*3, that is 291, plus the start value
;that is 10, minus 1 seen that this is included, it gives 300
;--------------------------------------------------------------
    If NuovaYTopo=0 Then YNuovaPosizioneBattutePerMinuto=97:EventoMusicale()\Valore=0

;----------------------------------------------------------------------------
;il valore minimo per le battute per minuto e' di 10, che corrisponde a zero
;dato che viene sommato in seguito
;the minimum value for BPM events is 10, that correspond to zero seen that it
;is added after
;----------------
    If NuovaYTopo=AreaUtileEventiNonNote Then YNuovaPosizioneBattutePerMinuto=0:EventoMusicale()\Valore=1

   EndIf
   If YNuovaPosizioneBattutePerMinuto<>YPosizioneEvento
    IncrementoYEventoMusicale=YNuovaPosizioneBattutePerMinuto-YPosizioneEvento
    EventoMusicaleSpostatoConIlTopo=True
   Else
    IncrementoYEventoMusicale=0
   EndIf
   If IncrementoXEventoMusicale=0 AND IncrementoYEventoMusicale=0
    EventoMusicaleSpostatoConIlTopo=False
   Else
    BattutePerMinuto.w=IncrementoYEventoMusicale*3
    Messaggio$="BPM="+Str$(BattutePerMinuto)
   EndIf
  End Select
  Select TipoDiEventoMusicale$
  Case "Note"
   NuovaXEvento.l=XNuovaPosizioneNota:NuovaYEvento.b=YNuovaPosizioneNota
  Case "Program"
   NuovaXEvento=XNuovaPosizioneProgramma:NuovaYEvento=YNuovaPosizioneProgramma
  Case "Control"
   NuovaXEvento=XNuovaPosizioneControllo:NuovaYEvento=YNuovaPosizioneControllo
  Case "PolyAftertouch"
   NuovaXEvento=XNuovaPosizionePressioneMultipla:NuovaYEvento=YNuovaPosizionePressioneMultipla
  Case "MonoAftertouch"
   NuovaXEvento=XNuovaPosizionePressioneSingola:NuovaYEvento=YNuovaPosizionePressioneSingola
  Case "PitchBend"
   NuovaXEvento=XNuovaPosizioneCurvaDiPicco:NuovaYEvento=YNuovaPosizioneCurvaDiPicco
  Case "Tempo"
   NuovaXEvento=XNuovaPosizioneTempo:NuovaYEvento=YNuovaPosizioneTempo
  Case "BPM"
   NuovaXEvento=XNuovaPosizioneBattutePerMinuto:NuovaYEvento=YNuovaPosizioneBattutePerMinuto
  End Select
  MostraNuovaPosizioneEvento{NuovaXEvento,NuovaYEvento}

  WJam #DueColoriPieni
  If EventoMusicaleSpostatoConIlTopo=False
   Messaggio$="No change made"
  Else
   If IncrementoYEventoMusicale>0 Then Segno$="+" Else Segno$=""
   Messaggio$="ypos>"+Segno$+Str$(IncrementoYEventoMusicale)+" xpos>"
  EndIf
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleEvento+4) MOD 16,(CanaleEvento+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
  If IncrementoXEventoMusicale<0 Then Print "-"
  If EventoMusicaleSpostatoConIlTopo=True ConvertiIlTempoInBattute{Abs(IncrementoXEventoMusicale),0}
  VWait
  MostraNuovaPosizioneEvento{NuovaXEvento,NuovaYEvento}
 Until TastoPremutoDelTopo<>#TastoSinistroDelTopoPremuto
 If EventoMusicaleSpostatoConIlTopo=True
  PushItem EventoMusicale()
  ResetList EventoMusicale()
  While NextItem(EventoMusicale())=True
   If EventoMusicale()\Sequenza=SequenzaSelezionata
    StatoEventoMusicale.b=EventoMusicale()\Stato
    SelezioneEventoMusicale.b=StatoEventoMusicale & #EventoMusicaleSelezionato
    If EventoMusicale()\Tipo=TipoDiEventoMusicale$ AND SelezioneEventoMusicale=#EventoMusicaleSelezionato
     EventoMusicale()\Evento+IncrementoYEventoMusicale
     If TipoDiEventoMusicale$="BPM"
      EventoMusicale()\Evento=LimitiInteri{EventoMusicale()\Evento,0,97}
      If EventoMusicale()\Evento=97 Then EventoMusicale()\Valore=0
      If EventoMusicale()\Evento=0 Then EventoMusicale()\Valore=1
     Else
      EventoMusicale()\Evento=LimitiInteri{EventoMusicale()\Evento,0,127}
     EndIf
     EventoMusicale()\Inizio+IncrementoXEventoMusicale
     If EventoMusicale()\Inizio<0 Then EventoMusicale()\Inizio=0
     LunghezzaEvento.l=EventoMusicale()\Inizio+EventoMusicale()\Durata
     If DurataSequenza<LunghezzaEvento Then DurataSequenza=LunghezzaEvento
    EndIf
   EndIf
  Wend
  PopItem EventoMusicale()
 EndIf
End Statement

;----------------------------------------
;questa procedura suona la nota corrente
;this procedure plays the current note
;--------------------------------------
Statement SuonaLaNota{Nota.b,VelocitaNota.b,CanaleNota.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED NoteSuonate
SHARED PeriFreq()
SHARED Spazio$
SHARED Suono()
SHARED VoceSpenta
SHARED VoceUsata
 WJam #DueColoriPieni

 For Suono.b=0 To 31
  If Suono(Suono)\Canale=CanaleNota Then Pop For:Goto FineCicloForEsecutoreNote
 Next Suono
FineCicloForEsecutoreNote
 If Suono<32
  If Suono(Suono)\Canale>0
   Periodo.l=PeriFreq(Nota)\Periodo
   If Periodo>=#PeriodoMinimo AND Periodo<65536
    If VoceSpenta>0
     If VoceSpenta BitTst 0=True Then Voce.b=1:VoceSpenta BitClr 0:Goto SuonaSuono
     If VoceSpenta BitTst 1=True Then Voce=2:VoceSpenta BitClr 1:Goto SuonaSuono
     If VoceSpenta BitTst 2=True Then Voce=4:VoceSpenta BitClr 2:Goto SuonaSuono
     If VoceSpenta BitTst 3=True Then Voce=8:VoceSPenta BitClr 3
    EndIf
SuonaSuono
    SetPeriod Suono,Periodo:Sound Suono,Voce
    VoceUsata | Voce
    Messaggio$="Note="+Str$(Nota)
    Format "#####":Messaggio$+" frequency="+Str$(PeriFreq(Nota)\Frequenza)
    Format ""
    NoteSuonate+1
   EndIf
  EndIf
 Else
  If MIDIAttivato=True
   ByteDiStatoMIDI.b=#_NoteOn+(CanaleNota-1)
   WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
   WriteSerial #DispositivoMIDI,Nota
   WriteSerial #DispositivoMIDI,VelocitaNota
   NoteSuonate+1
  EndIf
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Note="+Str$(Nota)+" vel="+Str$(VelocitaNota)
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleNota+4) MOD 16,(CanaleNota+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;-----------------------------------------------
;questa procedura esegue il cambio di programma
;this procedure executes the program change
;-------------------------------------------
Statement EseguiIlCambioDiProgramma{Programma.b,CanaleProgramma.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED Spazio$
 WJam #DueColoriPieni

 If MIDIAttivato=True
  ByteDiStatoMIDI.b=#_ProgramChange+(CanaleProgramma-1)
  WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
  WriteSerial #DispositivoMIDI,Programma
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Program="+Str$(Programma)
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleProgramma+4) MOD 16,(CanaleProgramma+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;-----------------------------------------------
;questa procedura esegue il cambio di controllo
;this procedure executes the control change
;-------------------------------------------
Statement EseguiIlCambioDiControllo{Controllo.b,ValoreControllo,CanaleControllo.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED Spazio$
 WJam #DueColoriPieni

 If MIDIAttivato=True
  ByteDiStatoMIDI.b=#_ControlChange+(CanaleControllo-1)
  WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
  WriteSerial #DispositivoMIDI,Controllo
  WriteSerial #DispositivoMIDI,ValoreControllo
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Control="+Str$(Controllo)+" val="+Str$(ValoreControllo)
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleControllo+4) MOD 16,(CanaleControllo+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;----------------------------------------------
;questa procedura esegue la pressione multipla
;this procedure executes the polyphonic pressure
;------------------------------------------------
Statement EseguiLaPressioneMultipla{PressioneMultipla.b,CanalePressioneMultipla.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED Spazio$
 WJam #DueColoriPieni

 If MIDIAttivato=True
  ByteDiStatoMIDI.b=#_PolyphonicKeyPressure+(CanalePressioneMultipla-1)
  WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
  WriteSerial #DispositivoMIDI,PressioneMultipla
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Poly="+Str$(PressioneMultipla)
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanalePressioneMultipla+4) MOD 16,(CanalePressioneMultipla+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;---------------------------------------------
;questa procedura esegue la pressione singola
;this procedure executes the single pressure
;--------------------------------------------
Statement EseguiLaPressioneSingola{PressioneSingola.b,CanalePressioneSingola.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED Spazio$
 WJam #DueColoriPieni

 If MIDIAttivato=True
  ByteDiStatoMIDI.b=#_ChannelKeyPressure+(CanalePressioneSingola-1)
  WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
  WriteSerial #DispositivoMIDI,PressioneMultipla
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Mono="+Str$(PressioneMultipla)
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanalePressioneSingola+4) MOD 16,(CanalePressioneSingola+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;-----------------------------------------------
;questa procedura esegue la variazione di picco
;this procedure executes the pitch bending
;------------------------------------------
Statement EseguiLaCurvaDiPicco{CurvaDiPicco.w,CanaleCurvaDiPicco.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED Spazio$
 WJam #DueColoriPieni

 If MIDIAttivato=True
  ByteDiStatoMIDI.b=#_PitchBend+(CanaleCurvaDiPicco-1)
  WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
  WriteSerial #DispositivoMIDI,CurvaDiPicco MOD 128
  WriteSerial #DispositivoMIDI,CurvaDiPicco/128
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Bend>"+Str$(CurvaDiPicco-#_PitchBendCenter)
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleCurvaDiPicco+4) MOD 16,(CanaleCurvaDiPicco+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;---------------------------------------------
;questa procedura interrompe una nota suonata
;this procedure stops a played note
;-----------------------------------
Statement SmettiDiSuonareLaNota{Nota.b,VelocitaNota.b,CanaleNota.b,Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED NoteSuonate
SHARED PeriFreq()
SHARED Spazio$
SHARED Suono()
SHARED VoceSpenta
SHARED VoceUsata
 WJam #DueColoriPieni

 For Suono.b=0 To 31
  If Suono(Suono)\Canale=CanaleNota Then Pop For:Goto FineCicloForTerminatoreNote
 Next Suono
FineCicloForTerminatoreNote
 If Suono<32
  If Suono(Suono)\Canale>0
   If VoceUsata>0
    If VoceUsata BitTst 0=True Then Voce.b=1:Goto FermaSuono
    If VoceUsata BitTst 1=True Then Voce=2:Goto FermaSuono
    If VoceUsata BitTst 2=True Then Voce=4:Goto FermaSuono
    If VoceUsata BitTst 3=True Then Voce=8
FermaSuono
    Sound Suono,Voce,0
    VoceSpenta | Voce
    Messaggio$="Note>"+Str$(Nota)+" frequency>"+Str$(PeriFreq(Nota)\Frequenza)
    NoteSuonate-1
   EndIf
  EndIf
 Else
  If MIDIAttivato=True
   ByteDiStatoMIDI=#_NoteOff+(CanaleNota-1)
   WriteSerial #DispositivoMIDI,ByteDiStatoMIDI
   WriteSerial #DispositivoMIDI,Nota
   WriteSerial #DispositivoMIDI,VelocitaNota
   Messaggio$="Note>"+Str$(Nota)+" vel>"+Str$(VelocitaNota)
   NoteSuonate-1
  EndIf
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="Note="+Str$(Nota)+" stopped"
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleNota+4) MOD 16,(CanaleNota+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;---------------------------------------------------------
;questa procedura mostra gli slider dell'editore sequenza
;this procedure shows the sequence editor's sliders
;---------------------------------------------------
Statement MostraBarreEditoreSequenza{}
SHARED AreaInvisibileDelleNote
SHARED AreaInvisibileDelTempo
SHARED DurataSequenza
SHARED XInizioAreaVisibile
SHARED YInizioAreaVisibile
 MostraBarra{1,YInizioAreaVisibile,AreaInvisibileDelleNote,"VERTICAL",#ListaBottoniEditoreSequenza,#FinEditoreSequenza}
 If AreaInvisibileDelTempo=1
  Disable #ListaBottoniEditoreSequenza,2
  XInizioAreaVisibile=0
 Else
  Enable #ListaBottoniEditoreSequenza,2
 EndIf
 MostraBarra{2,XInizioAreaVisibile,AreaInvisibileDelTempo,"HORIZONTAL",#ListaBottoniEditoreSequenza,#FinEditoreSequenza}
End Statement

;-----------------------------------------------------------
;questa procedura disegna le note di sfondo con i loro nomi
;this procedure draws the notes background with note names
;----------------------------------------------------------
Statement MostraLeNoteDiSfondoConILoroNomi{}
SHARED AreaInvisibileDelleNote
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED TipoDiNota()
SHARED YInizioAreaVisibile
 WJam #DueColoriPieni

 For Tasto.b=0 To 127-AreaInvisibileDelleNote
  Nota.b=127-Tasto-YInizioAreaVisibile
  Y0Nota.w=Tasto*8:Y1Nota.w=Y0Nota+7
  If TipoDiNota(Nota)\Diesis=True
   WBox 16,Y0Nota,LarghezzaInternaFinestraEditoreSequenza-1,Y1Nota,0:WColour 1,0
  Else
   WBox 16,Y0Nota,LarghezzaInternaFinestraEditoreSequenza-1,Y1Nota,1:WColour 0,1
  EndIf
  WLocate 16,Y0Nota
  Print "Note ",Nota,">"
  Print TipoDiNota(Nota)\NomeInglese
  Print "-"
  Print TipoDiNota(Nota)\NomeItaliano
  Print TipoDiNota(Nota)\Ottava
 Next Tasto
End Statement

;-----------------------------------------------
;questa procedura mostra i numeri delle battute
;this procedure shows the bar numbers
;-------------------------------------
Statement MostraLeBattute{}
SHARED AreaInvisibileDelleNote
SHARED Battiti
SHARED EventoMusicale()
SHARED Misure
SHARED ScalaEventiMusicali
SHARED SequenzaSelezionata
SHARED Spazio$
SHARED TipoDiNota()
SHARED XInizioAreaVisibile
SHARED XLunAreaEventiMusicali
SHARED YInizioAreaVisibile
 PushItem EventoMusicale()

 WJam #DueColoriPieni
 Nota.b=127-YInizioAreaVisibile-(127-AreaInvisibileDelleNote)
 If TipoDiNota(Nota)\Diesis=True Then WColour 1,0 Else WColour 0,1
 Nota$=UStr$(Nota):OttavaNota$=UStr$(TipoDiNota(Nota)\Ottava)
 NomeIngleseNota$=TipoDiNota(Nota)\NomeInglese
 NomeItalianoNota$=TipoDiNota(Nota)\NomeItaliano
 LarghezzaTesto.w=Len("Note "+Nota$+">"+NomeIngleseNota$+"-"+NomeItalianoNota$+OttavaNota$+Spazio$)*#GrandezzaFonteTopaz
 Tempo.l=0:FineTempo.l=XInizioAreaVisibile+XLunAreaEventiMusicali*ScalaEventiMusicali
 Battuta.b=Max(ScalaEventiMusicali*4.0/Misure/4.0/2.0,1)
 IncrementoTempo.q=#TicDiBasePerQuarto/Min(ScalaEventiMusicali*Misure/4.0,8.0)
 Battito.b=1
 Misura.l=1
 Repeat
  ResetList EventoMusicale()
  While NextItem(EventoMusicale())=True
   If EventoMusicale()\Sequenza=SequenzaSelezionata AND EventoMusicale()\Tipo="Tempo" AND EventoMusicale()\Inizio<=Tempo
    EventoMusicaleEseguito.b=EventoMusicale()\Stato & #EventoMusicaleEseguito
    If EventoMusicaleEseguito=0
     NuoviBattiti.b=EventoMusicale()\Evento MOD 16+1
     NuoveMisure.w=2^(EventoMusicale()\Evento/16)
     Battuta=Max(ScalaEventiMusicali*4.0/NuoveMisure/4.0/2.0,1)
     IncrementoTempo=#TicDiBasePerQuarto/Min(ScalaEventiMusicali*NuoveMisure/4.0,8.0)
     EventoMusicale()\Stato | #EventoMusicaleEseguito
     TempoCambiato.b=True
    EndIf
   EndIf
  Wend
  XTempo.l=16+Tempo-XInizioAreaVisibile
  If XTempo>16+LarghezzaTesto-1
   WLocate XTempo,(127-AreaInvisibileDelleNote)*#GrandezzaFonteTopaz
   Battuta$=UStr$(Misura):If Len(Battuta$)>1 Then Battuta$=Left$(Battuta$,3):Print Battuta$ Else Print Battuta$,".",Battito
  EndIf
  Battito+Battuta
  If TempoCambiato=True
   If Battito>NuoviBattiti Then Misura+Battito/NuoviBattiti:Battito MOD NuoviBattiti
  Else
   If Battito>Battiti Then Misura+Battito/Battiti:Battito MOD Battiti
  EndIf
  Tempo+IncrementoTempo
 Until Tempo>FineTempo
 ResetList EventoMusicale()
 While NextItem(EventoMusicale())=True
  If EventoMusicale()\Tipo="Tempo"
   EventoMusicaleEseguito=EventoMusicale()\Stato & #EventoMusicaleEseguito
   If EventoMusicaleEseguito=#EventoMusicaleEseguito
    EventoMusicale()\Stato & %0011110111
   EndIf
  EndIf
 Wend

 PopItem EventoMusicale()
End Statement

;--------------------------------------------
;questa procedura mostra gli eventi musicali
;this procedure shows the musical events
;----------------------------------------
Statement MostraGliEventiMusicali{}
SHARED CanaleSelezionato
SHARED EventoMusicale()
SHARED MostraSoloGliEventiMusicaliDelCanaleSelezionato
SHARED MostraSoloGliEventiMusicaliDelloStessoTipo
SHARED SequenzaSelezionata
SHARED TipoDiEventoMusicaleDiBase$
 ResetList EventoMusicale()
 While NextItem(EventoMusicale())=True
  If EventoMusicale()\Sequenza=SequenzaSelezionata
   TipoDiEventoMusicale$=EventoMusicale()\Tipo
   If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
    CanaleEvento.b=EventoMusicale()\Canale
    If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
     InizioEvento.l=EventoMusicale()\Inizio
     StatoEvento.b=EventoMusicale()\Stato
     Select TipoDiEventoMusicale$
     Case "Note"
      Nota.b=EventoMusicale()\Evento:DurataNota.l=EventoMusicale()\Durata
      DisegnaUnEventoMusicale{"Note",Nota,InizioEvento,DurataNota,CanaleEvento,StatoEvento}
     Case "Program"
      Programma.b=EventoMusicale()\Evento
      DisegnaUnEventoMusicale{"Program",Programma,InizioEvento,0,CanaleEvento,StatoEvento}
     Case "Control"
      Controllo.b=EventoMusicale()\Evento
      DisegnaUnEventoMusicale{"Control",Controllo,InizioEvento,0,CanaleEvento,StatoEvento}
     Case "PolyAftertouch"
      PressioneMultipla.b=EventoMusicale()\Evento
      DisegnaUnEventoMusicale{"PolyAftertouch",PressioneMultipla,InizioEvento,0,CanaleEvento,StatoEvento}
     Case "MonoAftertouch"
      PressioneSingola.b=EventoMusicale()\Evento
      DisegnaUnEventoMusicale{"MonoAftertouch",PressioneSingola,InizioEvento,0,CanaleEvento,StatoEvento}
     Case "PitchBend"
      CurvaDiPicco.w=EventoMusicale()\Evento*128+EventoMusicale()\Valore
      DisegnaUnEventoMusicale{"PitchBend",CurvaDiPicco,InizioEvento,0,CanaleEvento,StatoEvento}
     Case "Tempo"
      Tempo.b=EventoMusicale()\Evento
      DisegnaUnEventoMusicale{"Tempo",Tempo,InizioEvento,0,CanaleEvento,StatoEvento}
     Case "BPM"
      BattutePerMinuto.w=9+EventoMusicale()\Evento*3+EventoMusicale()\Valore
      DisegnaUnEventoMusicale{"BPM",BattutePerMinuto,InizioEvento,0,CanaleEvento,StatoEvento}
     End Select
    EndIf
   EndIf
  EndIf
 Wend
End Statement

;--------------------------------------------
;questa procedura esegue gli eventi musicali
;this procedure executes the musical events
;-------------------------------------------
Statement EseguiGliEventiMusicali{Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED CanaleSelezionato
SHARED DurataSequenza
SHARED EventoMusicale()
SHARED LarghezzaBottoniEditoreSequenza
SHARED LunghezzaBrano
SHARED TicPerCinquantesimoDiSecondo
SHARED MostraSoloGliEventiMusicaliDelCanaleSelezionato
SHARED MostraSoloGliEventiMusicaliDelloStessoTipo
SHARED ScalaEventiMusicali
SHARED Sequenza()
SHARED SequenzaNellaTraccia()
SHARED SequenzaSelezionata
SHARED Spazio$
SHARED Suono
SHARED TastoFuga$
SHARED TipoDiEventoMusicaleDiBase$
SHARED XInizioAreaVisibile
SHARED XLunAreaEventiMusicali
 WJam #DueColoriPieni

 If LunghezzaBrano=0 Then Statement Return

 NuoviTicPerCinquantesimoDiSecondo.q=TicPerCinquantesimoDiSecondo
 Tempo.l=0

 If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
  FineEsecuzione.l=LunghezzaBrano
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  FineEsecuzione=DurataSequenza
  FineTempoVisibile.l=XLunAreaEventiMusicali*ScalaEventiMusicali
 EndIf
 Repeat
  ResetList EventoMusicale()
  While NextItem(EventoMusicale())=True
   SequenzaEventoMusicale.l=EventoMusicale()\Sequenza
   If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
    ResetList Sequenza()
    SequenzaCorrente.l=0
    While NextItem(Sequenza())=True
     SequenzaCorrente+1
     If SequenzaCorrente=SequenzaEventoMusicale
      ResetList SequenzaNellaTraccia()
      While NextItem(SequenzaNellaTraccia())=True
       If SequenzaNellaTraccia()\Sequenza=SequenzaCorrente AND InizioSequenzaNellaTraccia.l>=Tempo
       If InizioSequenzaNellaTraccia<SequenzaNellaTraccia()\Inizio Then InizioSequenzaNellaTraccia=SequenzaNellaTraccia()\Inizio
       EndIf
      Wend
      Pop If:Pop While:Goto FineCicloRicercaSequenzaDaSuonare
     EndIf
    Wend
   EndIf
FineCicloRicercaSequenzaDaSuonare
   If SequenzaEventoMusicale=SequenzaSelezionata OR Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
    If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
     InizioEventoMusicale.l=InizioSequenzaNellaTraccia+EventoMusicale()\Inizio
    EndIf
    If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
     InizioEventoMusicale=EventoMusicale()\Inizio
    EndIf
    TipoDiEventoMusicale$=EventoMusicale()\Tipo
    DurataEventoMusicale.l=EventoMusicale()\Durata
    FineEventoMusicale.l=InizioEventoMusicale+DurataEventoMusicale-1
    ValoreEventoMusicale.b=EventoMusicale()\Valore
    CanaleEventoMusicale.b=EventoMusicale()\Canale
    EventoMusicaleEseguito.b=EventoMusicale()\Stato & #EventoMusicaleEseguito
    EventoMusicaleTerminato.b=EventoMusicale()\Stato & #EventoMusicaleTerminato
    If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
     If CanaleEventoMusicale=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
      If EventoMusicaleEseguito=0 AND EventoMusicaleTerminato=0 AND InizioEventoMusicale.l<=Tempo
       If TipoDiEventoMusicale$<>""
        Select TipoDiEventoMusicale$
        Case "Note"
         Nota.b=EventoMusicale()\Evento
         VelocitaNota.b=ValoreEventoMusicale
         SuonaLaNota{Nota,VelocitaNota,CanaleEventoMusicale,Modo}
        Case "Program"
         Programma.b=EventoMusicale()\Evento
         EseguiIlCambioDiProgramma{Programma,CanaleEventoMusicale,Modo}
        Case "Control"
         Controllo.b=EventoMusicale()\Evento
         ValoreControllo.b=ValoreEventoMusicale
         EseguiIlCambioDiControllo{Controllo,ValoreControllo,CanaleEventoMusicale,Modo}
        Case "PolyAftertouch"
         PressioneMultipla.b=EventoMusicale()\Evento
         EseguiLaPressioneMultipla{PressionMultipla,CanaleEventoMusicale,Modo}
        Case "MonoAftertouch"
         PressioneSingola.b=EventoMusicale()\Evento
         EseguiLaPressioneSingola{PressioneSingola,CanaleEventoMusicale,Modo}
        Case "PitchBend"
         CurvaDiPicco.w=EventoMusicale()\Evento*128+EventoMusicale()\Valore
         EseguiLaCurvaDiPicco{CurvaDiPicco,CanaleEventoMusicale,Modo}
        Case "Tempo"
         NuovoTempo.b=EventoMusicale()\Evento
         MostraIlTempo{NuovoTempo,CanaleEventoMusicale,Modo}
        Case "BPM"
         NuoveBattutePerMinuto.w=9+EventoMusicale()\Evento*3+EventoMusicale()\Valore
         NuoviTicPerCinquantesimoDiSecondo.q=(#TicDiBasePerQuarto*4.0*NuoveBattutePerMinuto)/3000
         MostraLeBattutePerMinuto{NuoveBattutePerMinuto,CanaleEventoMusicale,Modo}
        End Select
        If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
         Evento.b=EventoMusicale()\Evento
         ValoreEvento.b=ValoreEventoMusicale
         InizioEvento.l=InizioEventoMusicale
         DurataEvento.l=DurataEventoMusicale
         CanaleEvento.b=CanaleEventoMusicale
         If TipoDiEventoMusicale$="PitchBend"
          DisegnaUnEventoMusicale{"PitchBend",CurvaDiPicco,InizioEvento,DurataEvento,CanaleEvento,#EventoMusicaleEseguito}
         Else
          If TipoDiEventoMusicale$="BPM"
           DisegnaUnEventoMusicale{"BPM",9+Evento*3+ValoreEvento,InizioEvento,DurataEvento,CanaleEvento,#EventoMusicaleEseguito}
          Else
           DisegnaUnEventoMusicale{TipoDiEventoMusicale$,Evento,InizioEvento,DurataEvento,CanaleEvento,#EventoMusicaleEseguito}
          EndIf
         EndIf
        EndIf
        EventoMusicale()\Stato | #EventoMusicaleEseguito
       EndIf
      EndIf
      If EventoMusicaleEseguito=#EventoMusicaleEseguito AND EventoMusicaleTerminato=0 AND FineEventoMusicale<=Tempo
       If TipoDiEventoMusicale$<>""
        If TipoDiEventoMusicale$="Note"
         Nota=EventoMusicale()\Evento
         VelocitaNota=ValoreEventoMusicale
         SmettiDiSuonareLaNota{Nota,VelocitaNota,CanaleEventoMusicale,Modo}
        EndIf
        If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
         Evento=EventoMusicale()\Evento
         ValoreEvento=ValoreEventoMusicale
         InizioEvento=InizioEventoMusicale
         DurataEvento=DurataEventoMusicale
         CanaleEvento=CanaleEventoMusicale
         StatoOriginaleEvento.b=EventoMusicale()\Stato & %0011110111
         If TipoDiEventoMusicale$="PitchBend"
          DisegnaUnEventoMusicale{"PitchBend",CurvaDiPicco,InizioEvento,DurataEvento,CanaleEvento,StatoOriginaleEvento}
         Else
          If TipoDiEventoMusicale$="BPM"
           DisegnaUnEventoMusicale{"BPM",9+Evento*3+ValoreEvento,InizioEvento,DurataEvento,CanaleEvento,StatoOriginaleEvento}
          Else
           DisegnaUnEventoMusicale{TipoDiEventoMusicale$,Evento,InizioEvento,DurataEvento,CanaleEvento,StatoOriginaleEvento}
          EndIf
         EndIf
        EndIf
        EventoMusicale()\Stato | #EventoMusicaleTerminato
       EndIf
      EndIf
     EndIf
    EndIf
   EndIf
  Wend

  Tempo+NuoviTicPerCinquantesimoDiSecondo

  If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
   WColour 10,11
   WLocate 0,0:Print String$(Spazio$,80)
   WLocate 0,0:Print "Playing song, now at ":ConvertiIlTempoInBattute{Tempo,1}:Print "..."
  EndIf
  If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
   If Tempo-XInizioAreaVisibile>FineTempoVisibile
    XInizioAreaVisibile=Tempo
    MostraLeNoteDiSfondoConILoroNomi{}
    MostraLeBattute{}
    MostraGliEventiMusicali{}
    MostraBarreEditoreSequenza{}
   EndIf
  EndIf

  VWait
  EventoEsecutoreEventiMusicali.l=Event

  Select EventoEsecutoreEventiMusicali
  Case #HaiChiusoLaFinestra
   Pop Select:Pop Repeat:Goto FineCicloEsecuzioneEventiMusicali
  Case #HaiAttivatoIlMenu
   Select Modo
   Case #EseguiGliEventiMusicaliDallaFinestraPrincipale
    If MenuHit=1 AND ItemHit=2 Then Pop Select:Pop Select:Pop Repeat:Goto FineCicloEsecuzioneEventiMusicali
   Case #EseguiGliEventiMusicaliDallEditoreSequenza
    If MenuHit=0 AND ItemHit=2 Then Pop Select:Pop Select:Pop Repeat:Goto FineCicloEsecuzioneEventiMusicali
   End Select
  Case #HaiPremutoUnBottone
   If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale AND GadgetHit=1
    LunghezzaBarra.w=LarghezzaInternaFinestraPrincipale
    BattutePerMinuto=10+ValoreBarra{1,300-9,LunghezzaBarra,"HORIZONTAL",#ListaBottoniPrincipale}
    NuoviTicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto)/3000
    MostraLeBattutePerMinuto{BattutePerMinuto,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
   EndIf
  Case #HaiRilasciatoUnBottone
   If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale AND GadgetHit=1
    LunghezzaBarra.w=LarghezzaInternaFinestraPrincipale
    BattutePerMinuto=10+ValoreBarra{1,300-9,LunghezzaBarra,"HORIZONTAL",#ListaBottoniPrincipale}
    NuoviTicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto)/3000
    MostraLeBattutePerMinuto{BattutePerMinuto,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
   EndIf
  Case #HaiPremutoUnTasto
   TastoPremuto$=LCase$(Inkey$)
   Select TastoPremuto$
   Case TastoFuga$
    Pop Select:Pop Select:Pop Repeat:Goto FineCicloEsecuzioneEventiMusicali
   Case Spazio$
    Pop Select:Pop Select:Pop Repeat:Goto FineCicloEsecuzioneEventiMusicali
   End Select
  End Select
 Until Tempo>=FineEsecuzione

FineCicloEsecuzioneEventiMusicali

 Sound Suono,%1111,0,0,0,0
 ResetList EventoMusicale()
 While NextItem(EventoMusicale())=True
  EventoMusicaleEseguito.b=EventoMusicale()\Stato & #EventoMusicaleEseguito
  If EventoMusicaleEseguito=#EventoMusicaleEseguito
   If EventoMusicale()\Tipo="Note"
    Nota=EventoMusicale()\Evento
    VelocitaNota=EventoMusicale()\Valore
    CanaleNota.b=EventoMusicale()\Canale
    SmettiDiSuonareLaNota{Nota,VelocitaNota,CanaleNota,Modo}
   EndIf
   EventoMusicale()\Stato & %0011100111
  EndIf
 Wend
 ResetList Sequenza()
 ResetList SequenzaNellaTraccia()
 If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale Then Use Window #FinPrincipale
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza Then Use Window #FinEditoreSequenza
End Statement

;----------------------------------------------------------
;questa procedura interrompe l'esecuzione di tutte le note
;this procedure stops all notes execution
;-----------------------------------------
Statement InterrompiTutteLeNote{Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED LarghezzaBottoniEditoreSequenza
SHARED MIDIAttivato
SHARED Spazio$
SHARED Suono
 WJam #DueColoriPieni

 If MIDIAttivato=True
  For Canale.b=1 To 16
   EseguiIlCambioDiControllo{#_AllNotesOff,127,Canale,Modo}
   EseguiIlCambioDiControllo{#_ResetCtrl,127,Canale,Modo}
  Next Canale
  Sound Suono,%1111,0,0,0,0
 EndIf
 WColour 10,11
 If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
  WLocate 0,0:Print String$(Spazio$,80)
  WLocate 0,0:Print "Resetting MIDI devices, please wait..."
 EndIf
 If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
  Messaggio$="All notes off!"
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print Messaggio$
 EndIf
End Statement

;-------------------------------------------------------
;questa procedura imposta il menu dell'editore sequenza
;this procedure sets the sequence editor menu
;---------------------------------------------
Statement ImpostaMenuEditoreSequenza{}
SHARED MostraSoloGliEventiMusicaliDelloStessoTipo
SHARED MostraNuovoValore
SHARED TipoDiEventoMusicaleDiBase$

 Free MenuList #ListaMenuEditoreSequenza

;-----------------------------------------------------------
;imposta il colore del testo nel menu' ad acquamarina scuro
;sets the menu text colour to dark cyan
;---------------------------------------
 MenuColour #ColAcquamarina+#Scuro

 MenuTitle #ListaMenuEditoreSequenza,0,"Controls"
 MenuItem #ListaMenuEditoreSequenza,0,0,0,"Play"
 MenuItem #ListaMenuEditoreSequenza,0,0,1,"Record"
 MenuItem #ListaMenuEditoreSequenza,0,0,2,"Stop"

 MenuTitle #ListaMenuEditoreSequenza,1,"Edit"
 MenuItem #ListaMenuEditoreSequenza,0,1,0,"All"
 MenuItem #ListaMenuEditoreSequenza,0,1,1,"None"
 MenuItem #ListaMenuEditoreSequenza,0,1,2,"Toggle"
 MenuItem #ListaMenuEditoreSequenza,0,1,3,"Cut"
 MenuItem #ListaMenuEditoreSequenza,0,1,4,"Copy"
 MenuItem #ListaMenuEditoreSequenza,0,1,5,"Paste"
 MenuItem #ListaMenuEditoreSequenza,0,1,6,"Forget"
 MenuItem #ListaMenuEditoreSequenza,0,1,7,"Goto"

 MenuTitle #ListaMenuEditoreSequenza,2,"Event type"
 Select TipoDiEventoMusicaleDiBase$
 Case "Note"
  MenuItem #ListaMenuEditoreSequenza,4,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,4,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,4,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "PolyAftertouch"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,4,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "MonoAftertouch"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,4,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,4,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,4,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,2,2,7,"  BPM"
 Case "BPM"
  MenuItem #ListaMenuEditoreSequenza,2,2,0,"  Note"
  MenuItem #ListaMenuEditoreSequenza,2,2,1,"  Program"
  MenuItem #ListaMenuEditoreSequenza,2,2,2,"  Control"
  MenuItem #ListaMenuEditoreSequenza,2,2,3,"  PolyPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,4,"  MonoPressure"
  MenuItem #ListaMenuEditoreSequenza,2,2,5,"  PitchBend"
  MenuItem #ListaMenuEditoreSequenza,2,2,6,"  Tempo"
  MenuItem #ListaMenuEditoreSequenza,4,2,7,"  BPM"
 End Select
 If MostraSoloGliEventiMusicaliDelloStessoTipo=True
  MenuItem #ListaMenuEditoreSequenza,3,2,8,"  Alone"
 Else
  MenuItem #ListaMenuEditoreSequenza,1,2,8,"  Alone"
 EndIf

 MenuTitle #ListaMenuEditoreSequenza,3,"Settings"
 MenuItem #ListaMenuEditoreSequenza,0,3,0,"Basic event"
 If MostraNuovoValore=True
  MenuItem #ListaMenuEditoreSequenza,3,3,1,"  Show dragged event value"
 Else
  MenuItem #ListaMenuEditoreSequenza,1,3,1,"  Show dragged event value"
 EndIf

 MenuTitle #ListaMenuEditoreSequenza,4,"Help"
 MenuItem #ListaMenuEditoreSequenza,0,4,0,"Left mouse button"
 MenuItem #ListaMenuEditoreSequenza,0,4,1,"Keys to use"
 MenuItem #ListaMenuEditoreSequenza,0,4,2,"Notes on keys"

;-------------------------------
;attacca il menu' alla finestra
;attaches menu to window
;------------------------
 SetMenu #ListaMenuEditoreSequenza
End Statement

;--------------------------------------
;questa procedura mostra i canali MIDI
;this procedure shows the MIDI channels
;---------------------------------------
Statement MostraICanali{}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED CanaleSelezionato
 Format "00"
 Y0Canale.w=AltezzaInternaFinestraEditoreSequenza-8
 For Canale.b=1 To 16
  X0Canale.w=(Canale-1)*16
  If Canale=CanaleSelezionato
   WJam #DueColoriPieni
   WColour (Canale+4) MOD 16,(Canale+9) MOD 16
   WLocate X0Canale,Y0Canale:Print Canale
  Else
   DisegnaBottone{Str$(Canale),X0Canale,Y0Canale,6+2*Canale MOD 2}
  EndIf
 Next Canale
 Format ""
End Statement

;------------------------------------------------------------
;questa procedura selezione e/o modifica gli eventi musicali
;this procedure selectes and/or modifies the musical events
;-----------------------------------------------------------
Statement Selezione{Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AreaUtileEventiNonNote
SHARED BottonePremuto
SHARED CanaleSelezionato
SHARED DurataSequenza
SHARED EventoMusicale()
SHARED EventoMusicaleSelezionato
SHARED EventoMusicaleSpostatoConIlTopo
SHARED EventiMusicali
SHARED EventiMusicaliSelezionati
SHARED LarghezzaBottoniEditoreSequenza
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED LarghezzaEventoBase
SHARED MIDIAttivato
SHARED MostraSoloGliEventiMusicaliDelCanaleSelezionato
SHARED MostraSoloGliEventiMusicaliDelloStessoTipo
SHARED NotaSuonata
SHARED PeriFreq()
SHARED PuntoDInserimento
SHARED ScalaEventiMusicali
SHARED SequenzaSelezionata
SHARED Spazio$
SHARED Suono()
SHARED TastiDelTopo
SHARED TipoDiEventoMusicaleDiBase$
SHARED ValoreEventoBase
SHARED XAreaDelTopo
SHARED XInizioAreaVisibile
SHARED XLunAreaEventiMusicali
SHARED XTopo
SHARED YAreaDelTopo
SHARED YInizioAreaVisibile
SHARED YTopo
 WJam #DueColoriPieni

 ResetList EventoMusicale()
 XTopo=LimitiInteri{XTopo,16,LarghezzaInternaFinestraEditoreSequenza-1}
 YTopo=LimitiInteri{YTopo,0,AreaUtileEventiNonNote}
 StessoEvento.b=%00000
 While NextItem(EventoMusicale())=True
  StessoEvento=%00000
  TipoDiEventoMusicale$=EventoMusicale()\Tipo
  If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
   CanaleEvento.b=EventoMusicale()\Canale
   If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
    InizioEvento.l=EventoMusicale()\Inizio
    FineEvento.l=EventoMusicale()\Inizio+EventoMusicale()\Durata-1

    If TipoDiEventoMusicale$="Note"
     AltezzaEvento.b=127-YInizioAreaVisibile-YTopo/8
    Else
     If TipoDiEventoMusicale$="BPM"
      AltezzaEvento=97-(YTopo*97.0)/AreaUtileEventiNonNote
     Else
      AltezzaEvento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EndIf
    EndIf

    EventoMusicale.b=LimitiInteri{EventoMusicale()\Evento,0,127}
    SequenzaEvento.w=EventoMusicale()\Sequenza
    SelezioneEventoMusicale.b=EventoMusicale()\Stato & #EventoMusicaleSelezionato
    EventoMusicaleTagliato.b=EventoMusicale()\Stato & #EventoMusicaleTagliato
    EventoMusicaleCopiato.b=EventoMusicale()\Stato & #EventoMusicaleCopiato
    If Modo=#SelezionaUnEventoMusicale
     Select TipoDiEventoMusicale$
     Case "Note"
      Nota.b=EventoMusicale
      VelocitaNota.b=EventoMusicale()\Valore
      XPosizioneNota.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizioneNota>=InizioEvento Then StessoEvento | %00001
      If XPosizioneNota<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=Nota Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new note|with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneNota,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        Else
         Nota=EventoMusicale()\Evento
         InizioNota=EventoMusicale()\Inizio
        EndIf
       Else
        NotaPiuLunga.l=DurataNota
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       NotaSuonata\Evento=Nota,VelocitaNota,0,DurataNota,CanaleEvento
       SuonaLaNota{NotaSuonata\Evento,NotaSuonata\Valore,NotaSuonata\Canale,#EseguiGliEventiMusicaliDallEditoreSequenza}
       NotaSuonata\Stato=True
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "Program"
      Programma.b=EventoMusicale
      LunghezzaEvento.l=Len("Program000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
      XPosizioneProgramma.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizioneProgramma>=InizioEvento Then StessoEvento | %00001
      If XPosizioneProgramma<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=Programma Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new program|with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneProgramma,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "Control"
      Controllo.b=EventoMusicale
      LunghezzaEvento=Len("Control000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
      XPosizioneControllo.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizioneControllo>=InizioEvento Then StessoEvento | %00001
      If XPosizioneControllo<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=Controllo Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new control|with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneControllo,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "PolyAftertouch"
      PressioneMultipla.b=EventoMusicale
      LunghezzaEvento=Len("Poly000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
    XPosizionePressioneMultipla.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizionePressioneMultipla>=InizioEvento Then StessoEvento | %00001
      If XPosizionePressioneMultipla<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=PressioneMultipla Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new poly|pressure with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizionePressioneMultipla,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "MonoAftertouch"
      PressioneSingola.b=EventoMusicale
      LunghezzaEvento=Len("Mono000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
     XPosizionePressioneSingola.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizionePressioneSingola>=InizioEvento Then StessoEvento | %00001
      If XPosizionePressioneSingola<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=PressioneSingola Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new mono|pressure with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizionePressioneSingola,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "PitchBend"
      CurvaDiPicco.b=EventoMusicale
      LunghezzaEvento=Len("Bend+0000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
      XPosizioneCurvaDiPicco.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizioneCurvaDiPicco>=InizioEvento Then StessoEvento | %00001
      If XPosizioneCurvaDiPicco<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=CurvaDiPicco Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new pitch bend|with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneCurvaDiPicco,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "Tempo"
      Tempo.b=EventoMusicale
      LunghezzaEvento=Len("Tempo00/000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
      XPosizioneTempo.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizioneTempo>=InizioEvento Then StessoEvento | %00001
      If XPosizioneTempo<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=Tempo Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new tempo|with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneTempo,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     Case "BPM"
      BattutePerMinuto.b=EventoMusicale
      LunghezzaEvento=Len("BPM000")*#GrandezzaFonteTopaz
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato Then LunghezzaEvento+Len("X")*#GrandezzaFonteTopaz
      FineEvento=InizioEvento+LunghezzaEvento-1
     XPosizioneBattutePerMinuto.l=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
      If XPosizioneBattutePerMinuto>=InizioEvento Then StessoEvento | %00001
      If XPosizioneBattutePerMinuto<=FineEvento Then StessoEvento | %00010
      If AltezzaEvento=BattutePerMinuto Then StessoEvento | %00100
      If SequenzaEvento=SequenzaSelezionata Then StessoEvento | %01000
      If StessoEvento=%01111
       If CanaleSelezionato<>CanaleEvento
        If CanaleSelezionato=0
         CanaleSelezionato=CanaleEvento
         MostraICanali{}
         StessoEvento | %10000
        Else
         RichiestaPannello{"TITOLO","Would you add a new BPM|with the current channel?","Yes|No"}
         AggiungiEvento=BottonePremuto
         If AggiungiEvento=1
          CanaleEvento=CanaleSelezionato
         Else
          CanaleSelezionato=CanaleEvento
          MostraICanali{}
          StessoEvento | %10000
         EndIf
        EndIf
       EndIf
       If SelezioneEventoMusicale=#EventoMusicaleSelezionato
        If TastiDelTopo=#TastoSinistroDelTopoPremuto
         MuoviConIlTopoGliEventiMusicaliSelezionati{XPosizioneBattutePerMinuto,AltezzaEvento}
        EndIf
        If EventoMusicaleSpostatoConIlTopo=False
         EventiMusicaliSelezionati-1
         EventoMusicale()\Stato & %0011111110
        EndIf
       Else
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       EndIf
       EventoMusicaleSelezionato=EventoMusicale()\Evento
       TipoDiEventoMusicaleDiBase$=TipoDiEventoMusicale$
       ImpostaMenuEditoreSequenza{}
       StessoEvento | %10000
       Pop If:Pop Select:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileSelezione
      EndIf
     End Select
    Else
     If SequenzaEvento=SequenzaSelezionata
      If SelezioneEventoMusicale=#EventoMusicaleSelezionato
       Select Modo
       Case #CambiaIlCanaleDegliEventiMusicaliSelezionati
        EventoMusicale()\Canale=CanaleSelezionato
       Case #AlzaDiUnoGliEventiMusicaliSelezionati
        If TipoDiEventoMusicale$="BPM"
         If EventoMusicale<97
          EventoMusicale()\Valore+1
          If EventoMusicale()\Valore>2
           EventoMusicale()\Valore=0:EventoMusicale()\Evento+1
          EndIf
         EndIf
        Else
         If EventoMusicale<127 Then EventoMusicale()\Evento+1
        EndIf
       Case #AbbassaDiUnoGliEventiMusicaliSelezionati
        If TipoDiEventoMusicale$="BPM"
         If EventoMusicale>0
          EventoMusicale()\Valore-1
          If EventoMusicale()\Valore<0
           EventoMusicale()\Valore=2:EventoMusicale()\Evento-1
          EndIf
         Else
          If EventoMusicale()\Valore>1 Then EventoMusicale()\Valore-1
         EndIf
        Else
         If EventoMusicale>0 Then EventoMusicale()\Evento-1
        EndIf
       Case #SpostaAvantiNelTempoGliEventiMusicaliSelezionati
        EventoMusicale()\Inizio+LarghezzaEventoBase
       Case #SpostaIndietroNelTempoGliEventiMusicaliSelezionati
        EventoMusicale()\Inizio-LarghezzaEventoBase:If EventoMusicale()\Inizio<0 Then EventoMusicale()\Inizio=0
       Case #EliminaGliEventiMusicaliSelezionati
        DurataEventoMusicale.l=EventoMusicale()\Durata
        If DurataEventoMusicale<LarghezzaEventoBase Then DurataEventoMusicale=LarghezzaEventoBase
        EventoMusicale()\Tipo="",0,0,0,0,0,0,0:KillItem EventoMusicale()
        EventiMusicali-1:EventiMusicaliSelezionati-1
        If EventiMusicali=0 Then DurataSequenza=0
       Case #DeselezionaTuttiGliEventiMusicali
        EventiMusicaliSelezionati-1
        EventoMusicale()\Stato & %0011111110
       Case #InvertiLaSelezioneDiTuttiGliEventiMusicali
        EventiMusicaliSelezionati-1
        EventoMusicale()\Stato & %0011111110
       Case #TagliaGliEventiMusicaliSelezionati
        EventoMusicale()\Stato & %00111111001
        EventoMusicale()\Stato | #EventoMusicaleTagliato
       Case #CopiaGliEventiMusicaliSelezionati
        EventoMusicale()\Stato & %00111111001
        EventoMusicale()\Stato | #EventoMusicaleCopiato
       End Select
       Select TipoDiEventoMusicale$
       Case "Note"
        Select Modo
        Case #AllungaLaDurataDelleNoteSelezionate
         If EventoMusicale()\Durata=LarghezzaEventoBase/2
          EventoMusicale()\Durata=LarghezzaEventoBase
         Else
          EventoMusicale()\Durata+LarghezzaEventoBase
         EndIf
         If NotaPiuLunga<EventoMusicale()\Durata Then NotaPiuLunga=EventoMusicale()\Durata
         LunghezzaEvento=EventoMusicale()\Inizio+EventoMusicale()\Durata
         If DurataSequenza<LunghezzaEvento Then DurataSequenza=LunghezzaEvento
        Case #RiduciLaDurataDelleNoteSelezionate
         EventoMusicale()\Durata-LarghezzaEventoBase
         If EventoMusicale()\Durata<LarghezzaEventoBase/2 Then EventoMusicale()\Durata=LarghezzaEventoBase/2
         If NotaPiuLunga<EventoMusicale()\Durata Then NotaPiuLunga=EventoMusicale()\Durata
        Case #AlzaDiUnOttavaLeNoteSelezionate
         EventoMusicale()\Evento+12
         If EventoMusicale()\Evento>127 Then EventoMusicale()\Evento=127
        Case #AbbassaDiUnOttavaLeNoteSelezionate
         EventoMusicale()\Evento-12
         If EventoMusicale()\Evento<0 Then EventoMusicale()\Evento=0
        Case #CambiaIlValoreDegliEventiMusicaliSelezionati
         EventoMusicale()\Valore=ValoreEventoBase
        End Select
       Case "Tempo"
        NuoviBattiti.b=EventoMusicale MOD 16+1
        NuoveMisure.w=2^(EventoMusicale/16)
        Select Modo
        Case #AggiungiUnBattitoAlTempoSelezionato
         NuoviBattiti+1:If NuoviBattiti>16 Then NuoviBattiti=16
        Case #TogliUnBattitoAlTempoSelezionato
         NuoviBattiti-1:If NuoviBattiti<1 Then NuoviBattiti=1
        Case #AggiungiUnaMisuraAlTempoSelezionato
         NuoveMisure+NuoveMisure:If NuoveMisure>128 Then NuoveMisure=128
        Case #TogliUnaMisuraAlTempoSelezionato
         NuoveMisure/2:If NuoveMisure<1 Then NuoveMisure=1
        End Select
        EventoMusicale()\Evento=EsponenteDiDue{NuoveMisure}*16+NuoviBattiti-1
       Case "BPM"
        Select Modo
        Case #AggiungiDieciAgliEventiMusicaliSelezionati
         If EventoMusicale<94
          EventoMusicale()\Evento+3
          EventoMusicale()\Valore+1
          If EventoMusicale()\Valore>2
           EventoMusicale()\Valore=0:EventoMusicale()\Evento+1
          EndIf
         EndIf
        Case #SottraiDieciAgliEventiMusicaliSelezionati
         If EventoMusicale>3
          EventoMusicale()\Evento-3:EventoMusicale()\Valore-1
          If EventoMusicale()\Valore<0
           EventoMusicale()\Evento-1:EventoMusicale()\Valore=2
          EndIf
         Else
          If EventoMusicale()\Evento>2 AND EventoMusicale()\Valore>1
           EventoMusicale()\Evento-3:EventoMusicale()\Valore-1
          EndIf
         EndIf
        End Select
       Default
        Select Modo
        Case #AggiungiOttoAgliEventiMusicaliSelezionati
         EventoMusicale+8:If EventoMusicale>127 Then EventoMusicale=127
         EventoMusicale()\Evento=EventoMusicale
        Case #SottraiOttoAgliEventiMusicaliSelezionati
         EventoMusicale-8:If EventoMusicale<0 Then EventoMusicale=0
         EventoMusicale()\Evento=EventoMusicale
        End Select
       End Select
      Else
       Select Modo
       Case #SelezionaTuttiGliEventiMusicali
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       Case #InvertiLaSelezioneDiTuttiGliEventiMusicali
        EventiMusicaliSelezionati+1
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
       Case #SelezionaGliEventiMusicaliNellAreaDelTopo
        If XAreaDelTopo<XTopo Then Exchange XTopo,XAreaDelTopo
        If YAreaDelTopo<YTopo Then Exchange YTopo,YAreaDelTopo
        I.w=16+(InizioEvento-XInizioAreaVisibile)/ScalaEventiMusicali
        F.w=16+(FineEvento-XInizioAreaVisibile)/ScalaEventiMusicali
        If TipoDiEventoMusicale$="Note"
         YPosizioneEvento.w=(127-EventoMusicale-YInizioAreaVisibile)*8
        Else
         YPosizioneEvento=AreaUtileEventiNonNote*(127.0-EventoMusicale)/127
        EndIf
        A.w=YPosizioneEvento
        B.w=YPosizioneEvento+7
        If A>=YTopo AND B<=YAreaDelTopo AND I>=XTopo AND F<=XAreaDelTopo
         EventiMusicaliSelezionati+1
         EventoMusicale()\Stato | #EventoMusicaleSelezionato
        EndIf
       End Select
      EndIf
     EndIf
    EndIf
   EndIf
  EndIf
 Wend
FineCicloWhileSelezione
 If Modo=#SelezionaUnEventoMusicale AND StessoEvento<%0011111
  If CanaleSelezionato>0
   LastItem EventoMusicale()
   If AddItem(EventoMusicale())=True
    EventiMusicali+1
    EventoMusicale()\Inizio=((XInizioAreaVisibile+(XTopo-16)*ScalaEventiMusicali)/LarghezzaEventoBase)*LarghezzaEventoBase
    EventoMusicale()\Canale=CanaleSelezionato
    EventoMusicale()\Sequenza=SequenzaSelezionata
    EventoMusicale()\Stato=0
    EventoMusicale()\Tipo=TipoDiEventoMusicaleDiBase$
    Select TipoDiEventoMusicaleDiBase$
    Case "Note"
     EventoMusicale()\Evento=127-YInizioAreaVisibile-YTopo/8
     EventoMusicale()\Valore=ValoreEventoBase
     EventoMusicale()\Durata=LarghezzaEventoBase
     NotaSuonata\Evento=EventoMusicale()\Evento,EventoMusicale()\Valore,0,EventoMusicale()\Durata,EventoMusicale()\Canale
     SuonaLaNota{NotaSuonata\Evento,NotaSuonata\Valore,NotaSuonata\Canale,#EseguiGliEventiMusicaliDallEditoreSequenza}
     NotaSuonata\Stato=True
    Case "Program"
     EventoMusicale()\Evento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EventoMusicale()\Durata=2
    Case "Control"
     EventoMusicale()\Evento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EventoMusicale()\Durata=2
     EventoMusicale()\Valore=ValoreEventoBase
    Case "PolyAftertouch"
     EventoMusicale()\Evento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EventoMusicale()\Durata=2
    Case "MonoAftertouch"
     EventoMusicale()\Evento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EventoMusicale()\Durata=2
    Case "PitchBend"
     EventoMusicale()\Evento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EventoMusicale()\Durata=2
    Case "Tempo"
     EventoMusicale()\Evento=127-(YTopo*127.0)/AreaUtileEventiNonNote
     EventoMusicale()\Durata=2
    Case "BPM"
     EventoMusicale()\Evento=97-(YTopo*97.0)/AreaUtileEventiNonNote
     If EventoMusicale()\Evento=97 Then EventoMusicale()\Valore=0
     If EventoMusicale()\Evento=0 Then EventoMusicale()\Valore=1
     EventoMusicale()\Durata=2
    End Select
    LunghezzaEvento=EventoMusicale()\Inizio+EventoMusicale()\Durata
    If LunghezzaEvento<LarghezzaEventoBase Then LunghezzaEvento=LarghezzaEventoBase
    If DurataSequenza<LunghezzaEvento Then DurataSequenza=LunghezzaEvento
   Else
    RichiestaPannello{"TITOLO","You have used all the available events","OK"}
   EndIf
  Else
   RichiestaPannello{"TITOLO","You must select a channel first","OK"}
  EndIf
 EndIf
 If Modo=#IncollaGliEventiMusicali
  If CanaleSelezionato>0
   PrimoEventoDaTagliareOCopiare.l=DurataSequenza
   ResetList EventoMusicale()
   While NextItem(EventoMusicale())=True
    SequenzaEvento=EventoMusicale()\Sequenza
    If SequenzaEvento=SequenzaSelezionata
     TipoDiEventoMusicale$=EventoMusicale()\Tipo
     If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
      CanaleEvento=EventoMusicale()\Canale
      If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
       EventoMusicaleTagliato=EventoMusicale()\Stato & #EventoMusicaleTagliato
       EventoMusicaleCopiato=EventoMusicale()\Stato & #EventoMusicaleCopiato
       If EventoMusicaleTagliato=#EventoMusicaleTagliato OR EventoMusicaleCopiato=#EventoMusicaleCopiato
        If PrimoEventoDaTagliareOCopiare>EventoMusicale()\Inizio Then PrimoEventoDaTagliareOCopiare=EventoMusicale()\Inizio
       EndIf
      EndIf
     EndIf
    EndIf
   Wend
   DistanzaEventiMusicali.l=PuntoDInserimento-PrimoEventoDaTagliareOCopiare
   ResetList EventoMusicale()
   While NextItem(EventoMusicale())=True
    SequenzaEvento=EventoMusicale()\Sequenza
    If SequenzaEvento=SequenzaSelezionata
     TipoDiEventoMusicale$=EventoMusicale()\Tipo
     If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
      CanaleEvento=EventoMusicale()\Canale
      If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
       EventoMusicaleTagliato=EventoMusicale()\Stato & #EventoMusicaleTagliato
       EventoMusicaleCopiato=EventoMusicale()\Stato & #EventoMusicaleCopiato
       If EventoMusicaleTagliato=#EventoMusicaleTagliato
        EventoMusicale()\Inizio+DistanzaEventiMusicali
        EventoMusicale()\Stato & %0011111101
        EventoMusicale()\Stato & #EventoMusicaleSelezionato
       EndIf
       If EventoMusicaleCopiato=#EventoMusicaleCopiato
        EventoMusicale=EventoMusicale()\Evento
        ValoreEvento.b=EventoMusicale()\Valore
        InizioEvento=EventoMusicale()\Inizio
        DifferenzaPosizioneEventoMusicale=PuntoDInserimento-InizioEvento
        DurataEvento.l=EventoMusicale()\Durata
        PushItem EventoMusicale()
        LastItem EventoMusicale()
        If AddItem(EventoMusicale())=True
         EventiMusicali+1
         EventiMusicaliSelezionati+1
         EventoMusicale()\Tipo=TipoDiEventoMusicale$
         EventoMusicale()\Evento=EventoMusicale
         EventoMusicale()\Valore=ValoreEvento
         EventoMusicale()\Inizio=InizioEvento+DistanzaEventiMusicali
         EventoMusicale()\Durata=DurataEvento
         EventoMusicale()\Canale=CanaleEvento
         EventoMusicale()\Sequenza=SequenzaSelezionata
         EventoMusicale()\Stato=#EventoMusicaleSelezionato
         LunghezzaEvento=EventoMusicale()\Inizio+EventoMusicale()\Durata
         If LunghezzaEvento<LarghezzaEventoBase Then LunghezzaEvento=LarghezzaEventoBase
         If DurataSequenza<LunghezzaEvento Then DurataSequenza=LunghezzaEvento
         PopItem EventoMusicale()
        Else
         PopItem EventoMusicale()
         RichiestaPannello{"TITOLO","You have used all the available events","OK"}
         Pop If:Pop If:Pop If:Pop If:Pop If:Pop While:Goto FineCicloWhileIncollaturaEventiMusicali
        EndIf
       EndIf
      EndIf
     EndIf
    EndIf
   Wend
FineCicloWhileIncollaturaEventiMusicali
  Else
   RichiestaPannello{"TITOLO","You must select a channel first","OK"}
  EndIf
 EndIf
 If Modo=#DimenticaGliEventiMusicaliTagliatiOCopiati
  If CanaleSelezionato>0
   ResetList EventoMusicale()
   While NextItem(EventoMusicale())=True
    SequenzaEvento=EventoMusicale()\Sequenza
    If SequenzaEvento=SequenzaSelezionata
     TipoDiEventoMusicale$=EventoMusicale()\Tipo
     If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
      CanaleEvento=EventoMusicale()\Canale
      If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
       EventoMusicaleTagliato=EventoMusicale()\Stato & #EventoMusicaleTagliato
       If EventoMusicaleTagliato=#EventoMusicaleTagliato
        EventoMusicale()\Stato & %0011111001
       EndIf
       EventoMusicaleCopiato=EventoMusicale()\Stato & #EventoMusicaleCopiato
       If EventoMusicaleCopiato=#EventoMusicaleCopiato
        EventoMusicale()\Stato & %0011111001
       EndIf
      EndIf
     EndIf
    EndIf
   Wend
  Else
   RichiestaPannello{"TITOLO","You must select a channel first","OK"}
  EndIf
 EndIf
 If Modo=#SelezionaGliEventiMusicaliUguali
  If CanaleSelezionato>0
   If TipoDiEventoMusicaleDiBase$="Note"
    AltezzaEvento.b=127-YInizioAreaVisibile-YTopo/8
   Else
    AltezzaEvento=127-(YTopo*127.0)/AreaUtileEventiNonNote
   EndIf
   ResetList EventoMusicale()
   While NextItem(EventoMusicale())=True
    If EventoMusicale()\Canale=CanaleSelezionato AND EventoMusicale()\Sequenza=SequenzaSelezionata
     If EventoMusicale()\Tipo=TipoDiEventoMusicaleDiBase$
      If EventoMusicale()\Evento=AltezzaEvento
       If EventoMusicale()\Stato & #EventoMusicaleSelezionato=0
        EventoMusicale()\Stato | #EventoMusicaleSelezionato
        EventiMusicaliSelezionati+1
       EndIf
      EndIf
     EndIf
    EndIf
   Wend
  Else
   RichiestaPannello{"TITOLO","You must select a channel first","OK"}
  EndIf
 EndIf
 If NotaPiuLunga>0
  XMessaggio.w=LarghezzaBottoniEditoreSequenza
  YMessaggio.w=AltezzaInternaFinestraEditoreSequenza-8
  WColour (CanaleSelezionato+4) MOD 16,(CanaleSelezionato+9) MOD 16
  WLocate XMessaggio,YMessaggio:Print String$(Spazio$,80-XMessaggio/8)
  WLocate XMessaggio,YMessaggio:Print "Len>":ConvertiIlTempoInBattute{NotaPiuLunga,0}
 EndIf
 DurataSequenza=0
 ResetList EventoMusicale()
 While NextItem(EventoMusicale())=True
  If EventoMusicale()\Sequenza=SequenzaSelezionata
   LunghezzaEvento=EventoMusicale()\Inizio+EventoMusicale()\Durata
   If DurataSequenza<LunghezzaEvento Then DurataSequenza=LunghezzaEvento
  EndIf
 Wend
 LimiteMassimoXInizioAreaVisibile.l=XLunAreaEventiMusicali*ScalaEventiMusicali
 If LimiteMassimoXInizioAreaVisibile<DurataSequenza
  LimiteMassimoXInizioAreaVisibile=DurataSequenza-LimiteMassimoXInizioAreaVisibile
 EndIf
 XInizioAreaVisibile=LimitiInteri{XInizioAreaVisibile,0,DurataSequenza-LimiteMassimoXInizioAreaVisibile}
End Statement

;---------------------------------------------------------------
;questa procedura imposta i bottoni dell'editore della sequenza
;this procedure sets the sequence editor buttons
;------------------------------------------------
Statement ImpostaIBottoniDellEditoreSequenza{}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AreaVisibileDeiValori
SHARED Bottoni()
SHARED LarghezzaBottoniEditoreSequenza
SHARED LarghezzaInternaFinestraEditoreSequenza
 ResetList Bottoni()
 If AddItem(Bottoni())=True
  Bottoni()\Numero=1,16,0,LarghezzaInternaFinestraEditoreSequenza-1,AreaVisibileDeiValori-1,""
 EndIf
 If AddItem(Bottoni())=True
  Bottoni()\Numero=2,0,AltezzaInternaFinestraEditoreSequenza-8-8,7,AltezzaInternaFinestraEditoreSequenza-8-8+7,"+"
 EndIf
 If AddItem(Bottoni())=True
  Bottoni()\Numero=3,8,AltezzaInternaFinestraEditoreSequenza-8-8,15,AltezzaInternaFinestraEditoreSequenza-8-8+7,"-"
 EndIf
 For Canale.b=1 To 16
  X0Canale.w=(Canale-1)*16:Y0Canale=AltezzaInternaFinestraEditoreSequenza-8:Format "00":Bottone$=Str$(Canale):Format ""
  If AddItem(Bottoni())=True
   Bottoni()\Numero=Canale+3,X0Canale,Y0Canale,X0Canale+Len(Bottone$)*#GrandezzaFonteTopaz-1,Y0Canale+8-1,Bottone$
  EndIf
 Next Canale
 XPosBottone.w=Len("01020304050607080910111213141516")*#GrandezzaFonteTopaz
 YPosBottone.w=AltezzaInternaFinestraEditoreSequenza-8
 If AddItem(Bottoni())=True
  Bottoni()\Numero=20,XPosBottone,YPosBottone,XPosBottone+Len("Alone")*#GrandezzaFonteTopaz-1,YPosBottone+8-1,"Alone"
 EndIf
 LarghezzaBottoniEditoreSequenza=Len("01020304050607080910111213141516Alone")*#GrandezzaFonteTopaz
End Statement

;-------------------------------------------------------------------------
;questa procedura gestisce il titolo della finestra dell'editore sequenza
;this procedure handles the sequence editor window title
;--------------------------------------------------------
Statement MostraIlTitoloDellaFinestraDellEditoreSequenza{}
SHARED AreaDiSelezioneAttivata
SHARED EventiMusicali
SHARED EventiMusicaliSelezionati
SHARED Sequenza()
SHARED SequenzaSelezionata
SHARED Spazio$
SHARED TitoloSchermo$
 TitoloFinestra$="Sequence "+Str$(SequenzaSelezionata)+":"
 NomeSequenza$=Sequenza()\Nome
 If NomeSequenza$="" Then NomeSequenza$="unnamed"
 TitoloFinestra$+NomeSequenza$+"-"
 If EventiMusicali>0
  TitoloFinestra$+Str$(EventiMusicaliSelezionati)+" selected event"
  If EventiMusicaliSelezionati<>1 Then TitoloFinestra$+"s"
  TitoloFinestra$+" of "+Str$(EventiMusicali)+" event"
  If EventiMusicali<>1 Then TitoloFinestra$+"s"
 Else
  TitoloFinestra$+"no events into this sequence"
 EndIf
 TitoloFinestra$+String$(Spazio$,72-Len(TitoloFinestra$))
 If AreaDiSelezioneAttivata=True Then TitoloFinestra$+"SEL" Else TitoloFinestra$+"ADD"
 WTitle TitoloFinestra$,TitoloSchermo$
End Statement

;----------------------------------------------
;questa procedura registra gli eventi musicali
;this procedure records the musical events
;------------------------------------------
Statement RegistraGliEventiMusicali{Modo.b}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED Battiti
SHARED BattutePerMinuto
SHARED BottonePremuto
SHARED CanaleSelezionato
SHARED DurataSequenza
SHARED EventiMusicali
SHARED EventoMusicale()
SHARED Misure
SHARED MostraSoloGliEventiMusicaliDelCanaleSelezionato
SHARED MostraSoloGliEventiMusicaliDelloStessoTipo
SHARED ScalaEventiMusicali
SHARED Sequenza()
SHARED SequenzaNellaTraccia()
SHARED SequenzaSelezionata
SHARED Spazio$
SHARED TastoCursoreGiu$
SHARED TastoCursoreSu$
SHARED TastoFuga$
SHARED TicPerCinquantesimoDiSecondo
SHARED TipoDiEventoMusicaleDiBase$
SHARED XInizioAreaVisibile
SHARED XLunAreaEventiMusicali
 If SequenzaSelezionata>0
  Messaggio$="Begin recording?|If you'll choose|OK use CURSOR KEYS|UP & DOWN to change|BPM and press SPACE|to end recording"
  RichiestaPannello{"TITOLO",Messaggio$,"OK|Cancel"}
  Registrazione.b=BottonePremuto:If Registrazione=0 Then Statement Return

  If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza Then FineTempoVisibile.l=XLunAreaEventiMusicali*ScalaEventiMusicali

  Battito.b=Misure
  Tempo.l=0

  Repeat
   EventoRegistratoreEventiMusicali.l=Event

   Select EventoRegistratoreEventiMusicali
   Case #HaiChiusoLaFinestra
    FineRegistrazione.b=True
   Case #HaiAttivatoIlMenu
    If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
     If MenuHit=1 AND ItemHit=2 Then FineRegistrazione=True
    EndIf
   Case #HaiPremutoUnTasto
    TastoPremuto$=LCase$(Inkey$)
    Select TastoPremuto$
    Case TastoFuga$
     FineRegistrazione=True
    Case TastoCursoreSu$
     If BattutePerMinuto<300
      BattutePerMinuto+1
      TicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto)/3000
      MostraLeBattutePerMinuto{BattutePerMinuto,10,Modo}
     EndIf
    Case TastoCursoreGiu$
     If BattutePerMinuto>10
      BattutePerMinuto-1
      TicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto*BattutePerMinuto)/3000
      MostraLeBattutePerMinuto{BattutePerMinuto,10,Modo}
     EndIf
    Case Spazio$
     FineRegistrazione=True
    End Select
   End Select

   ByteDiStato.b=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   TipoDiEventoMusicale.b=ByteDiStato & #_StatusBits
   CanaleEvento.b=ByteDiStato & #_ChannelBits+1
   Select TipoDiEventoMusicale
   Case #_NoteOn
    TipoDiEventoMusicale$="Note"
    Evento.b=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
    ValoreEvento.b=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Case #_NoteOff
    TipoDiEventoMusicale$="NoteOff"
    Evento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
    ValoreEvento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Case #_ProgramChange
    TipoDiEventoMusicale$="Program"
    Evento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Case #_ControlChange
    TipoDiEventoMusicale$="Control"
    Evento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
    ValoreEvento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Case #_PolyphonicKeyPressure
    TipoDiEventoMusicale$="PolyAftertouch"
    Evento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Case #_ChannelKeyPressure
    TipoDiEventoMusicale$="MonoAftertouch"
    Evento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Case #_PitchBend
    TipoDiEventoMusicale$="PitchBend"
    ValoreEvento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
    Evento=ConvertiOltreCentoventisetteInNegativo{ReadSerial(0)}
   Default
    TipoDiEventoMusicale$=""
   End Select
   If TipoDiEventoMusicale$<>""
    If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
     If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
      If TipoDiEventoMusicale$<>"NoteOff"
       LastItem EventoMusicale()
       If AddItem(EventoMusicale())=True
        EventoMusicale()\Tipo=TipoDiEventoMusicale$
        EventoMusicale()\Evento=Evento
        EventoMusicale()\Inizio=Tempo
        EventoMusicale()\Canale=CanaleEvento
        EventoMusicale()\Sequenza=SequenzaSelezionata
        EventoMusicale()\Durata=2
        If TipoDiEventoMusicale$="Note" Then EventoMusicale()\Valore=ValoreEvento
        If TipoDiEventoMusicale$="Control" Then EventoMusicale()\Valore=ValoreEvento
        If TipoDiEventoMusicale$="PitchBend" Then EventoMusicale()\Valore=ValoreEvento
        Select TipoDiEventoMusicale$
        Case "Note"
         Nota.b=EventoMusicale()\Evento
         SuonaLaNota{Nota,ValoreEvento,CanaleEvento,Modo}
        Case "Program"
         Programma.b=EventoMusicale()\Evento
         EseguiIlCambioDiProgramma{Programma,CanaleEvento,Modo}
        Case "Control"
         Controllo.b=EventoMusicale()\Evento:ValoreEvento=EventoMusicale()\Valore
         EseguiIlCambioDiControllo{Controllo,ValoreEvento,CanaleEvento,Modo}
        Case "PolyAftertouch"
         PressioneMultipla.b=EventoMusicale()\Evento
         EseguiLaPressioneMultipla{PressioneMultipla,CanaleEvento,Modo}
        Case "MonoAftertouch"
         PressioneSingola.b=EventoMusicale()\Evento
         EseguiLaPressioneSingola{PressioneSingola,CanaleEvento,Modo}
        Case "PitchBend"
         CurvaDiPicco.w=EventoMusicale()\Evento*128+EventoMusicale()\Valore
         EseguiLaCurvaDiPicco{CurvaDiPicco,CanaleEvento,Modo}
        End Select
        EventoMusicale()\Stato | #EventoMusicaleEseguito
        If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
         Sequenza()\EventiMusicali+1
        EndIf
        If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
         EventiMusicali+1:MostraIlTitoloDellaFinestraDellEditoreSequenza{}
        EndIf
       Else
        RichiestaPannello{"TITOLO","You have used all the available events","OK"}
        Statement Return
       EndIf
      Else
       SmettiDiSuonareLaNota{Evento,ValoreEvento,CanaleEvento,Modo}
       EventoMusicale()\Stato & %0011110111
       EventoMusicale()\Stato | #EventoMusicaleTerminato
      EndIf
     EndIf
    EndIf
   EndIf

   Tempo+TicPerCinquantesimoDiSecondo

   If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
    Sequenza()\Durata=Tempo-SequenzaNellaTraccia()\Inizio+1
   EndIf

   If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
    If Tempo-XInizioAreaVisibile>FineTempoVisibile
     XInizioAreaVisibile=Tempo
     MostraLeNoteDiSfondoConILoroNomi{}
     MostraLeBattute{}
     MostraBarreEditoreSequenza{}
    EndIf
    Sequenza()\Durata=Tempo+1
    DurataSequenza=Tempo+1
   EndIf

   TempoMetronomo.w+TicPerCinquantesimoDiSecondo

   If TempoMetronomo>=(#TicDiBasePerQuarto*1.0*Battiti)/Misure
    If NotaMetronomoSuonata.b=True
     SmettiDiSuonareLaNota{76,0,10,Modo}
     TempoMetronomo=0
     NotaMetronomoSuonata=False
    Else
     SuonaLaNota{76,(127.0*Battito)/Misure,10,Modo}
     Battito-1:If Battito=0 Then Battito=Misure
     NotaMetronomoSuonata=True
    EndIf
   EndIf

   ResetList EventoMusicale()
   While NextItem(EventoMusicale())=True
    StatoEvento.b=EventoMusicale()\Stato
    EventoMusicaleEseguito.b=StatoEvento & #EventoMusicaleEseguito
    If EventoMusicaleEseguito=#EventoMusicaleEseguito
     TipoDiEventoMusicale$=EventoMusicale()\Tipo
     If TipoDiEventoMusicale$=TipoDiEventoMusicaleDiBase$ OR MostraSoloGliEventiMusicaliDelloStessoTipo=False
      CanaleEvento=EventoMusicale()\Canale
      If CanaleEvento=CanaleSelezionato OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
       Evento=EventoMusicale()\Evento
       InizioEvento=EventoMusicale()\Inizio
       If TipoDiEventoMusicale$="Note" Then EventoMusicale()\Durata=Tempo-InizioEvento+1
       DurataEvento=EventoMusicale()\Durata
       If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
        If TipoDiEventoMusicale$="PitchBend"
         CurvaDiPicco.w=Evento*128+ValoreEvento
      DisegnaUnEventoMusicale{TipoDiEventoMusicale$,CurvaDiPicco,InizioEvento,DurataEvento,CanaleEvento,#EventoMusicaleEseguito}
        Else
         DisegnaUnEventoMusicale{TipoDiEventoMusicale$,Evento,InizioEvento,DurataEvento,CanaleEvento,#EventoMusicaleEseguito}
        EndIf
       EndIf
       If InizioEvento+DurataEvento-1>=Tempo
        EventoMusicale()\Stato & %0011110111
        EventoMusicale()\Stato | #EventoMusicaleTerminato
       EndIf
      EndIf
     EndIf
    EndIf
    StatoEvento=EventoMusicale()\Stato
    EventoMusicaleTerminato.b=StatoEvento & #EventoMusicaleTerminato
    If EventoMusicaleTerminato=#EventoMusicaleTerminato
     If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
      If TipoDiEventoMusicale$="PitchBend"
       CurvaDiPicco=Evento*128+ValoreEvento
       DisegnaUnEventoMusicale{TipoDiEventoMusicale$,CurvaDiPicco,InizioEvento,DurataEvento,CanaleEvento,StatoEvento}
      Else
       DisegnaUnEventoMusicale{TipoDiEventoMusicale$,Evento,InizioEvento,DurataEvento,CanaleEvento,StatoEvento}
      EndIf
     EndIf
     EventoMusicale()\Stato & %0011101111
    EndIf
   Wend

   VWait
  Until FineRegistrazione=True
  If Modo=#EseguiGliEventiMusicaliDallaFinestraPrincipale
   Sequenza()\Durata=Tempo-SequenzaNellaTraccia()\Inizio+1
  EndIf
  If Modo=#EseguiGliEventiMusicaliDallEditoreSequenza
   DurataSequenza=Tempo+1
  EndIf
  ResetList EventoMusicale()
  While NextItem(EventoMusicale())=True
   EventoMusicale()\Stato & %0011100111
  Wend
 Else
  RichiestaPannello{"TITOLO","You must select a sequence first","OK"}
 EndIf
End Statement

;-----------------------------------------------
;questa procedura mostra il punto d'inserimento
;this procedure shows the insertion point
;-----------------------------------------
Statement MostraIlPuntoDInserimento{}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED CanaleSelezionato
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED PuntoDInserimento
SHARED ScalaEventiMusicali
SHARED XInizioAreaVisibile
 I.w=16+(PuntoDInserimento-XInizioAreaVisibile)/ScalaEventiMusicali
 If I>=16 AND I+7<LarghezzaInternaFinestraEditoreSequenza
  If CanaleSelezionato>0
   ColoreTestoPuntoDInserimento=(CanaleSelezionato+4) MOD 16
   ColoreSfondoPuntoDInserimento=(CanaleSelezionato+9) MOD 16
  Else
   ColoreTestoPuntoDInserimento=1
   ColoreSfondoPuntoDInserimento=0
  EndIf
  WBox I,0,I+7,AltezzaInternaFinestraEditoreSequenza-8-8,ColoreSfondoPuntoDInserimento
  TestoPuntoDInserimento$="Insertion point>"
  For TestoPuntoDInserimento.b=0 To 15
   WLocate I,TestoPuntoDInserimento*8
   WColour ColoreTestoPuntoDInserimento,ColoreSfondoPuntoDInserimento
   Print Mid$(TestoPuntoDInserimento$,TestoPuntoDInserimento+1,1)
  Next TestoPuntoDInserimento
 EndIf
End Statement

;-------------------------------------------------------------------
;questa procedura mostra il pulsante del canale selezionato da solo
;this procedure shows the button of the selected channel alone
;--------------------------------------------------------------
Statement MostraPulsanteSelezioneSoloEventiMusicaliDelCanaleSelezionato{}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED CanaleSelezionato
SHARED MostraSoloGliEventiMusicaliDelCanaleSelezionato
 XPosBottone.w=Len("01020304050607080910111213141516")*#GrandezzaFonteTopaz
 YPosBottone.w=AltezzaInternaFinestraEditoreSequenza-8
 If CanaleSelezionato=0 OR MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
  DisegnaBottone{"Alone",XPosBottone,YPosBottone,#ColBlu}
 Else
  DisegnaBottone{"Alone",XPosBottone,YPosBottone,#ColVerde}
 EndIf
End Statement

;-----------------------------------------------------------------------------
;questa procedura consente l'inserimento delle note dalla tastiera dell'AMIGA
;this procedure permits the notes insertion by the AMIGA keyboard
;-----------------------------------------------------------------
Statement AggiungiUnaNotaDallaTastiera{Nota$}
SHARED CanaleSelezionato
SHARED DurataSequenza
SHARED EventiMusicali
SHARED EventoMusicale()
SHARED LarghezzaEventoBase
SHARED NotaSuonata
SHARED OttavaSelezionata
SHARED PuntoDInserimento
SHARED SequenzaSelezionata
SHARED ValoreEventoBase
 Select Nota$
 Case "C1"
  Nota.b=0
 Case "C#1"
  Nota=1
 Case "D1"
  Nota=2
 Case "D#1"
  Nota=3
 Case "E1"
  Nota=4
 Case "F1"
  Nota=5
 Case "F#1"
  Nota=6
 Case "G1"
  Nota=7
 Case "G#1"
  Nota=8
 Case "A1"
  Nota=9
 Case "A#1"
  Nota=10
 Case "B1"
  Nota=11
 Case "C2"
  Nota=12
 Case "C#2"
  Nota=13
 Case "D2"
  Nota=14
 Case "D#2"
  Nota=15
 Case "E2"
  Nota=16
 Case "F2"
  Nota=17
 Case "F#2"
  Nota=18
 Case "G2"
  Nota=19
 Case "G#2"
  Nota=20
 Case "A2"
  Nota=21
 Case "A#2"
  Nota=22
 Case "B2"
  Nota=23
 End Select
 Nota+OttavaSelezionata*12:If Nota>127 Then Nota=127
 If CanaleSelezionato>0
  LastItem EventoMusicale()
  If AddItem(EventoMusicale())=True
   EventiMusicali+1
   EventoMusicale()\Tipo="Note"
   EventoMusicale()\Evento=Nota
   EventoMusicale()\Valore=ValoreEventoBase
   EventoMusicale()\Inizio=PuntoDInserimento
   EventoMusicale()\Canale=CanaleSelezionato
   EventoMusicale()\Sequenza=SequenzaSelezionata
   EventoMusicale()\Stato=#EventoMusicaleNonSelezionato
   EventoMusicale()\Durata=LarghezzaEventoBase
   If NotaSuonata\Stato=True
    Nota.b=NotaSuonata\Evento
    VelocitaNota.b=NotaSuonata\Valore
    CanaleNota.b=NotaSuonata\Canale
    SmettiDiSuonareLaNota{Nota,VelocitaNota,CanaleNota,#EseguiGliEventiMusicaliDallEditoreSequenza}
   EndIf
   NotaSuonata\Evento=EventoMusicale()\Evento,EventoMusicale()\Valore,EventoMusicale()\Inizio,EventoMusicale()\Durata
   NotaSuonata\Canale=EventoMusicale()\Canale
   SuonaLaNota{NotaSuonata\Evento,NotaSuonata\Valore,NotaSuonata\Canale,#EseguiGliEventiMusicaliDallEditoreSequenza}
   NotaSuonata\Stato=True
   PuntoDInserimento+LarghezzaEventoBase
   LunghezzaEvento.l=EventoMusicale()\Inizio+EventoMusicale()\Durata
   If DurataSequenza<LunghezzaEvento Then DurataSequenza=LunghezzaEvento
  Else
   RichiestaPannello{"TITOLO","You have used all the available events","OK"}
  EndIf
 Else
  RichiestaPannello{"TITOLO","You must select a channel first","OK"}
 EndIf
End Statement

;shows help for mouse buttons to use
Statement MostraITastiDelTopoDaUsare{}
 MostraITastiDelTopoDaUsare$="Left mouse button actions:|"
 MostraITastiDelTopoDaUsare$+"Click>|"
 MostraITastiDelTopoDaUsare$+" to add or (de)select an event|"
 MostraITastiDelTopoDaUsare$+"Hold down for one second on an event>|"
 MostraITastiDelTopoDaUsare$+" to select all the alike events|"
 MostraITastiDelTopoDaUsare$+"Press the A key>|"
 MostraITastiDelTopoDaUsare$+" to (de)activate the area selection"
 RichiestaPannello{"AIUTO",MostraITastiDelTopoDaUsare$,"OK"}
End Statement

;shows help for keys to use
Statement MostraITastiDaUsare{}
 MostraITastiDaUsare$="Esc>.........leave the editor|"
 MostraITastiDaUsare$+"Space>.......insert a rest|"
 MostraITastiDaUsare$+"|"
 MostraITastiDaUsare$+"No selected event:|"
 MostraITastiDaUsare$+"Cursor up>...scroll window up|"
 MostraITastiDaUsare$+"Cursor down>.scroll window down|"
 MostraITastiDaUsare$+"Cursor left>.scroll window backward|"
 MostraITastiDaUsare$+"Cursor right>scroll window forward|"
 MostraITastiDaUsare$+"Backspace>...delete last event|"
 MostraITastiDaUsare$+"|"
 MostraITastiDaUsare$+"No selected event plus Shift:|"
 MostraITastiDaUsare$+"Cursor left>.move insertion point backward|"
 MostraITastiDaUsare$+"Cursor right>move insertion point forward|"
 MostraITastiDaUsare$+"Backspace>...delete last event"
 RichiestaPannello{"AIUTO",MostraITastiDaUsare$,"OK"}

 MostraITastiDaUsare$="With selected events:|"
 MostraITastiDaUsare$+"Cursor up>...inc sel events/tempo beat|"
 MostraITastiDaUsare$+"Cursor down>.dec sel events/tempo beat|"
 MostraITastiDaUsare$+"Cursor left>.move sel events forward|"
 MostraITastiDaUsare$+"Cursor right>move sel events backward|"
 MostraITastiDaUsare$+"Backspace>...delete last event|"
 MostraITastiDaUsare$+"|"
 MostraITastiDaUsare$+"With selected events plus Shift:|"
 MostraITastiDaUsare$+"Cursor up>...move sel notes up of one octave|"
 MostraITastiDaUsare$+"             inc sel events of 8|"
 MostraITastiDaUsare$+"             inc sel BPM events of 10|"
 MostraITastiDaUsare$+"             inc sel tempo events measure|"
 MostraITastiDaUsare$+"Cursor down>.move sel notes down of one octave|"
 MostraITastiDaUsare$+"             dec sel events of 8|"
 MostraITastiDaUsare$+"             dec sel BMP events of 10|"
 MostraITastiDaUsare$+"             dec sel tempo events measure|"
 MostraITastiDaUsare$+"Cursor left>.stretch sel notes backward|"
 MostraITastiDaUsare$+"Cursor right>stretch sel notes forward|"
 MostraITastiDaUsare$+"Backspace>...delete all sel events"
 RichiestaPannello{"AIUTO",MostraITastiDaUsare$,"OK"}
End Statement

;shows help for notes on keys
Statement MostraLaMappaturaDelleNoteSullaTastiera{}
 MostraLaMappaturaDelleNoteSullaTastiera$="Note    lo octave hi octave|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"C--Do  >........Z.........Q|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"C#-Do# >........S.........2|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"D--Re  >........X.........W|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"D#-Re# >........D.........3|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"E--Mi  >........C.........E|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"F--Fa  >........V.........R|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"F#-Fa# >........G.........5|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"G--Sol >........B.........T|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"G#-Sol#>........H.........6|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"A--La  >........N.........Y|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"A#-La# >........J.........7|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"B--Si  >........M.........U|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"|"
 MostraLaMappaturaDelleNoteSullaTastiera$+"function keys to select octave"
 RichiestaPannello{"AIUTO",MostraLaMappaturaDelleNoteSullaTastiera$,"OK"}
End Statement

;-------------------------------------------------------------
;questa procedura permette di editare la sequenza selezionata
;this procedure permits to edit the selected sequence
;-----------------------------------------------------
Statement EditoreSequenza{}
SHARED AltezzaInternaFinestraEditoreSequenza
SHARED AltezzaSchermo
SHARED AreaDiSelezioneAttivata
SHARED AreaInvisibileDelleNote
SHARED AreaInvisibileDelTempo
SHARED AreaUtileEventiNonNote
SHARED AreaVisibileDeiValori
SHARED Battiti
SHARED Bottoni()
SHARED CanaleSelezionato
SHARED DurataSequenza
SHARED EventiMusicali
SHARED EventiMusicaliSelezionati
SHARED EventoMusicale()
SHARED LarghezzaBottoniEditoreSequenza
SHARED LarghezzaEventoBase
SHARED LarghezzaInternaFinestraEditoreSequenza
SHARED LarghezzaSchermo
SHARED LunghezzaBrano
SHARED MIDIAttivato
SHARED Misure
SHARED MostraSoloGliEventiMusicaliDelloStessoTipo
SHARED MostraSoloGliEventiMusicaliDelCanaleSelezionato
SHARED MostraNuovoValore
SHARED NotaSuonata
SHARED NoteSuonate
SHARED OttavaSelezionata
SHARED PeriFreq()
SHARED PrimaVoltaNellEditoreSequenza
SHARED PuntoDInserimento
SHARED ScalaEventiMusicali
SHARED Sequenza()
SHARED SequenzaNellaTraccia()
SHARED Spazio$
SHARED TastiDelTopo
SHARED TastoIndietro$
SHARED TastoCursoreDestra$
SHARED TastoCursoreGiu$
SHARED TastoCursoreSinistra$
SHARED TastoCursoreSu$
SHARED TastoFuga$
SHARED TicPerCinquantesimoDiSecondo
SHARED TipoDiEventoMusicaleDiBase$
SHARED TipoDiNota()
SHARED TitoloSchermo$
SHARED XAreaDelTopo
SHARED XInizioAreaVisibile
SHARED XLunAreaEventiMusicali
SHARED XLunBarra
SHARED XTopo
SHARED YAreaDelTopo
SHARED YInizioAreaVisibile
SHARED YLunBarra
SHARED YTopo
 XPosFin.b=0:YPosFin.b=#AltezzaBarreTitoli:XLunFin.w=LarghezzaSchermo:YLunFin.w=AltezzaSchermo-#AltezzaBarreTitoli
 TipoFin.l=#BottoneChiudiFinestra+#FinestraConMemoriaBordi+#FinestraAttivata
 DurataSequenza=(#TicDiBasePerQuarto*4.0*Battiti)/Misure
 If DurataSequenza<Sequenza()\Durata Then DurataSequenza=Sequenza()\Durata
 EventiMusicali=Sequenza()\EventiMusicali
 EventiMusicaliSelezionati=Sequenza()\EventiMusicaliSelezionati

 If PrimaVoltaNellEditoreSequenza=True
  Window #FinEditoreSequenza,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,"",1,2
  MostraIlTitoloDellaFinestraDellEditoreSequenza{}
  LarghezzaInternaFinestraEditoreSequenza=InnerWidth
  AltezzaInternaFinestraEditoreSequenza=InnerHeight
  CloseWindow #FinEditoreSequenza

  AreaInvisibileDelleNote=128-(AltezzaInternaFinestraEditoreSequenza-8-8)/8
  AreaVisibileDeiValori=(128-AreaInvisibileDelleNote)*8
  AreaUtileEventiNonNote=AreaVisibileDeiValori-1-7
  XLunAreaEventiMusicali=LarghezzaInternaFinestraEditoreSequenza-16
  YInizioAreaVisibile=127-(127-AreaInvisibileDelleNote)-#_MiddleC
 EndIf

 XLunBarra=16
 YLunBarra=AltezzaInternaFinestraEditoreSequenza-8-8
 ImpostaBarra{1,0,0,"VERTICAL",0,#ListaBottoniEditoreSequenza}

 XLunBarra=XLunAreaEventiMusicali
 YLunBarra=8
 ImpostaBarra{2,16,AltezzaInternaFinestraEditoreSequenza-8-8,"HORIZONTAL",0,#ListaBottoniEditoreSequenza}

 Window #FinEditoreSequenza,XPosFin,YPosFin,XLunFin,YLunFin,TipoFin,"",1,2,#ListaBottoniEditoreSequenza
 WindowFont #FonteTopaz8

 ImpostaIBottoniDellEditoreSequenza{}
 ImpostaMenuEditoreSequenza{}
 MostraIlTitoloDellaFinestraDellEditoreSequenza{}
 MostraLaScalaDegliEventiMusicali{False,0}
 MostraICanali{}
 MostraPulsanteSelezioneSoloEventiMusicaliDelCanaleSelezionato{}
 MostraLeNoteDiSfondoConILoroNomi{}
 MostraLeBattute{}
 MostraGliEventiMusicali{}
 MostraIlPuntoDInserimento{}

 If PrimaVoltaNellEditoreSequenza=True
  MostraITastiDelTopoDaUsare{}
  MostraITastiDaUsare{}
  MostraLaMappaturaDelleNoteSullaTastiera{}
  PrimaVoltaNellEditoreSequenza=False
 EndIf

 Repeat
  If SecondoClicDelTopo.b=False
   AreaInvisibileDelTempo=DurataSequenza-XLunAreaEventiMusicali*ScalaEventiMusicali
   If AreaInvisibileDelTempo=0 Then AreaInvisibileDelTempo=1
   MostraBarreEditoreSequenza{}
   MostraIlTitoloDellaFinestraDellEditoreSequenza{}
   MostraLeNoteDiSfondoConILoroNomi{}
   MostraLeBattute{}
   MostraGliEventiMusicali{}
   MostraIlPuntoDInserimento{}
   SecondoClicDelTopo=True
  EndIf
  If NotaSuonata\Stato=True
   Nota.b=NotaSuonata\Evento:FineNota.l=NotaSuonata\Durata-1
   VelocitaNota.b=NotaSuonata\Valore:CanaleNota.b=NotaSuonata\Canale
   If DurataNota.l>FineNota
    SmettiDiSuonareLaNota{Nota,VelocitaNota,CanaleNota,#EseguiGliEventiMusicaliDallEditoreSequenza}
    DurataNota=0
    NotaSuonata\Stato=False
   Else
    DurataNota+TicPerCinquantesimoDiSecondo
   EndIf
  EndIf
  If NoteSuonate>0 AND NotaSuonata\Stato=False
   If NoteSuonate=1 Then Messaggio$="There is a note" Else Messaggio$="There are "+Str$(NoteSuonate)+" notes"
   Messaggio$+" still playing:|clicking on OK you will stop "
   If NoteSuonate=1 Then Messaggio$+"this." Else Messaggio$+"these."
   RichiestaPannello{"TITOLO",Messaggio$,"OK"}
   InterrompiTutteLeNote{#EseguiGliEventiMusicaliDallEditoreSequenza}
   NoteSuonate=0
  EndIf

  EventoFinestraEditoreSequenza.l=Event

  Select EventoFinestraEditoreSequenza
  Case #HaiPremutoUnTastoDelTopo
   TastiDelTopo=MButtons:XTopo=WMouseX:YTopo=WMouseY:Zona.b=0
   ResetList Bottoni()
   While NextItem(Bottoni())=True
    If YTopo>=Bottoni()\Y0 AND YTopo<=Bottoni()\Y1
     If XTopo>=Bottoni()\X0 AND XTopo<=Bottoni()\X1
      Zona=Bottoni()\Numero
     EndIf
    EndIf
   Wend
   Select TastiDelTopo
   Case #TastoSinistroDelTopoPremuto
    Select Zona
    Case 1
     If AreaDiSelezioneAttivata=True
      WJam #SecondaVoltaStessiColori
      XInizioZona.b=16:XFineZona.w=LarghezzaInternaFinestraEditoreSequenza-1:XAreaDelTopo=XTopo
      YInizioZona.b=0:YFineZona.w=AltezzaInternaFinestraEditoreSequenza-1:YAreaDelTopo=YTopo
      Repeat
       TastoSinistroPremutoDelTopo.b=Joyb(0)
       If XAreaDelTopo<>WMouseX OR YAreaDelTopo<>WMouseY
        If XAreaDelTopo<>XTopo OR YAreaDelTopo<>YTopo Then WBox XTopo,YTopo,XAreaDelTopo,YAreaDelTopo,#ColSfondo
        XAreaDelTopo=LimitiInteri{WMouseX,XInizioZona,XFineZona}
        YAreaDelTopo=LimitiInteri{WMouseY,YInizioZona,YFineZona}
        WBox XTopo,YTopo,XAreaDelTopo,YAreaDelTopo,#ColSfondo
       EndIf
      Until TastoSinistroPremutoDelTopo=#NessunTastoDelTopoPremuto
      WJam #DueColoriPieni
      If XAreaDelTopo<>XTopo OR YAreaDelTopo<>YTopo Then Selezione{#SelezionaGliEventiMusicaliNellAreaDelTopo}
     Else
      EsciDalCiclo.b=False
      SelezionaGliEventiMusicaliUguali.b=False
      TempoTrascorso.l=0
      Repeat
       TastiDelTopo=Joyb(0)
       If TastiDelTopo=#NessunTastoDelTopoPremuto Then EsciDalCiclo=True
       If XTopo<>WMouseX Then EsciDalCiclo=True
       If YTopo<>WMouseY Then EsciDalCiclo=True
       TempoTrascorso+1
       If TempoTrascorso>49 AND SelezionaGliEventiMusicaliUguali=False
        If TipoDiEventoMusicaleDiBase$="Note" Then YSelezione.w=YTopo/8*8 Else YSelezione=YTopo
        WJam #SecondaVoltaStessiColori
        WBox 16,YSelezione,LarghezzaInternaFinestraEditoreSequenza-1,YSelezione+7,#ColSfondo
        SelezionaGliEventiMusicaliUguali=True
       EndIf
       VWait
      Until EsciDalCiclo=True
      If SelezionaGliEventiMusicaliUguali=True
       WBox 16,YSelezione,LarghezzaInternaFinestraEditoreSequenza-1,YSelezione+7,#ColSfondo
       WJam #DueColoriPieni
      Else
       Selezione{#SelezionaUnEventoMusicale}
      EndIf
     EndIf
    Case 2
     ScalaEventiMusicali/2:If ScalaEventiMusicali=0 Then ScalaEventiMusicali=64
     MostraLaScalaDegliEventiMusicali{True,0}
    Case 3
     ScalaEventiMusicali+ScalaEventiMusicali:If ScalaEventiMusicali=128 Then ScalaEventiMusicali=1
     MostraLaScalaDegliEventiMusicali{True,8}
    Case 4
     CanaleSelezionato=1
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 5
     CanaleSelezionato=2
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 6
     CanaleSelezionato=3
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 7
     CanaleSelezionato=4
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 8
     CanaleSelezionato=5
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 9
     CanaleSelezionato=6
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 10
     CanaleSelezionato=7
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 11
     CanaleSelezionato=8
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 12
     CanaleSelezionato=9
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 13
     CanaleSelezionato=10
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 14
     CanaleSelezionato=11
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 15
     CanaleSelezionato=12
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 16
     CanaleSelezionato=13
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 17
     CanaleSelezionato=14
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 18
     CanaleSelezionato=15
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 19
     CanaleSelezionato=16
     MostraICanali{}
     Selezione{#CambiaIlCanaleDegliEventiMusicaliSelezionati}
    Case 20
     If CanaleSelezionato>0
      MostraSoloGliEventiMusicaliDelCanaleSelezionato=NOT MostraSoloGliEventiMusicaliDelCanaleSelezionato
      MostraPulsanteSelezioneSoloEventiMusicaliDelCanaleSelezionato{}
     EndIf
    End Select

    SecondoClicDelTopo=False
   Case #TastoSinistroDelTopoRilasciato
    If AreaDiSelezioneAttivata=False AND Zona=1 AND SelezionaGliEventiMusicaliUguali=True
     Selezione{#SelezionaGliEventiMusicaliUguali}
     SecondoClicDelTopo=False
    Else
     SecondoClicDelTopo=True
    EndIf
   End Select
  Case #HaiPremutoUnBottone
   Select GadgetHit
   Case 1
    AltezzaBarra.w=AltezzaInternaFinestraEditoreSequenza-8-8
    YInizioAreaVisibile=ValoreBarra{1,AreaInvisibileDelleNote,AltezzaBarra,"VERTICAL",#ListaBottoniEditoreSequenza}
   Case 2
    LunghezzaBarra.w=XLunAreaEventiMusicali
    XInizioAreaVisibile=ValoreBarra{2,AreaInvisibileDelTempo,LunghezzaBarra,"HORIZONTAL",#ListaBottoniEditoreSequenza}
    If XInizioAreaVisibile<0 Then XInizioAreaVisibile=0
   End Select
   SecondoClicDelTopo=False
  Case #HaiRilasciatoUnBottone
   Select GadgetHit
   Case 1
    AltezzaBarra=AltezzaInternaFinestraEditoreSequenza-8-8
    YInizioAreaVisibile=ValoreBarra{1,AreaInvisibileDelleNote,AltezzaBarra,"VERTICAL",#ListaBottoniEditoreSequenza}
   Case 2
    LunghezzaBarra.w=XLunAreaEventiMusicali
    XInizioAreaVisibile=ValoreBarra{2,AreaInvisibileDelTempo,LunghezzaBarra,"HORIZONTAL",#ListaBottoniEditoreSequenza}
    If XInizioAreaVisibile<0 Then XInizioAreaVisibile=0
   End Select
   SecondoClicDelTopo=False
  Case #HaiAttivatoIlMenu
   Menu.b=MenuHit:Voce.b=ItemHit
   Select Menu
   Case 0
    Select Voce
    Case 0
     PushItem Sequenza()
     PushItem SequenzaNellaTraccia()
     PushItem EventoMusicale()
     InterrompiTutteLeNote{#EseguiGliEventiMusicaliDallEditoreSequenza}
     EseguiGliEventiMusicali{#EseguiGliEventiMusicaliDallEditoreSequenza}
     InterrompiTutteLeNote{#EseguiGliEventiMusicaliDallEditoreSequenza}
     PopItem EventoMusicale()
     PopItem SequenzaNellaTraccia()
     PopItem Sequenza()
    Case 1
     RegistraGliEventiMusicali{#EseguiGliEventiMusicaliDallEditoreSequenza}
    End Select
   Case 1
    Select Voce
    Case 0
     Selezione{#SelezionaTuttiGliEventiMusicali}
    Case 1
     Selezione{#DeselezionaTuttiGliEventiMusicali}
    Case 2
     Selezione{#InvertiLaSelezioneDiTuttiGliEventiMusicali}
    Case 3
     Selezione{#TagliaGliEventiMusicaliSelezionati}
    Case 4
     Selezione{#CopiaGliEventiMusicaliSelezionati}
    Case 5
     Selezione{#IncollaGliEventiMusicali}
    Case 6
     Selezione{#DimenticaGliEventiMusicaliTagliatiOCopiati}
    Case 7
     XInizioAreaVisibile=PuntoDInserimento
    End Select
   Case 2
    Select Voce
    Case 0
     TipoDiEventoMusicaleDiBase$="Note"
    Case 1
     TipoDiEventoMusicaleDiBase$="Program"
    Case 2
     TipoDiEventoMusicaleDiBase$="Control"
    Case 3
     TipoDiEventoMusicaleDiBase$="PolyAftertouch"
    Case 4
     TipoDiEventoMusicaleDiBase$="MonoAftertouch"
    Case 5
     TipoDiEventoMusicaleDiBase$="PitchBend"
    Case 6
     TipoDiEventoMusicaleDiBase$="Tempo"
    Case 7
     TipoDiEventoMusicaleDiBase$="BPM"
    Case 8
     MostraSoloGliEventiMusicaliDelloStessoTipo=NOT MostraSoloGliEventiMusicaliDelloStessoTipo
    End Select
   Case 3
    Select Voce
    Case 0
     CambiaValoriEventoBase{}
    Case 1
     MostraNuovoValore=NOT MostraNuovoValore
    End Select
   Case 4
    Select Voce
    Case 0
     MostraITastiDelTopoDaUsare{}
    Case 1
     MostraITastiDaUsare{}
    Case 2
     MostraLaMappaturaDelleNoteSullaTastiera{}
    End Select
   End Select
   SecondoClicDelTopo=False
  Case #HaiChiusoLaFinestra
   EsciDallEditoreSequenza.b=True
  Case #HaiPremutoUnTasto
   TastoPremuto$=LCase$(Inkey$):TastoRiga.w=RawKey:TastiShiftPremuti.b=(Qualifier-$8000) & %0011
   If TastoPremuto$=TastoFuga$ Then EsciDallEditoreSequenza=True
   If TastoPremuto$="a" Then AreaDiSelezioneAttivata=NOT AreaDiSelezioneAttivata
   Select TastoRiga
   Case 2
    Nota$="C#2"
   Case 3
    Nota$="D#2"
   Case 5
    Nota$="F#2"
   Case 6
    Nota$="G#2"
   Case 7
    Nota$="A#2"
   Case 16
    Nota$="C2"
   Case 17
    Nota$="D2"
   Case 18
    Nota$="E2"
   Case 19
    Nota$="F2"
   Case 20
    Nota$="G2"
   Case 21
    Nota$="A2"
   Case 22
    Nota$="B2"
   Case 33
    Nota$="C#1"
   Case 34
    Nota$="D#1"
   Case 36
    Nota$="F#1"
   Case 37
    Nota$="G#1"
   Case 38
    Nota$="A#1"
   Case 49
    Nota$="C1"
   Case 50
    Nota$="D1"
   Case 51
    Nota$="E1"
   Case 52
    Nota$="F1"
   Case 53
    Nota$="G1"
   Case 54
    Nota$="A1"
   Case 55
    Nota$="B1"
   Case 80
    OttavaSelezionata=0
   Case 81
    OttavaSelezionata=1
   Case 82
    OttavaSelezionata=2
   Case 83
    OttavaSelezionata=3
   Case 84
    OttavaSelezionata=4
   Case 85
    OttavaSelezionata=5
   Case 86
    OttavaSelezionata=6
   Case 87
    OttavaSelezionata=7
   Case 88
    OttavaSelezionata=8
   Case 89
    OttavaSelezionata=9
   Default
    TastoRiga=0
   End Select
   If TastoRiga>0
    If TastoRiga<80
     AggiungiUnaNotaDallaTastiera{Nota$}
    Else
     YInizioAreaVisibile=127-(127-AreaInvisibileDelleNote)-OttavaSelezionata*12
     If YInizioAreaVisibile<0 Then YInizioAreaVisibile=0
    EndIf
   EndIf
   If EventiMusicaliSelezionati>0
    If TastiShiftPremuti>0
     Select TastoPremuto$
     Case TastoIndietro$
      Selezione{#EliminaGliEventiMusicaliSelezionati}
     Case TastoCursoreSu$
      If TipoDiEventoMusicaleDiBase$="Note" Then Selezione{#AlzaDiUnOttavaLeNoteSelezionate}
      If TipoDiEventoMusicaleDiBase$="Program" Then Selezione{#AggiungiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="Control" Then Selezione{#AggiungiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="PolyAftertouch" Then Selezione{#AggiungiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="MonoAftertouch" Then Selezione{#AggiungiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="Tempo" Then Selezione{#AggiungiUnaMisuraAlTempoSelezionato}
      If TipoDiEventoMusicaleDiBase$="BPM" Then Selezione{#AggiungiDieciAgliEventiMusicaliSelezionati}
     Case TastoCursoreGiu$
      If TipoDiEventoMusicaleDiBase$="Note" Then Selezione{#AbbassaDiUnOttavaLeNoteSelezionate}
      If TipoDiEventoMusicaleDiBase$="Program" Then Selezione{#SottraiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="Control" Then Selezione{#SottraiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="PolyAftertouch" Then Selezione{#SottraiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="MonoAftertouch" Then Selezione{#SottraiOttoAgliEventiMusicaliSelezionati}
      If TipoDiEventoMusicaleDiBase$="Tempo" Then Selezione{#TogliUnaMisuraAlTempoSelezionato}
      If TipoDiEventoMusicaleDiBase$="BPM" Then Selezione{#SottraiDieciAgliEventiMusicaliSelezionati}
     Case TastoCursoreDestra$
      If TipoDiEventoMusicaleDiBase$="Note" Then Selezione{#AllungaLaDurataDelleNoteSelezionate}
     Case TastoCursoreSinistra$
      If TipoDiEventoMusicaleDiBase$="Note" Then Selezione{#RiduciLaDurataDelleNoteSelezionate}
     End Select
    Else
     Select TastoPremuto$
     Case TastoIndietro$
      If LastItem(EventoMusicale())=True
       If EventoMusicale()\Stato & #EventoMusicaleSelezionato=#EventoMusicaleSelezionato Then EventiMusicaliSelezionati-1
       DurataSequenza-EventoMusicale()\Durata
       XInizioAreaVisibile-DurataEventoMusicale
       If XInizioAreaVisibile<0 Then XInizioAreaVisibile=0
       KillItem EventoMusicale():EventiMusicali-1
      EndIf
     Case TastoCursoreSu$
      If TipoDiEventoMusicaleDiBase$="Tempo"
       Selezione{#AggiungiUnBattitoAlTempoSelezionato}
      Else
       Selezione{#AlzaDiUnoGliEventiMusicaliSelezionati}
      EndIf
     Case TastoCursoreGiu$
      If TipoDiEventoMusicaleDiBase$="Tempo"
       Selezione{#TogliUnBattitoAlTempoSelezionato}
      Else
       Selezione{#AbbassaDiUnoGliEventiMusicaliSelezionati}
      EndIf
     Case TastoCursoreDestra$
      Selezione{#SpostaAvantiNelTempoGliEventiMusicaliSelezionati}
     Case TastoCursoreSinistra$
      Selezione{#SpostaIndietroNelTempoGliEventiMusicaliSelezionati}
     End Select
    EndIf
   Else
    If TastiShiftPremuti>0
     Select TastoPremuto$
     Case TastoIndietro$
      If LastItem(EventoMusicale())=True
       If EventoMusicale()\Stato & #EventoMusicaleSelezionato=#EventoMusicaleSelezionato Then EventiMusicaliSelezionati-1
       DurataSequenza-EventoMusicale()\Durata
       XInizioAreaVisibile-DurataEventoMusicale
       If XInizioAreaVisibile<0 Then XInizioAreaVisibile=0
       KillItem EventoMusicale():EventiMusicali-1
      EndIf
     Case TastoCursoreDestra$
      PuntoDInserimento+LarghezzaEventoBase
      If PuntoDInserimento>DurataSequenza Then PuntoDInserimento=DurataSequenza
     Case TastoCursoreSinistra$
      PuntoDInserimento-LarghezzaEventoBase
      If PuntoDInserimento<0 Then PuntoDInserimento=0
     End Select
    Else
     Select TastoPremuto$
     Case TastoIndietro$
      If LastItem(EventoMusicale())=True
       If EventoMusicale()\Stato & #EventoMusicaleSelezionato=#EventoMusicaleSelezionato Then EventiMusicaliSelezionati-1
       DurataSequenza-EventoMusicale()\Durata
       XInizioAreaVisibile-DurataEventoMusicale
       If XInizioAreaVisibile<0 Then XInizioAreaVisibile=0
       KillItem EventoMusicale():EventiMusicali-1
      EndIf
     Case TastoCursoreSu$
      If YInizioAreaVisibile>0 Then YInizioAreaVisibile-1
     Case TastoCursoreGiu$
      If YInizioAreaVisibile<AreaInvisibileDelleNote Then YInizioAreaVisibile+1
     Case TastoCursoreDestra$
      XInizioAreaVisibile+LarghezzaEventoBase
      If XInizioAreaVisibile>AreaInvisibileDelTempo Then XInizioAreaVisibile=AreaInvisibileDelTempo
     Case TastoCursoreSinistra$
      XInizioAreaVisibile-LarghezzaEventoBase
      If XInizioAreaVisibile<0 Then XInizioAreaVisibile=0
     End Select
    EndIf
   EndIf
   If TastoPremuto$=Spazio$
    ResetList EventoMusicale()
    While NextItem(EventoMusicale())
     If EventoMusicale()\Inizio>=PuntoDInserimento Then EventoMusicale()\Inizio+LarghezzaEventoBase
    Wend
    PuntoDInserimento+LarghezzaEventoBase
    DurataSequenza+LarghezzaEventoBase
   EndIf
   SecondoClicDelTopo=False
  End Select
 Until EsciDallEditoreSequenza=True

 CancellaIBottoni{}

 Sequenza()\EventiMusicali=EventiMusicali
 Sequenza()\EventiMusicaliSelezionati=EventiMusicaliSelezionati
 If DurataSequenza<(#TicDiBasePerQuarto*4.0*Battiti)/Misure Then DurataSequenza=(#TicDiBasePerQuarto*4.0*Battiti)/Misure
 Sequenza()\Durata=DurataSequenza
 LunghezzaSequenza.l=SequenzaNellaTraccia()\Inizio+Sequenza()\Durata
 If LunghezzaBrano<LunghezzaSequenza Then LunghezzaBrano=LunghezzaSequenza
 MostraSoloGliEventiMusicaliDelloStessoTipo=False
 MostraSoloGliEventiMusicaliDelCanaleSelezionato=False
 CloseWindow #FinEditoreSequenza
 Use Window #FinPrincipale
End Statement

;------------------------------------------------------------------------------
;questa procedura elimina tutti gli eventi musicali della sequenza selezionata
;this procedure deletes all the events of the selected  sequence
;-----------------------------------------------------------------
Statement EliminaTuttiGliEventiMusicaliDellaSequenza{}
SHARED DurataSequenza
SHARED EventiMusicali
SHARED EventiMusicaliSelezionati
SHARED EventoMusicale()
SHARED Sequenza()
SHARED SequenzaSelezionata
 If Sequenza()\EventiMusicali>0
  ResetList EventoMusicale()
  While NextItem(EventoMusicale())=True
   If EventoMusicale()\Sequenza=SequenzaSelezionata
    If EventoMusicale()\Stato & #EventoMusicaleSelezionato=#EventoMusicaleSelezionato
     Sequenza()\EventiMusicaliSelezionati-1
    EndIf
    EventoMusicale()\Tipo="",0,0,0,0,0,0,0:KillItem EventoMusicale()
    Sequenza()\EventiMusicali-1
   EndIf
  Wend
 EndIf
 DurataSequenza=0
 EventiMusicali=0
 EventiMusicaliSelezionati=0
End Statement

;-----------------------------------------------------------
;questa procedura cambia il nome della sequenza selezionata
;this procedure change the selected sequence's name
;---------------------------------------------------
Statement CambiaIlNomeDellaSequenzaSelezionata{}
SHARED Sequenza()
SHARED SequenzaSelezionata
SHARED Spazio$
 WJam #DueColoriPieni

 WColour 10,11
 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Please type the new name for the sequence>"
 NomeDiBaseDellaSequenzaSelezionata$="Sequence"+Spazio$+Str$(SequenzaSelezionata)
 NomeDellaSequenzaSelezionata$=Edit$(NomeDiBaseDellaSequenzaSelezionata$,38)
 NomeDellaSequenzaSelezionata$=StripLead$(StripTrail$(NomeDellaSequenzaSelezionata$,Asc(Spazio$)),Asc(Spazio$))
 If NomeDellaSequenzaSelezionata$<>"" Then Sequenza()\Nome=NomeDellaSequenzaSelezionata$
End Statement

;---------------------------------------------
;questa procedura mostra la sequenza indicata
;this procedure shows the stated sequence
;-----------------------------------------
Statement MostraSequenza{Sequenza.l,InizioSequenza.l,DurataSequenza.l,TracciaSequenza.w,ModoDisegno.b}
SHARED AltezzaInternaFinestraPrincipale
SHARED LarghezzaInternaFinestraPrincipale
SHARED Sequenza()
SHARED TracceVisibili
SHARED XTracceVisibili
SHARED YTracceVisibili
 Y0.w=(TracciaSequenza-YTracceVisibili)*8:Y1.w=Y0+7
 If Y0>=8 AND Y1<8+TracceVisibili*8
  FineSequenza.l=InizioSequenza+DurataSequenza-1
  I.w=InizioSequenza-XTracceVisibili
  F.w=FineSequenza-XTracceVisibili
  If I>=0 AND I<LarghezzaInternaFinestraPrincipale
   InizioSequenzaVisibile.b=True
  Else
   InizioSequenzaVisibile=False
  EndIf
  If F>=0 AND F<LarghezzaInternaFinestraPrincipale
   FineSequenzaVisibile.b=True
  Else
   FineSequenzaVisibile=False
  EndIf
  If I<0 AND F>LarghezzaInternaFinestraPrincipale
   SequenzaVisibile.b=True
  Else
   If InizioSequenzaVisibile=True OR FineSequenzaVisibile=True
    SequenzaVisibile=True
   Else
    SequenzaVisibile=False
   EndIf
  EndIf
  If SequenzaVisibile=True
   I+16:F+16
   X0Sequenza.w=LimitiInteri{I,16,LarghezzaInternaFinestraPrincipale-1}
   Y0Sequenza.w=LimitiInteri{Y0,8,AltezzaInternaFinestraPrincipale-1-8-8-4-7}
   X1Sequenza.w=LimitiInteri{F,16,LarghezzaInternaFinestraPrincipale-1}
   Y1Sequenza.w=LimitiInteri{Y1,8+7,AltezzaInternaFinestraPrincipale-1-8-8-4}
   ColoreTestoDellaSequenza.b=Sequenza()\ColoreTesto
   ColoreSfondoDellaSequenza.b=Sequenza()\ColoreSfondo
   WBox X0Sequenza,Y0Sequenza,X1Sequenza,Y1Sequenza,ColoreSfondoDellaSequenza
   If ModoDisegno=#SequenzaSelezionata
    Wline X0Sequenza,Y0,X1Sequenza,Y1,ColoreTestoDellaSequenza
    Wline X0Sequenza,Y1,X1Sequenza,Y0,ColoreTestoDellaSequenza
   EndIf
   If ModoDisegno=#SequenzaNonSelezionata
    Wline X0Sequenza+1,Y0Sequenza+1,X1Sequenza-1,Y0Sequenza+1,ColoreTestoDellaSequenza
    Wline X0Sequenza+1,Y1Sequenza-1,X1Sequenza-1,Y1Sequenza-1,ColoreTestoDellaSequenza
   EndIf
   If ModoDisegno=#SequenzaNonSelezionata
    If InizioSequenzaVisibile=True
     Wline I+1,Y0Sequenza+1,I+1,Y1Sequenza-1,ColoreTestoDellaSequenza
    EndIf
    If FineSequenzaVisibile=True
     Wline F-1,Y0Sequenza+1,F-1,Y1Sequenza-1,ColoreTestoDellaSequenza
    EndIf
   EndIf
   NomeSequenza$=Sequenza()\Nome
   If NomeSequenza$="" Then NomeSequenza$="Sequence "+Str$(Sequenza)
   If I>=16 OR I<LarghezzaInternaFinestraPrincipale OR F>=16 OR F<LarghezzaInternaFinestraPrincipale
    WColour ColoreTestoDellaSequenza,ColoreSfondoDellaSequenza
    If I<16 Then I=16
    If F>LarghezzaInternaFinestraPrincipale-1 Then F=LarghezzaInternaFinestraPrincipale-1
    WLocate I,Y0Sequenza:Print Left$(NomeSequenza$,(F-I+1)/#GrandezzaFonteTopaz)
   EndIf
  EndIf
 EndIf
End Statement

;--------------------------------------------------------------
;questa procedura mostra le sequenze nella finestra principale
;this procedure show the sequences in the main window
;-----------------------------------------------------
Statement MostraLeSequenze{}
SHARED Sequenza()
SHARED SequenzaNellaTraccia()
SHARED SequenzaSelezionata
SHARED TracceVisibili
SHARED Traccia()
SHARED YTracceVisibili
 WJam #UnColoreSenzaSfondo

 For Traccia.b=1 To TracceVisibili
  If Traccia(YTracceVisibili+Traccia-1)=False
   WColour #ColAcquamarina+#Scuro:WLocate 16,Traccia*8:Print "Track ",YTracceVisibili+Traccia," empty"
  Else
   ResetList SequenzaNellaTraccia()
   ResetList Sequenza()
   SequenzaCorrente.l=0
   While NextItem(SequenzaNellaTraccia())=True
    InizioSequenza.l=SequenzaNellaTraccia()\Inizio/#RiduzioneSequenze
    Sequenza.l=SequenzaNellaTraccia()\Sequenza
    TracciaSequenza.w=SequenzaNellaTraccia()\Traccia
    PosizioneTraccia.b=TracciaSequenza-YTracceVisibili
    If PosizioneTraccia>=1 AND PosizioneTraccia<=TracceVisibili
     While NextItem(Sequenza())=True
      SequenzaCorrente+1
      If SequenzaCorrente=Sequenza
       DurataSequenza.l=Sequenza()\Durata/#RiduzioneSequenze
       If DurataSequenza>0
        If Sequenza=SequenzaSelezionata Then ModoDisegno.b=#SequenzaSelezionata Else ModoDisegno=#SequenzaNonSelezionata
        MostraSequenza{Sequenza,InizioSequenza,DurataSequenza,TracciaSequenza,ModoDisegno}
        Pop If:Pop If:Pop While:Pop If:Goto FineCicloRicercaSequenzaDaMostrare
       EndIf
      EndIf
     Wend
    EndIf
FineCicloRicercaSequenzaDaMostrare
   Wend
  EndIf
 Next Traccia
End Statement

;--------------------------------------------------------------------------
;questa procedura mostra le barre di scorrimento della finestra principale
;this procedure shows the main window sliders
;---------------------------------------------
Statement MostraBarreFinestraPrincipale{}
SHARED AreaInvisibileDelMotivo
SHARED BattutePerMinuto
SHARED LarghezzaInternaFinestraPrincipale
SHARED LunghezzaBrano
SHARED TracceVisibili
SHARED XTracceVisibili
SHARED YTracceVisibili
;-------------------------------------------------------------------------
;imposta la barra di scorrimento della velocita' di esecuzione delle note
;sets the notes execution velocity slider
;-----------------------------------------
 MostraBarra{1,BattutePerMinuto-10,300-9,"HORIZONTAL",#ListaBottoniPrincipale,#FinPrincipale}

;----------------------------
;mostra le sequenze visibili
;shows the visible sequences
;----------------------------
 MostraBarra{2,YTracceVisibili,#MassimoTracce-TracceVisibili,"VERTICAL",#ListaBottoniPrincipale,#FinPrincipale}

;-------------------------------------
;calcola l'area invisibile del motivo
;evaluate the motive's invisible area
;-------------------------------------
 AreaInvisibileDelMotivo=LunghezzaBrano/#RiduzioneSequenze-(LarghezzaInternaFinestraPrincipale-16)
 If AreaInvisibileDelMotivo<1 Then AreaInvisibileDelMotivo=1

;----------------------------
;mostra le sequenze visibili
;shows the visible sequences
;----------------------------
 MostraBarra{3,XTracceVisibili,AreaInvisibileDelMotivo,"HORIZONTAL",#ListaBottoniPrincipale,#FinPrincipale}
End Statement

;--------------------------------------------------------
;questa procedura mostra gli eventi musicali disponibili
;this procedure shows the available musical events
;--------------------------------------------------
Statement MostraGliEventiMusicaliDisponibili{}
SHARED MassimoEventiMusicali
SHARED Sequenza()
SHARED SequenzaEsistente()
SHARED SequenzaNellaTraccia()
SHARED TotaleEventiMusicali
 WJam #UnColoreSenzaSfondo

 Sequenze.l=0
 TotaleEventiMusicali=0
 ResetList SequenzaNellaTraccia()
 While NextItem(SequenzaNellaTraccia())=True
  Sequenza=SequenzaNellaTraccia()\Sequenza
  If Sequenza>0
   If SequenzaNellaTraccia()\Genitore=True
    ResetList Sequenza()
    SequenzaCorrente.l=0
    While NextItem(Sequenza())=True
     SequenzaCorrente+1
     If SequenzaCorrente=Sequenza AND Sequenza()\Durata>0
      TotaleEventiMusicali+Sequenza()\EventiMusicali
      Sequenze+1
     EndIf
    Wend
    SequenzaEsistente(Sequenza-1)=True
   EndIf
  EndIf
 Wend
 WColour 11:WLocate 0,0:Print MassimoEventiMusicali," events allocated, ",TotaleEventiMusicali," event"
 If TotaleEventiMusicali<>1 Then Print "s"
 Print " used, "
 If Sequenze>0
  Print Sequenze," sequence":If Sequenze>1 Then Print "s"
 Else
  Print "no sequences"
 EndIf
End Statement

;-------------------------------------------------
;questa procedura elimina la sequenza selezionata
;this procedure deletes the selected sequence
;---------------------------------------------
Statement EliminaLaSequenzaSelezionata{}
SHARED ColoriDellaSequenza
SHARED Sequenza()
SHARED SequenzaEsistente()
SHARED SequenzaNellaTraccia()
SHARED SequenzaSelezionata
SHARED Traccia()
 If SequenzaSelezionata>0
  TracciaDellaSequenzaEliminata.w=SequenzaNellaTraccia()\Traccia
  SequenzaNellaTraccia()\Sequenza=0,0,0,0
  KillItem SequenzaNellaTraccia()
  ResetList SequenzaNellaTraccia()
  SequenzaCorrente.l=0
  TracciaConSequenza.b=False
  While NextItem(SequenzaNellaTraccia())=True
   If SequenzaNellaTraccia()\Sequenza=SequenzaSelezionata
    SequenzaCorrente+1
    If SequenzaCorrente=1
     SequenzaNellaTraccia()\Genitore=True
    Else
     SequenzaNellaTraccia()\Genitore=SequenzaSelezionata
    EndIf
   EndIf
   If SequenzaNellaTraccia()\Traccia=TracciaDellaSequenzaEliminata
    TracciaConSequenza=True
   EndIf
  Wend
  If SequenzaCorrente=0
   EliminaTuttiGliEventiMusicaliDellaSequenza{}
   Sequenza()\Nome="",0,0,0
   KillItem Sequenza()
   SequenzaEsistente(SequenzaSelezionata-1)=False
  EndIf
  If TracciaConSequenza=False Then Traccia(TracciaDellaSequenzaEliminata-1)=False
  If LastItem(SequenzaNellaTraccia())=True
   If SequenzaNellaTraccia()\Sequenza>SequenzaSelezionata
    SequenzaEsistente(SequenzaNellaTraccia()\Sequenza-1)=False
    Repeat
     If SequenzaNellaTraccia()\Sequenza>SequenzaSelezionata
      PushItem SequenzaNellaTraccia()
      If PrevItem(SequenzaNellaTraccia())=True
       If SequenzaNellaTraccia()\Sequenza>SequenzaSelezionata
        Sequenza=SequenzaNellaTraccia()\Sequenza
       Else
        Sequenza=SequenzaSelezionata
       EndIf
       PopItem SequenzaNellaTraccia()
       SequenzaNellaTraccia()\Sequenza=Sequenza
      Else
       PopItem SequenzaNellaTraccia()
       SequenzaNellaTraccia()\Sequenza=SequenzaSelezionata
      EndIf
      PrevItem SequenzaNellaTraccia()
     EndIf
    Until SequenzaNellaTraccia()\Sequenza<=SequenzaSelezionata
   EndIf
  EndIf
  SequenzaSelezionata=0
  If ColoriDellaSequenza>0 Then ColoriDellaSequenza-1
 Else
  RichiestaPannello{"TITOLO","You must select a sequence first","OK"}
 EndIf
End Statement

;----------------------------------------------------
;questa procedura cancella tutti gli eventi musicali
;this procedure deletes all the musical events
;----------------------------------------------
Statement CancellaTutto{}
SHARED ColoriDellaSequenza
SHARED DurataSequenza
SHARED EventiMusicali
SHARED EventiMusicaliSelezionati
SHARED EventoMusicale()
SHARED LunghezzaBrano
SHARED Sequenza()
SHARED SequenzaEsistente()
SHARED SequenzaNellaTraccia()
SHARED SequenzaSelezionata
SHARED Suono()
SHARED Traccia()
 ResetList EventoMusicale()
 While NextItem(EventoMusicale())=True
  EventoMusicale()\Tipo="",0,0,0,0,0,0,0:KillItem EventoMusicale()
 Wend
 ClearList EventoMusicale()
 ResetList Sequenza()
 While NextItem(Sequenza())=True
  Sequenza()\Nome="",0,0,0:KillItem Sequenza()
 Wend
 ResetList SequenzaNellaTraccia()
 While NextItem(SequenzaNellaTraccia())=True
  SequenzaNellaTraccia()\Sequenza=0,0,0,0:KillItem SequenzaNellaTraccia()
 Wend
 ClearList Sequenza()
 ClearList SequenzaNellaTraccia()
 For Traccia.w=0 To #MassimoTracce-1
  Traccia(Traccia)=False
 Next Traccia
 For SequenzaEsistente.l=0 To #MassimoSequenze-1
  SequenzaEsistente(SequenzaEsistente)=0
 Next SequenzaEsistente
 For Suono.b=0 To 31
  Suono(Suono)\Nome="",0
 Next Suono
 DurataSequenza=0
 EventiMusicali=0
 EventiMusicaliSelezionati=0
 LunghezzaBrano=0
 SequenzaSelezionata=0
 ColoriDellaSequenza=0
End Statement

;-------------------------------------------------
;questa procedura cambia la misurazione del tempo
;this procedure change the time misuration
;------------------------------------------
Statement CambiaLaMisuraDelTempo{}
SHARED Battiti
SHARED Misure
SHARED Spazio$
 WJam #DueColoriPieni

 WColour 10,11
 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Please type the basic time beats>"
 NuoviBattiti.w=Val(StripLead$(StripTrail$(Edit$(UStr$(#BattitiDiBase),47),Asc(Spazio$)),Asc(Spazio$)))
 Battiti=LimitiInteri{NuoviBattiti,1,16}
 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Please type the basic time measures>"
 NuoveMisure.w=Val(StripLead$(StripTrail$(Edit$(UStr$(#MisureDiBase),45),Asc(Spazio$)),Asc(Spazio$)))
 Misure=2^EsponenteDiDue{NuoveMisure}
End Statement

;-----------------------------------------------------
;questa procedura cambia la misurazione delle battute
;this procedure change the bars misuration
;------------------------------------------
Statement CambiaLaMisuraDelleBattutePerMinuto{}
SHARED BattutePerMinuto
SHARED Spazio$
 WJam #DueColoriPieni

 WColour 10,11
 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Please type the basic bars per minute>"
 NuoveBattutePerMinuto.w=Val(StripLead$(StripTrail$(Edit$("120",41),Asc(Spazio$)),Asc(Spazio$)))
 BattutePerMinuto=LimitiInteri{NuoveBattutePerMinuto,10,300}
End Statement

;----------------------------------------------
;questa procedura attiva la comunicazione MIDI
;this procedure activates the MIDI communication
;------------------------------------------------
Statement AttivaMIDI{}
SHARED MIDIAttivato
SHARED Spazio$
 WJam #DueColoriPieni

 If MIDIAttivato=True Then CloseSerial #DispositivoMIDI
 WColour 10,11
 WLocate 0,0:Print String$(Spazio$,80)
 WLocate 0,0:Print "Please type your MIDI device name>"
 DispositivoMIDI$=StripLead$(StripTrail$(Edit$("serial.device",46),Asc(Spazio$)),Asc(Spazio$))

 If DispositivoMIDI$<>""
  MIDIAttivato=OpenSerial(DispositivoMIDI$,#DispositivoMIDI,31250,16)
  If MIDIAttivato=0
   RichiestaPannello{"TITOLO","Unable to open MIDI|on "+DispositivoMIDI$,"OK"}
  Else
   SetSerialBuffer #DispositivoMIDI,64
   MIDIAttivato=True
  EndIf
 Else
  RichiestaPannello{"TITOLO","You have typed nothing!","OK"}
  MIDIAttivato=False
 EndIf

 If MIDIAttivato=True
  RichiestaPannello{"TITOLO","MIDI has been activated|on "+DispositivoMIDI$,"OK"}
 Else
  RichiestaPannello{"TITOLO","MIDI has not been activated!","Later"}
 EndIf
End Statement

;loads the font for the program
Statement CaricaLaFonteTopaz8{}
 LoadFont #FonteTopaz8,"topaz.font",8
 Use IntuiFont #FonteTopaz8
End Statement

;-----------------------------------------
;questa procedura mostra il mio faccione!
;this procedure shows my face!
;------------------------------
;Statement MostraIlMioFaccione{}
;SHARED LarghezzaFaccione
;SHARED AltezzaFaccione
;SHARED Spazio$
; WJam #DueColoriPieni

; WColour 10,11
; WLocate 0,0:Print String$(Spazio$,80)
; WLocate 0,0:Print "Please type the entire author name>"
; NomeDellAutoreDiQuestoProgramma$=LCase$(Edit$(45))
; NomeDellAutoreDiQuestoProgramma$=StripLead$(StripTrail$(NomeDellAutoreDiQuestoProgramma$,Asc(Spazio$)),Asc(Spazio$))
; If Instr(NomeDellAutoreDiQuestoProgramma$,"stefano")=0 Then Statement Return
; If Instr(NomeDellAutoreDiQuestoProgramma$,"maria")=0 Then Statement Return
; If Instr(NomeDellAutoreDiQuestoProgramma$,"regattin")=0 Then Statement Return

;--------------------------------------------------------------------
;include in questo punto il sorgente dell'immagine del mio faccione!
;includes into this point the source for the image of my face!
;--------------------------------------------------------------
; XINCLUDE "Author.bb2"

; WaitEvent
;End Statement

;************************************************
;* fine delle procedure ed inizio del programma *
;******* procedures end and program start *******
;************************************************

;----------------------------------------------------
;questo programma puo' essere lanciato dal Workbench
;this program can be launched from Workbench
;--------------------------------------------
WBStartup

;-----------------------------------------------
;sezione di codice per la gestione degli errori
;error management code section
;------------------------------
SetErr
 If ErroreDiCaricamentoImmagineNote=True
  RichiestaPannello{"TITOLO","I cannot load the notes image!","OK"}
  ErroreDiCaricamentoImmagineNote=False
  ErroreSconosciuto=False

  Pop If:Goto DopoErroreDiCaricamentoImmagineNote
 EndIf

 If ErroreDiCaricamentoDellImmagineDiSfondo=True
  RichiestaPannello{"TITOLO","I cannot load the "+ImmagineDiSfondo$+" image!","OK"}
  ErroreDiCaricamentoDellImmagineDiSfondo=False
  ErroreSconosciuto=False

  Pop If:Goto DopoErroreDiCaricamentoDellImmagineDiSfondo
 EndIf

 If ErroreDiCaricamentoDelSuono=True
  RichiestaPannello{"TITOLO","This is not an AMIGA sound!","OK"}

  CloseWindow #FinEditoreSuono
  CloseWindow #FinGestoreSuoni
  Use Window #FinPrincipale
  Activate #FinPrincipale
  MenusOn

  INIZIOSUONO=0
  ErroreSconosciuto=False

  Pop If:Goto DopoErroreDiCaricamentoDelSuono
 EndIf

 If ErroreSconosciuto=True
  RichiestaPannello{"TITOLO","Unknown error!","OK"}
  Pop If:Goto FineDelProgramma
 EndIf
End SetErr

;calculates the frequency and the AMIGA voice period for all the 128 notes
CalcolaLaFrequenzaEdIlPeriodoDelleNote{}

;----------------------------------------------------------------------------
;questa variabile contiene la nuova frequenza del suono che e' inizializzata
;al Do dell'ottava ottava
;this variable retains the new sound frequency that is initialized at C of the
;eight octave
;--------------
NUOVAFREQUENZA=PeriFreq(12*8)\Frequenza:FREQUENZA=NUOVAFREQUENZA

;maximum sound frequency
FREQUENZAMASSIMA=PeriFreq(12*9+9)\Frequenza

;loads the Topaz8 font
CaricaLaFonteTopaz8{}

;sets the screen
ImpostaLoSchermo{}

;sets the main window
ImpostaLaFinestraPrincipale{}

;this procedure loads the note images for the basic event procedure
CaricaLImmagineDelleNote{}

DopoErroreDiCaricamentoImmagineNote

;creates the background bitmap
CreaLAreaGraficaConLImmagineDiSfondo{}

DopoErroreDiCaricamentoDellImmagineDiSfondo

;puts the background pic into the main window
MettiLImmagineDiSfondoNellaFinestraPrincipale{}

;shows the main window' sliders
MostraBarreFinestraPrincipale{}

;loads the loaded LoadedMIDIFiles history
CaricaLaStoriaDeiFileMIDIAperti{}

;sets the main window menu
ImpostaMenuFinestraPrincipale{}

;--------------------------------------------------------------------------
;copia in memoria lo sfondo della posizione a video dell'indicazione delle
;battute per minuto
;copies into memory the measures per minute indication's on screen position
;background
;------------
;CopiaLoSfondoSottoAlleBattutePerMinuto{}

;------------------------------------------------------------------------------
;copia in memoria lo sfondo della posizione a video dell'indicazione del tempo
;copies into memory the time indication's on screen position background
;-----------------------------------------------------------------------
;CopiaLoSfondoSottoAlTempo{}

;shows the sequences
MostraLeSequenze{}

;shows the execution velocity in bars per minute
MostraLeBattutePerMinuto{BattutePerMinuto,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}

;shows the metronomic time
MostraIlTempo{#BattitiDiBase-1+EsponenteDiDue{#MisureDiBase}*16,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}

;activates MIDI
AttivaMIDI{}

;shows the keys to use in the main window
MostraITastiDaUsareNellaFinestraPrincipale{}

DopoErroreDiCaricamentoDelSuono
If ErroreDiCaricamentoDelSuono=True
 GestoreSuoni{}
 ErroreDiCaricamentoDelSuono=False
EndIf

;-----------------
;clclo principale
;main loop
;----------
Repeat

 If SecondoClicDelTopo.b=False
  MettiLImmagineDiSfondoNellaFinestraPrincipale{}
  PushItem Sequenza()
  PushItem SequenzaNellaTraccia()
  PushItem EventoMusicale()
  MostraGliEventiMusicaliDisponibili{}
  MostraLeSequenze{}
  PopItem EventoMusicale()
  PopItem SequenzaNellaTraccia()
  PopItem Sequenza()
  MostraLeBattutePerMinuto{BattutePerMinuto,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
  MostraIlTempo{Battiti-1+EsponenteDiDue{Misure}*16,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
  MostraBarreFinestraPrincipale{}
  SecondoClicDelTopo=True
 EndIf

 If NoteSuonate>0
  If NoteSuonate=1 Then Messaggio$="There is a note" Else Messaggio$="There are "+UStr$(NoteSuonate)+" notes"
  Messaggio$+" still playing:|clicking on OK you will stop "
  If NoteSuonate=1 Then Messaggio$+"this." Else Messaggio$+"these."
  RichiestaPannello{"TITOLO",Messaggio$,"OK"}
  InterrompiTutteLeNote{#EseguiGliEventiMusicaliDallaFinestraPrincipale}
  NoteSuonate=0
 EndIf

;--------------------------------------------------------------
;questa variabile cattura gli eventi della finestra principale
;this variable catch main window events
;---------------------------------------
 EventoFinestraPrincipale.l=WaitEvent

 Select EventoFinestraPrincipale

;------------------------------------
;se avete premuto un tasto del mouse
;if you have pressed a mouse button
;-----------------------------------
 Case #HaiPremutoUnTastoDelTopo
  XTopo=WMouseX:YTopo=WMouseY:TastiDelTopo=MButtons
  Select TastiDelTopo
  Case #TastoSinistroDelTopoPremuto
   If YTopo>=8 AND YTopo<8+TracceVisibili*8
    TracciaSelezionata.w=YTopo/8+YTracceVisibili
    ResetList SequenzaNellaTraccia()
    SequenzaSelezionata=0
    While NextItem(SequenzaNellaTraccia())=True
     TracciaSequenza.w=SequenzaNellaTraccia()\Traccia
     If TracciaSequenza=TracciaSelezionata
      Sequenza=SequenzaNellaTraccia()\Sequenza
      InizioSequenza.l=SequenzaNellaTraccia()\Inizio
      ResetList Sequenza()
      SequenzaCorrente.l=0
      While NextItem(Sequenza())=True
       SequenzaCorrente+1
       If SequenzaCorrente=Sequenza
        DurataSequenza.l=Sequenza()\Durata
        If DurataSequenza>0
         FineSequenza.l=InizioSequenza+DurataSequenza-1
         I.w=InizioSequenza/#RiduzioneSequenze-XTracceVisibili+16
         F.w=FineSequenza/#RiduzioneSequenze-XTracceVisibili+16
         If XTopo>=I AND XTopo<=F
          SequenzaSelezionata=Sequenza
          Pop If:Pop If:Pop If:Pop While:Pop If:Pop While
          Goto FineRicercaSequenzaSelezionata
         EndIf
        EndIf
       EndIf
      Wend
     EndIf
    Wend
    If XTopo>16 AND XTopo<InnerWidth
     For Sequenza=1 To SequenzaMassimaDaCreare
      If SequenzaEsistente(Sequenza-1)=False
       Pop If:Pop For:Goto FineRicercaSequenzaDaAggiungere
      EndIf
     Next Sequenza
FineRicercaSequenzaDaAggiungere
     LastItem Sequenza()
     LastItem SequenzaNellaTraccia()
     If AddItem(Sequenza())=True AND AddItem(SequenzaNellaTraccia())=True
      SequenzaNellaTraccia()\Sequenza=Sequenza
      SequenzaNellaTraccia()\Traccia=TracciaSelezionata
      SequenzaNellaTraccia()\Inizio=XTracceVisibili+(XTopo-16)*#RiduzioneSequenze
      SequenzaNellaTraccia()\Genitore=True
      Sequenza()\Durata=(#TicDiBasePerQuarto*4.0*Battiti)/Misure
      If ColoriDellaSequenza<17 Then ColoriDellaSequenza+1
      If ColoriDellaSequenza<17
       ColoreTestoDellaSequenza=(ColoriDellaSequenza+4) MOD 16
       ColoreSfondoDellaSequenza=(ColoriDellaSequenza+9) MOD 16
      Else
       ColoreTestoDellaSequenza=Rnd(15)
       ColoreSfondoDellaSequenza=Rnd(15)
      EndIf
      Sequenza()\ColoreTesto=ColoreTestoDellaSequenza
      Sequenza()\ColoreSfondo=ColoreSfondoDellaSequenza
      SequenzaEsistente(Sequenza-1)=True
      Traccia(TracciaSelezionata-1)=True
      LunghezzaSequenza.l=SequenzaNellaTraccia()\Inizio+Sequenza()\Durata
      If LunghezzaBrano<LunghezzaSequenza Then LunghezzaBrano=LunghezzaSequenza
      If Sequenza=SequenzaMassimaDaCreare Then SequenzaMassimaDaCreare+1
     Else
      RichiestaPannello{"TITOLO","You have used all|the available sequences","OK"}
     EndIf
    EndIf
FineRicercaSequenzaSelezionata
    SecondoClicDelTopo=False
   EndIf
   If YTopo>AltezzaInternaFinestraPrincipale-1-8-8 AND YTopo<AltezzaInternaFinestraPrincipale-8
    If XTopo>=0 AND XTopo<Len("BMP=000")*#GrandezzaFonteTopaz
     CambiaLaMisuraDelleBattutePerMinuto{}
     MostraLeBattutePerMinuto{BattutePerMinuto,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
     SecondoClicDelTopo=False
    EndIf
    If XTopo>LarghezzaInternaFinestraPrincipale-Len("Tempo=00/000")*#GrandezzaFonteTopaz
     CambiaLaMisuraDelTempo{}
     MostraIlTempo{Battiti-1+EsponenteDiDue{Misure}*16,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
     SecondoClicDelTopo=False
    EndIf
   EndIf
  Case #TastoSinistroDelTopoRilasciato
   SecondoClicDelTopo=True
  End Select

;---------------------------
;se avete premuto un gadget
;if you have pressed a gadget
;-----------------------------
 Case #HaiPremutoUnBottone
  Select GadgetHit
  Case 1
   LunghezzaBarra.w=LarghezzaInternaFinestraPrincipale
   BattutePerMinuto=10+ValoreBarra{1,300-9,LunghezzaBarra,"HORIZONTAL",#ListaBottoniPrincipale}
   TicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto)/3000
  Case 2
   LunghezzaBarra=AltezzaSchermo-#AltezzaBarreTitoli-8-8-8
   YTracceVisibili=ValoreBarra{2,#MassimoTracce-TracceVisibili,LunghezzaBarra,"VERTICAL",#ListaBottoniPrincipale}
  Case 3
   LunghezzaBarra=LarghezzaInternaFinestraPrincipale-16
   XTracceVisibili=ValoreBarra{3,AreaInvisibileDelMotivo,LunghezzaBarra,"HORIZONTAL",#ListaBottoniPrincipale}
  End Select
  SecondoClicDelTopo=False

;------------------------------
;se avete rilasciato un gadget
;if you have released a gadget
;------------------------------
 Case #HaiRilasciatoUnBottone
  Select GadgetHit
  Case 1
   LunghezzaBarra=LarghezzaInternaFinestraPrincipale
   BattutePerMinuto=10+ValoreBarra{1,300-9,LunghezzaBarra,"HORIZONTAL",#ListaBottoniPrincipale}
   TicPerCinquantesimoDiSecondo=(#TicDiBasePerQuarto*4.0*BattutePerMinuto)/3000
  Case 2
   LunghezzaBarra=AltezzaSchermo-#AltezzaBarreTitoli-8-8-8
   YTracceVisibili=ValoreBarra{2,#MassimoTracce-TracceVisibili,LunghezzaBarra,"VERTICAL",#ListaBottoniPrincipale}
  Case 3
   LunghezzaBarra=LarghezzaInternaFinestraPrincipale-16
   XTracceVisibili=ValoreBarra{3,AreaInvisibileDelMotivo,LunghezzaBarra,"HORIZONTAL",#ListaBottoniPrincipale}
  End Select
  SecondoClicDelTopo=False

;--------------------------------------
;se avete attivato il menu' principale
;if you have activated main menu
;--------------------------------
 Case #HaiAttivatoIlMenu

  MenuScelto.b=MenuHit
  VoceScelta=ItemHit

  Select MenuScelto
  Case 0
   Select VoceScelta
   Case 0
    CancellaTutto{}
    SecondoClicDelTopo=False
   Case 1
    CancellaTutto{}
    CaricaUnFileMIDI{""}
    CaricaLaStoriaDeiFileMIDIAperti{}
    ImpostaMenuFinestraPrincipale{}
    SecondoClicDelTopo=False
   Default
    If VoceScelta>3 AND VoceScelta<VoceMenuEsci
     CancellaTutto{}
     CaricaUnFileMIDI{FileMIDIAperto$(VoceScelta-4)}
     SecondoClicDelTopo=False
    EndIf
    If VoceScelta=VoceMenuEsci Then EsciDalProgramma=True
   End Select
  Case 1
   Select VoceScelta
   Case 0
    PushItem Sequenza()
    PushItem SequenzaNellaTraccia()
    PushItem EventoMusicale()
    InterrompiTutteLeNote{#EseguiGliEventiMusicaliDallaFinestraPrincipale}
    EseguiGliEventiMusicali{#EseguiGliEventiMusicaliDallaFinestraPrincipale}
    InterrompiTutteLeNote{#EseguiGliEventiMusicaliDallaFinestraPrincipale}
    PopItem EventoMusicale()
    PopItem SequenzaNellaTraccia()
    PopItem Sequenza()
    MostraLeBattutePerMinuto{BattutePerMinuto,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
    MostraIlTempo{Battiti-1+EsponenteDiDue{Misure}*16,0,#EseguiGliEventiMusicaliDallaFinestraPrincipale}
    SecondoClicDelTopo=False
   Case 1
    RegistraGliEventiMusicali{#EseguiGliEventiMusicaliDallaFinestraPrincipale}
    SecondoClicDelTopo=False
   End Select
  Case 2
   If SequenzaSelezionata>0
    Select VoceScelta
    Case #InserisciIlNomeDellaSequenza
     CambiaIlNomeDellaSequenzaSelezionata{}
     SecondoClicDelTopo=False
    Case #EditaLaSequenza
     EditoreSequenza{}
     SecondoClicDelTopo=False
    Case #EliminaLaSequenza
     EliminaLaSequenzaSelezionata{}
     SecondoClicDelTopo=False
    End Select
   Else
    RichiestaPannello{"TITOLO","You must select a sequence first","OK"}
   EndIf
  Case 3
   If VoceScelta=0 Then GestoreSuoni{}
   WJam #UnColoreSenzaSfondo
  Case 4
   Select VoceScelta
   Case 0
    AttivaMIDI{}
    SecondoClicDelTopo=False
   Case 1
    CancellaLaStoriaDeiFileMIDIAperti{}
    ImpostaMenuFinestraPrincipale{}
   End Select
  Case 5
   If VoceScelta=0 Then MostraITastiDaUsareNellaFinestraPrincipale{}
  End Select

;-------------------------------------------------------------------
;se avete scelto la voce Quit dal menu' Project attiva la variabile
;EsciDalProgramma
;if you have selected voice Quit from Project menu activates EsciDalProgramma
;flag
;-----
  If MenuScelto=0 AND VoceScelta=VoceMenuEsci Then EsciDalProgramma=True

;--------------------------
;se avete premuto un tasto
;if you have pressed a key
;--------------------------
 Case #HaiPremutoUnTasto

;--------------------------------------------
;questa variabile memorizza il tasto premuto
;this variable stores the key pressed
;-------------------------------------
  TastoPremuto$=LCase$(Inkey$)

  Select TastoPremuto$

;-------------------------------------------------------------------
;se avete premuto il tasto Esc attiva la variabile EsciDalProgramma
;if you have typed Esc key activates EsciDalProgramma flag
;----------------------------------------------------------
  Case TastoFuga$
   EsciDalProgramma=True

  Case TastoIndietro$
   EliminaLaSequenzaSelezionata{}
   SecondoClicDelTopo=False
  Case TastoCursoreSu$
   If YTracceVisibili>0
    YTracceVisibili-1
    SecondoClicDelTopo=False
   EndIf
  Case TastoCursoreGiu$
   If YTracceVisibili<#MassimoTracce-TracceVisibili
    YTracceVisibili+1
    SecondoClicDelTopo=False
   EndIf
  Case TastoCursoreDestra$
   If XTracceVisibili<AreaInvisibileDelMotivo
    XTracceVisibili+LarghezzaEventoBase
    If XTracceVisibili>AreaInvisibileDelMotivo Then XTracceVisibili=AreaInvisibileDelMotivo
    SecondoClicDelTopo=False
   EndIf
  Case TastoCursoreSinistra$
   If XTracceVisibili>0
    XTracceVisibili-LarghezzaEventoBase
    If XTracceVisibili<0 Then XTracceVisibili=0
    SecondoClicDelTopo=False
   EndIf
;  Case "a"
;   MostraIlMioFaccione{
;   SecondoClicDelTopo=False
  Default
   SecondoClicDelTopo=True
  End Select
 End Select

 FlushEvents

;----------------------------------------------------------------
;ripete il ciclo se la variabile EsciDalProgramma e' disattivata
;repeats loop if EsciDalProgramma flag is deactivated
;-----------------------------------------------------
Until EsciDalProgramma=True

;-------------------
;fine del programma
;program end
;------------
FineDelProgramma

CancellaTutto{}

If MIDIAttivato=True Then CloseSerial #DispositivoMIDI

End
